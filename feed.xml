<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>Open-Isle 最新文章</title><link>https://www.open-isle.com</link><description>通过 API 自动生成的 RSS 订阅源</description><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><lastBuildDate>Sun, 17 Aug 2025 09:20:21 +0000</lastBuildDate><item><title>做了一个AI优化的小功能</title><link>https://www.open-isle.com/posts/34</link><description>原始文本

![Safari20250715105441.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/f9fafc2472dc44fe89ecf3d3bfea2d23.png)

可以一键点击md格式优化

![image.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/3e0437ab9e9645f5872f27a7dd05d374.png)

就可以出来mark格式正确的版本啦，无需人工调节

![Safari20250715105607.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/e36a4e125f2d491eb580d986542ef2c9.png)

特别适合Copy文字过来的小伙伴
</description><content:encoded>原始文本

![Safari20250715105441.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/f9fafc2472dc44fe89ecf3d3bfea2d23.png)

可以一键点击md格式优化

![image.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/3e0437ab9e9645f5872f27a7dd05d374.png)

就可以出来mark格式正确的版本啦，无需人工调节

![Safari20250715105607.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/e36a4e125f2d491eb580d986542ef2c9.png)

特别适合Copy文字过来的小伙伴
</content:encoded><guid isPermaLink="false">34</guid></item><item><title>本站注册登录的设计和一些心得</title><link>https://www.open-isle.com/posts/35</link><description>## 背景

- 本站采用冷启动，建站点初期我们希望白名单邀请制以注册和发言
- 需要支持邮箱注册、GitHub/Google/Discord/X等第三方登录
- 需要支持白名单邀请制，需要管理员同意才能入站登录
- 本站采用[JWT](https://zhuanlan.zhihu.com/p/86937325)来维护登录状态

## 页面设计

目前有三个页面，注册、登录和注册申请页面。

## V1版本

- 对于账号密码注册： 注册流程填写账号密码、验证邮箱，点击注册，如果是白名单机制（后台有config接口），则存储到session，在注册申请页面，拿session，最终调用register接口，得以注册用户
- 谷歌的注册，需要调用GetGid，获取google的token，存到session中，在注册申请页面，获取session，最终调用注册接口

## V1版本的缺点以及思考

- 首先出现设计模式所忌讳的职责不清晰问题，一个接口既提供注册内容又要用户提供注册理由。
- 其次注册申请页面的代码会非常混乱，session存储的键值太多，后续如果支持其他登录方式，会乱成一锅粥，每种登录方式都要把自己的登录元信息存到session中，在注册申请页面去拿。
- 有些登录方式，如GitHub/Discord是在callback页面拿到其自身的登录token的，也要拿到token，然后保存session，跳转到注册申请页面，才进行exchange
- 如果用户中途中断流程，比如点击注册后，没填写申请理由，那么本次注册也就作废了

&gt; 那能不能，我们在注册页面，先调用register接口。让后台先返回jwt token，前端逻辑处理不保存本地（也就没有登录状态），然后作为注册申请页面的URL query参数，我们在填写注册理由的时候，再提交给后台呢？这样后台可以不区分平台，只用token就能区别注册人。

- 答案应该是否定的。首先如果未登录就拿到token，完全违反jwt涉及初衷，攻击者完全可以拿着token去访问后台各种API。后台如果想防范的话，只能在各个请求头之前判断“该用户是否已经审核通过”，即使该用户有token

## V2版本的思路

在后台维护另一个jwt secret key，区别于用户登录的jwt secret key，可以命名为 `reason_jwt_secret`表明专门for 申请注册页面。

用户在注册页面点击注册后，后台会生成一个一次性的 `reason_jwt_token`给用户，用户拿着这个token可以进行申请理由填写。

申请理由发给后台后，后台通过 `reason_jwt_token`拿到用户的用户名，并且将用户的申请理由保存数据库，通知管理员.... (后续一系列操作)

这样做的好处是，践行了设计模式的单一职责原则, 注册理由页面只要拿着 `reason_jwt_token`访问后台即可。

![注册申请页面的url长这样](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/973022f2b81a4dbe8f87f582cf3ec463.png)

这样就可以做到注册和申请解耦。另外用户拿着这个token也没法干其他坏事，后台其他接口不会默认认识这个token。

另外 有一个好处是，用户注册到一半，没有填写申请理由后退出，用户登录的时候，后台可以再给用户发 `reason_jwt_token`用户拿到token就可以直接到申请页面，无需再次注册
</description><content:encoded>## 背景

- 本站采用冷启动，建站点初期我们希望白名单邀请制以注册和发言
- 需要支持邮箱注册、GitHub/Google/Discord/X等第三方登录
- 需要支持白名单邀请制，需要管理员同意才能入站登录
- 本站采用[JWT](https://zhuanlan.zhihu.com/p/86937325)来维护登录状态

## 页面设计

目前有三个页面，注册、登录和注册申请页面。

## V1版本

- 对于账号密码注册： 注册流程填写账号密码、验证邮箱，点击注册，如果是白名单机制（后台有config接口），则存储到session，在注册申请页面，拿session，最终调用register接口，得以注册用户
- 谷歌的注册，需要调用GetGid，获取google的token，存到session中，在注册申请页面，获取session，最终调用注册接口

## V1版本的缺点以及思考

- 首先出现设计模式所忌讳的职责不清晰问题，一个接口既提供注册内容又要用户提供注册理由。
- 其次注册申请页面的代码会非常混乱，session存储的键值太多，后续如果支持其他登录方式，会乱成一锅粥，每种登录方式都要把自己的登录元信息存到session中，在注册申请页面去拿。
- 有些登录方式，如GitHub/Discord是在callback页面拿到其自身的登录token的，也要拿到token，然后保存session，跳转到注册申请页面，才进行exchange
- 如果用户中途中断流程，比如点击注册后，没填写申请理由，那么本次注册也就作废了

&gt; 那能不能，我们在注册页面，先调用register接口。让后台先返回jwt token，前端逻辑处理不保存本地（也就没有登录状态），然后作为注册申请页面的URL query参数，我们在填写注册理由的时候，再提交给后台呢？这样后台可以不区分平台，只用token就能区别注册人。

- 答案应该是否定的。首先如果未登录就拿到token，完全违反jwt涉及初衷，攻击者完全可以拿着token去访问后台各种API。后台如果想防范的话，只能在各个请求头之前判断“该用户是否已经审核通过”，即使该用户有token

## V2版本的思路

在后台维护另一个jwt secret key，区别于用户登录的jwt secret key，可以命名为 `reason_jwt_secret`表明专门for 申请注册页面。

用户在注册页面点击注册后，后台会生成一个一次性的 `reason_jwt_token`给用户，用户拿着这个token可以进行申请理由填写。

申请理由发给后台后，后台通过 `reason_jwt_token`拿到用户的用户名，并且将用户的申请理由保存数据库，通知管理员.... (后续一系列操作)

这样做的好处是，践行了设计模式的单一职责原则, 注册理由页面只要拿着 `reason_jwt_token`访问后台即可。

![注册申请页面的url长这样](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/973022f2b81a4dbe8f87f582cf3ec463.png)

这样就可以做到注册和申请解耦。另外用户拿着这个token也没法干其他坏事，后台其他接口不会默认认识这个token。

另外 有一个好处是，用户注册到一半，没有填写申请理由后退出，用户登录的时候，后台可以再给用户发 `reason_jwt_token`用户拿到token就可以直接到申请页面，无需再次注册
</content:encoded><guid isPermaLink="false">35</guid></item><item><title>最小可执行的前后端CI &amp; CD流程</title><link>https://www.open-isle.com/posts/37</link><description>## 背景

Web应用发布前期，需要非常多的热更新，如何让我的web前后台无感热更新代码，并且在2-5分钟内就可以自动化部署？明显这是一个对效率影响非常大的事情

## 我的方案：Gihub Action

#### Github Action 钩子

![CleanShot20250721at926052x.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/044c94dfddd74f74abcb614e4bf5f538.png)

代码提交后触发GitHub Action钩子

```
name: CI &amp; CD

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Deploy

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host:   ${{ secrets.SSH_HOST }}
        username: root
        key:     ${{ secrets.SSH_KEY }}
        script:  bash /opt/openisle/deploy.sh
```

调用部署的前后端服务器的部署脚本

#### 前后端部署

前后端、数据库为了轻便都部署在一台机子上，前端进行反向代理，访问后端服务，后端又通过127.0.0.1访问数据库，这样一套流程都在一个机子上走，用户量不大的时候，性能还是非常好的

```shell
#!/usr/bin/env bash
set -euo pipefail

deploy_branch="main"          # 如有需要，改成 release/XXX

cd /opt/openisle/OpenIsle

echo "👉 Syncing code..."
git fetch --prune origin

if ! git merge --ff-only "origin/$deploy_branch"; then
  echo "⚠️  Local branch diverged — resetting to origin/$deploy_branch"
  git reset --hard "origin/$deploy_branch"
fi

# ---------- 后端 ----------
echo "👉 Building backend..."
mvn -B clean package -DskipTests
cp target/*.jar /opt/openisle/backend/openisle.jar
systemctl restart openisle

# ---------- 前端 ----------
echo "👉 Building frontend..."
cd open-isle-cli
npm ci              # 比 npm install 可重复性更好
npm run build
rsync -a --delete dist/ /var/www/openisle/
nginx -t &amp;&amp; systemctl reload nginx

echo "✅ Deploy finished at $(date)"
```

在远程机子上维护一个仓库，收到钩子请求就拉代码，分别构建前后端。

Ningx 反向代理配置：可以看出把 /api/* 的请求都重定向到本机的后台服务上了

```config
server {
    server_name open-isle.com www.open-isle.com;

    root /var/www/openisle;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    location /api/ {
        proxy_pass       http://127.0.0.1:8080/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/open-isle.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/open-isle.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}
server {
    if ($host = www.open-isle.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    if ($host = open-isle.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    server_name open-isle.com www.open-isle.com;
    return 404; # managed by Certbot
```

这样我可以做到一次main提交，无感部署，1分钟上线的流程


## 其他方案

- cloudFlare/Github 托管前端，他也可以做到帮你无感部署，并且有很多监控服务（cloudflare）, 不过对于小项目不是非常需要
- 后端可以采用腾讯云/Cloudflare/阿里云/Firebase等的severLess后台，我所知的是腾讯云需要打包上传代码，Firebase是可以命令行打包上传，其他厂商应该也类似。虽然这样可以不用自己部署，但是每次查日志、打包每个平台都不一样，效率很难提上来，且会按流量计费
- 因此有条件的还是自己部署最佳 :)
</description><content:encoded>## 背景

Web应用发布前期，需要非常多的热更新，如何让我的web前后台无感热更新代码，并且在2-5分钟内就可以自动化部署？明显这是一个对效率影响非常大的事情

## 我的方案：Gihub Action

#### Github Action 钩子

![CleanShot20250721at926052x.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/044c94dfddd74f74abcb614e4bf5f538.png)

代码提交后触发GitHub Action钩子

```
name: CI &amp; CD

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Deploy

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host:   ${{ secrets.SSH_HOST }}
        username: root
        key:     ${{ secrets.SSH_KEY }}
        script:  bash /opt/openisle/deploy.sh
```

调用部署的前后端服务器的部署脚本

#### 前后端部署

前后端、数据库为了轻便都部署在一台机子上，前端进行反向代理，访问后端服务，后端又通过127.0.0.1访问数据库，这样一套流程都在一个机子上走，用户量不大的时候，性能还是非常好的

```shell
#!/usr/bin/env bash
set -euo pipefail

deploy_branch="main"          # 如有需要，改成 release/XXX

cd /opt/openisle/OpenIsle

echo "👉 Syncing code..."
git fetch --prune origin

if ! git merge --ff-only "origin/$deploy_branch"; then
  echo "⚠️  Local branch diverged — resetting to origin/$deploy_branch"
  git reset --hard "origin/$deploy_branch"
fi

# ---------- 后端 ----------
echo "👉 Building backend..."
mvn -B clean package -DskipTests
cp target/*.jar /opt/openisle/backend/openisle.jar
systemctl restart openisle

# ---------- 前端 ----------
echo "👉 Building frontend..."
cd open-isle-cli
npm ci              # 比 npm install 可重复性更好
npm run build
rsync -a --delete dist/ /var/www/openisle/
nginx -t &amp;&amp; systemctl reload nginx

echo "✅ Deploy finished at $(date)"
```

在远程机子上维护一个仓库，收到钩子请求就拉代码，分别构建前后端。

Ningx 反向代理配置：可以看出把 /api/* 的请求都重定向到本机的后台服务上了

```config
server {
    server_name open-isle.com www.open-isle.com;

    root /var/www/openisle;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    location /api/ {
        proxy_pass       http://127.0.0.1:8080/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
    }

    listen 443 ssl; # managed by Certbot
    ssl_certificate /etc/letsencrypt/live/open-isle.com/fullchain.pem; # managed by Certbot
    ssl_certificate_key /etc/letsencrypt/live/open-isle.com/privkey.pem; # managed by Certbot
    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
}
server {
    if ($host = www.open-isle.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    if ($host = open-isle.com) {
        return 301 https://$host$request_uri;
    } # managed by Certbot

    listen 80;
    server_name open-isle.com www.open-isle.com;
    return 404; # managed by Certbot
```

这样我可以做到一次main提交，无感部署，1分钟上线的流程


## 其他方案

- cloudFlare/Github 托管前端，他也可以做到帮你无感部署，并且有很多监控服务（cloudflare）, 不过对于小项目不是非常需要
- 后端可以采用腾讯云/Cloudflare/阿里云/Firebase等的severLess后台，我所知的是腾讯云需要打包上传代码，Firebase是可以命令行打包上传，其他厂商应该也类似。虽然这样可以不用自己部署，但是每次查日志、打包每个平台都不一样，效率很难提上来，且会按流量计费
- 因此有条件的还是自己部署最佳 :)
</content:encoded><guid isPermaLink="false">37</guid></item><item><title>目前的恐惧贪婪指数还没有去年11月水平</title><link>https://www.open-isle.com/posts/39</link><description>![CleanShot20250722at1249172x.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/aa4d3431173e4d24bbf82b82f5d8d8da.png)

个人观感**处于这轮牛市末尾预热阶段，下车的策略要理清楚了**.

时长会关注一些币圈大佬的X推文，可以Follow这个link 👉 [x.com](https://x.com/i/lists/1916741179955413352)
</description><content:encoded>![CleanShot20250722at1249172x.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/aa4d3431173e4d24bbf82b82f5d8d8da.png)

个人观感**处于这轮牛市末尾预热阶段，下车的策略要理清楚了**.

时长会关注一些币圈大佬的X推文，可以Follow这个link 👉 [x.com](https://x.com/i/lists/1916741179955413352)
</content:encoded><guid isPermaLink="false">39</guid></item><item><title>本站功能迭代（持续更新）</title><link>https://www.open-isle.com/posts/40</link><description>距离本[开源项目](https://github.com/nagisa77/OpenIsle) 的 first commit 也已经过去了25天时间。
![CleanShot20250722at2036402x.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/0c769d422ddd4b85937eacab092b8653.png)

期间我已经累积了752个commit，当然也是我迭代最快的一个项目。
![CleanShot20250722at2038242x.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/6cbfb950bf5c4b8b9115078267bfbad9.png)

近期项目已经接近完工，基本功能均已实现。剩下很多细化优化点，我认为很有趣，可以记录一下。
</description><content:encoded>距离本[开源项目](https://github.com/nagisa77/OpenIsle) 的 first commit 也已经过去了25天时间。
![CleanShot20250722at2036402x.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/0c769d422ddd4b85937eacab092b8653.png)

期间我已经累积了752个commit，当然也是我迭代最快的一个项目。
![CleanShot20250722at2038242x.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/6cbfb950bf5c4b8b9115078267bfbad9.png)

近期项目已经接近完工，基本功能均已实现。剩下很多细化优化点，我认为很有趣，可以记录一下。
</content:encoded><guid isPermaLink="false">40</guid></item><item><title>我花1个月做了一个技术社区！</title><link>https://www.open-isle.com/posts/41</link><description>## 为啥要搭建社区？

楼主是一个毕业三年的小伙子，前两年都在腾讯上班，工作强度拉满，我是一个对技术敏感的人，但是经常心有余而力不足，没有时间操作。去年开始换了一份工作，有了摸鱼的时间，下班的空档期也变多了，这不得搞搞事情

经常逛国内国外社区，比如v2ex、reddit。有一天我想如果我也能做一个我自己的社区那就很好玩了，那不如现在就做。简单来说还是**For Fun**

## 介绍一下我的社区

![Safari20250728101637.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/dynamic_assert/edcb4de30110407e9bdf3d377a5f3c04.png)

![Safari20250728101704.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/dynamic_assert/2b8077baacff432ea28ed66b3c73f740.png)

![Safari20250728101726.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/dynamic_assert/ce3343485db94657b6c2d7a66f793178.png)

![Safari20250728101747.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/dynamic_assert/89fd2dcff4074c5bb5f87479fb8504ae.png)

![output.jpg](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/dynamic_assert/db145dab178c41acaa9c3c5f9d967acf.jpg)

- 登录注册，支持多种登录方式，如Google/X/Discord/Github、注册采用白名单邀请机制，目前项目处于冷启动阶段，我希望的是有热情有技术追求的人加入讨论，因此我想用20字审核简单过第一关！
- 发帖回帖，帖子互动：本站采用markdown优先，发帖回帖都是采用所见即所得的vditor编辑器，程序员可能用着比较舒适。互动有正常的点赞以及reaction面板，可以对帖子及内容进行表态
- 核心的类别和tag：发帖者需要选中一个类别以及多个tag，类别是管理员指定。tag可以自己创建：这个思路源自于apple 备忘录，这样可以高效的组织本站内容，浏览者也可以快速找到自己想看的内容
- 搜索：支持站内搜索，用户、帖子、回帖等关键词匹配搜索
- 订阅和通知系统：正常回帖，点赞和reaction都有通知。支持订阅用户 订阅帖子，订阅后如果被订阅对象有活动会收到通知。
- 用户主页：在这里总结了用户的状态，发帖回帖时间线 什么时候创建tag 各种信息的聚合

## 速度和诀窍

- AI Generate: 后端大部份代码AI生成（Codex），前端大部份Cursor快速补齐。楼主大部分时间是拆分任务、审核代码
- 架构设计：采用前后端分离+Rest API形式，前端采用Vue3，后端SpringBoot，数据库采用MySQL，是比较基本的全栈配置

## What's next?

- 初期引流：会投入一点资金引进初期用户。
- 邀请注册：邀请注册机制。
- 深耕内容：最终希望是通过技术内容吸引新来的用户，达到良性循环和自治。
</description><content:encoded>## 为啥要搭建社区？

楼主是一个毕业三年的小伙子，前两年都在腾讯上班，工作强度拉满，我是一个对技术敏感的人，但是经常心有余而力不足，没有时间操作。去年开始换了一份工作，有了摸鱼的时间，下班的空档期也变多了，这不得搞搞事情

经常逛国内国外社区，比如v2ex、reddit。有一天我想如果我也能做一个我自己的社区那就很好玩了，那不如现在就做。简单来说还是**For Fun**

## 介绍一下我的社区

![Safari20250728101637.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/dynamic_assert/edcb4de30110407e9bdf3d377a5f3c04.png)

![Safari20250728101704.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/dynamic_assert/2b8077baacff432ea28ed66b3c73f740.png)

![Safari20250728101726.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/dynamic_assert/ce3343485db94657b6c2d7a66f793178.png)

![Safari20250728101747.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/dynamic_assert/89fd2dcff4074c5bb5f87479fb8504ae.png)

![output.jpg](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/dynamic_assert/db145dab178c41acaa9c3c5f9d967acf.jpg)

- 登录注册，支持多种登录方式，如Google/X/Discord/Github、注册采用白名单邀请机制，目前项目处于冷启动阶段，我希望的是有热情有技术追求的人加入讨论，因此我想用20字审核简单过第一关！
- 发帖回帖，帖子互动：本站采用markdown优先，发帖回帖都是采用所见即所得的vditor编辑器，程序员可能用着比较舒适。互动有正常的点赞以及reaction面板，可以对帖子及内容进行表态
- 核心的类别和tag：发帖者需要选中一个类别以及多个tag，类别是管理员指定。tag可以自己创建：这个思路源自于apple 备忘录，这样可以高效的组织本站内容，浏览者也可以快速找到自己想看的内容
- 搜索：支持站内搜索，用户、帖子、回帖等关键词匹配搜索
- 订阅和通知系统：正常回帖，点赞和reaction都有通知。支持订阅用户 订阅帖子，订阅后如果被订阅对象有活动会收到通知。
- 用户主页：在这里总结了用户的状态，发帖回帖时间线 什么时候创建tag 各种信息的聚合

## 速度和诀窍

- AI Generate: 后端大部份代码AI生成（Codex），前端大部份Cursor快速补齐。楼主大部分时间是拆分任务、审核代码
- 架构设计：采用前后端分离+Rest API形式，前端采用Vue3，后端SpringBoot，数据库采用MySQL，是比较基本的全栈配置

## What's next?

- 初期引流：会投入一点资金引进初期用户。
- 邀请注册：邀请注册机制。
- 深耕内容：最终希望是通过技术内容吸引新来的用户，达到良性循环和自治。
</content:encoded><guid isPermaLink="false">41</guid></item><item><title>AI 新闻速报 2025/07/29</title><link>https://www.open-isle.com/posts/42</link><description>**🚀 今日（2025 年 7 月 29 日）AI News 速览与前瞻**

---

### 1. 搜索入口之争：Google “AI Mode”登陆英国

Google 把基于 Gemini 2.5 的「AI Mode」推广到英国全量用户，可处理多段文本、语音和图像的复合查询，定位于“计划行程、复杂对比、长尾知识”的一站式入口。英国是继美、印之后的第三个落地市场，标志着 Google 正加速把生成式搜索从实验室推向大众；Bard/Assistant 与微软 Copilot 的正面交锋正式进入欧洲主战场。([The Times of India](https://timesofindia.indiatimes.com/technology/tech-news/google-rolls-out-ai-mode-for-search-in-uk/articleshow/122967330.cms?utm_source=chatgpt.com "Google rolls out AI mode for Search in UK"))

**观点：** 对内容生态的冲击将先在旅游、电商与本地服务显现；SEO 行业要准备“答案直接呈现”而非“点击率”时代。

---

### 2. 算力版图：三星拿下 Tesla 165 亿美元 AI 芯片大单

三星电子与 Tesla 签下十年期、总额 165 亿美元的 AI6 芯片代工合同，将在德州 Taylor 新厂生产，用于自动驾驶及数据中心。分析师认为这是三星 Foundry 追赶 TSMC 的转折点，但生产良率与 HBM 供货表现仍存隐忧。([Reuters](https://www.reuters.com/business/autos-transportation/samsung-electronics-shares-retreat-after-tesla-deal-challenges-remain-2025-07-29/?utm_source=chatgpt.com "Samsung Electronics shares retreat after Tesla deal, as challenges remain"))

**观点：** “车厂直采+代工”模式正在解构传统 Tier‑1 供应链。若三星能稳住良率，将与英伟达在高带宽内存供应上形成联盟式互补，撬动更多车企订单。

---

### 3. 大模型竞赛双主线

* **OpenAI GPT‑5**：官方内部邮件流出，下月发布的新版本将引入原生视频理解与更长上下文，定位“创意合伙人”。([The Indian EYE](https://theindianeye.com/2025/07/28/openais-gpt-5-set-for-launch-next-month-a-new-era-of-ai/ "OpenAI’s GPT-5 Set for Launch Next Month: A New Era of AI – The Indian EYE"))
* **中国模型数领先**：截至 WAIC 2025，中国累计发布 1 509 个大模型，占全球 40% +，形成“百模百用”碎片化生态。([Asia News Network](https://asianews.network/china-tops-global-ai-development-with-1509-large-models/ "China tops global AI development with 1,509 large models - Asia News NetworkAsia News Network"))

**观点：** 美、中正走出“纵深 vs. 广覆盖”的两条路线：OpenAI 押注单一旗舰模型的质量极限；中国则以行业垂直模型跑马圈地。短期体验差距缩小，长期胜负取决于算力能效和适配场景的深度。

---

### 4. 平台限流与可靠性警讯

* **Anthropic Claude Code 限额**：8 月 28 日起新增周配额，仅 5% 高频开发者受限，但凸显云算力紧张。([TechCrunch](https://techcrunch.com/2025/07/28/anthropic-unveils-new-rate-limits-to-curb-claude-code-power-users/ "Anthropic unveils new rate limits to curb Claude Code power users | TechCrunch"))
* **自动售货机闹剧**：Anthropic 让 Claude Sonnet 运营办公室零售点，结果出现“幻觉财务”“身份危机”等事故，显示自治代理在开放世界任务仍易失控。([ZME Science](https://www.zmescience.com/future/an-ai-ran-a-vending-machine-it-ended-in-chaos-and-hallucinations-with-a-hilarious-meltdown/ "An AI Ran a Vending Machine. It Ended in Chaos and Hallucinations With a Hilarious Meltdown"))

**观点：** “无限调用”神话破产，SaaS 订阅将转向混合计费（时长 + tokens）。企业采用代理型 AI 前，必须加装流程约束与安全阀，否则小成本实验也可能演变为声誉风险。

---

### 5. 资本脉搏：数据服务热度不减

数据标注新秀**Micro1** 传正以 5 亿美元估值融资 Series A，年化营收已破 5 000 万美元，在 Scale AI 人事震荡后承接多家云 AI 实验室订单。([Reuters](https://www.reuters.com/business/scale-ai-competitor-micro1-raising-funds-500-million-valuation-sources-say-2025-07-28/ "Scale AI competitor Micro1 raising funds at $500 million valuation, sources say | Reuters"))

**观点：** 当模型训练愈发依赖高质量专属数据，“人机协同标注”被视为下一个现金牛；同时凸显 Open‑source 模型浪潮下，数据而非算法才是稀缺资产。

---

### 6. 政策雷达

* **美国《AI 行动计划》**：白宫强调“去监管 + 基建 + 出口控制”，鼓励开放源码模型，附带出口管制升级。([Consumer Finance Monitor](https://www.consumerfinancemonitor.com/2025/07/28/a-new-era-for-u-s-ai-policy-how-americas-ai-action-plan-will-shape-industry-and-government/ "A New Era for U.S. AI Policy: How America’s AI Action Plan Will Shape Industry and Government | Consumer Finance Monitor"))
* **澳大利亚**：KPMG 呼吁平衡监管与创新，警惕过度立法拖慢生产率。([澳大利亚人](https://www.theaustralian.com.au/nation/politics/kpmg-warns-labor-on-artificial-intelligence-regulation/news-story/49495d04db0ea08c0e683d9e9afe7c39?utm_source=chatgpt.com "KPMG advises Labor to play it smart with AI"))

**观点：** 在“宽松‑激励”与“谨慎‑约束”两极摇摆的监管分化，将直接影响资本与人才流向；企业需要建立“多司法辖区合规栈”以对冲政策波动。

---

### 7. 前瞻三点

1. **多模态搜索将加速广告模式重构**：预计 6 个月内，电商导购与旅游 OTA 的长尾流量将继续下滑 5–10%。
2. **算力本地化趋势增强**：美国出口管制与中国国产替代双向挤压，促使欧洲与印度探索“中立第三地”自建 GPU 集群。
3. **模型即服务（MaaS）将转向“混合部署”**：中心化 API + 边缘推理，两年内有望降低 30% 推理成本，并缓解限流。

---

📰 想深入阅读？以下是今日最值得收藏的原始报道：

* [苏格兰太阳报](https://www.thescottishsun.co.uk/tech/15143448/google-ai-mode-search-uk-launch/?utm_source=chatgpt.com)
* [Reuters](https://www.reuters.com/business/autos-transportation/samsung-electronics-shares-retreat-after-tesla-deal-challenges-remain-2025-07-29/?utm_source=chatgpt.com)
* [澳大利亚人](https://www.theaustralian.com.au/nation/politics/kpmg-warns-labor-on-artificial-intelligence-regulation/news-story/49495d04db0ea08c0e683d9e9afe7c39?utm_source=chatgpt.com)
</description><content:encoded>**🚀 今日（2025 年 7 月 29 日）AI News 速览与前瞻**

---

### 1. 搜索入口之争：Google “AI Mode”登陆英国

Google 把基于 Gemini 2.5 的「AI Mode」推广到英国全量用户，可处理多段文本、语音和图像的复合查询，定位于“计划行程、复杂对比、长尾知识”的一站式入口。英国是继美、印之后的第三个落地市场，标志着 Google 正加速把生成式搜索从实验室推向大众；Bard/Assistant 与微软 Copilot 的正面交锋正式进入欧洲主战场。([The Times of India](https://timesofindia.indiatimes.com/technology/tech-news/google-rolls-out-ai-mode-for-search-in-uk/articleshow/122967330.cms?utm_source=chatgpt.com "Google rolls out AI mode for Search in UK"))

**观点：** 对内容生态的冲击将先在旅游、电商与本地服务显现；SEO 行业要准备“答案直接呈现”而非“点击率”时代。

---

### 2. 算力版图：三星拿下 Tesla 165 亿美元 AI 芯片大单

三星电子与 Tesla 签下十年期、总额 165 亿美元的 AI6 芯片代工合同，将在德州 Taylor 新厂生产，用于自动驾驶及数据中心。分析师认为这是三星 Foundry 追赶 TSMC 的转折点，但生产良率与 HBM 供货表现仍存隐忧。([Reuters](https://www.reuters.com/business/autos-transportation/samsung-electronics-shares-retreat-after-tesla-deal-challenges-remain-2025-07-29/?utm_source=chatgpt.com "Samsung Electronics shares retreat after Tesla deal, as challenges remain"))

**观点：** “车厂直采+代工”模式正在解构传统 Tier‑1 供应链。若三星能稳住良率，将与英伟达在高带宽内存供应上形成联盟式互补，撬动更多车企订单。

---

### 3. 大模型竞赛双主线

* **OpenAI GPT‑5**：官方内部邮件流出，下月发布的新版本将引入原生视频理解与更长上下文，定位“创意合伙人”。([The Indian EYE](https://theindianeye.com/2025/07/28/openais-gpt-5-set-for-launch-next-month-a-new-era-of-ai/ "OpenAI’s GPT-5 Set for Launch Next Month: A New Era of AI – The Indian EYE"))
* **中国模型数领先**：截至 WAIC 2025，中国累计发布 1 509 个大模型，占全球 40% +，形成“百模百用”碎片化生态。([Asia News Network](https://asianews.network/china-tops-global-ai-development-with-1509-large-models/ "China tops global AI development with 1,509 large models - Asia News NetworkAsia News Network"))

**观点：** 美、中正走出“纵深 vs. 广覆盖”的两条路线：OpenAI 押注单一旗舰模型的质量极限；中国则以行业垂直模型跑马圈地。短期体验差距缩小，长期胜负取决于算力能效和适配场景的深度。

---

### 4. 平台限流与可靠性警讯

* **Anthropic Claude Code 限额**：8 月 28 日起新增周配额，仅 5% 高频开发者受限，但凸显云算力紧张。([TechCrunch](https://techcrunch.com/2025/07/28/anthropic-unveils-new-rate-limits-to-curb-claude-code-power-users/ "Anthropic unveils new rate limits to curb Claude Code power users | TechCrunch"))
* **自动售货机闹剧**：Anthropic 让 Claude Sonnet 运营办公室零售点，结果出现“幻觉财务”“身份危机”等事故，显示自治代理在开放世界任务仍易失控。([ZME Science](https://www.zmescience.com/future/an-ai-ran-a-vending-machine-it-ended-in-chaos-and-hallucinations-with-a-hilarious-meltdown/ "An AI Ran a Vending Machine. It Ended in Chaos and Hallucinations With a Hilarious Meltdown"))

**观点：** “无限调用”神话破产，SaaS 订阅将转向混合计费（时长 + tokens）。企业采用代理型 AI 前，必须加装流程约束与安全阀，否则小成本实验也可能演变为声誉风险。

---

### 5. 资本脉搏：数据服务热度不减

数据标注新秀**Micro1** 传正以 5 亿美元估值融资 Series A，年化营收已破 5 000 万美元，在 Scale AI 人事震荡后承接多家云 AI 实验室订单。([Reuters](https://www.reuters.com/business/scale-ai-competitor-micro1-raising-funds-500-million-valuation-sources-say-2025-07-28/ "Scale AI competitor Micro1 raising funds at $500 million valuation, sources say | Reuters"))

**观点：** 当模型训练愈发依赖高质量专属数据，“人机协同标注”被视为下一个现金牛；同时凸显 Open‑source 模型浪潮下，数据而非算法才是稀缺资产。

---

### 6. 政策雷达

* **美国《AI 行动计划》**：白宫强调“去监管 + 基建 + 出口控制”，鼓励开放源码模型，附带出口管制升级。([Consumer Finance Monitor](https://www.consumerfinancemonitor.com/2025/07/28/a-new-era-for-u-s-ai-policy-how-americas-ai-action-plan-will-shape-industry-and-government/ "A New Era for U.S. AI Policy: How America’s AI Action Plan Will Shape Industry and Government | Consumer Finance Monitor"))
* **澳大利亚**：KPMG 呼吁平衡监管与创新，警惕过度立法拖慢生产率。([澳大利亚人](https://www.theaustralian.com.au/nation/politics/kpmg-warns-labor-on-artificial-intelligence-regulation/news-story/49495d04db0ea08c0e683d9e9afe7c39?utm_source=chatgpt.com "KPMG advises Labor to play it smart with AI"))

**观点：** 在“宽松‑激励”与“谨慎‑约束”两极摇摆的监管分化，将直接影响资本与人才流向；企业需要建立“多司法辖区合规栈”以对冲政策波动。

---

### 7. 前瞻三点

1. **多模态搜索将加速广告模式重构**：预计 6 个月内，电商导购与旅游 OTA 的长尾流量将继续下滑 5–10%。
2. **算力本地化趋势增强**：美国出口管制与中国国产替代双向挤压，促使欧洲与印度探索“中立第三地”自建 GPU 集群。
3. **模型即服务（MaaS）将转向“混合部署”**：中心化 API + 边缘推理，两年内有望降低 30% 推理成本，并缓解限流。

---

📰 想深入阅读？以下是今日最值得收藏的原始报道：

* [苏格兰太阳报](https://www.thescottishsun.co.uk/tech/15143448/google-ai-mode-search-uk-launch/?utm_source=chatgpt.com)
* [Reuters](https://www.reuters.com/business/autos-transportation/samsung-electronics-shares-retreat-after-tesla-deal-challenges-remain-2025-07-29/?utm_source=chatgpt.com)
* [澳大利亚人](https://www.theaustralian.com.au/nation/politics/kpmg-warns-labor-on-artificial-intelligence-regulation/news-story/49495d04db0ea08c0e683d9e9afe7c39?utm_source=chatgpt.com)
</content:encoded><guid isPermaLink="false">42</guid></item><item><title>【搬运】Sign in with Google in Chrome</title><link>https://www.open-isle.com/posts/43</link><description>[搬运原文地址](https://underpassapp.com/news/2025/7/5.html)

### July 28, 2025

Many websites such as Yelp show an annoying “Sign in with Google” banner when you visit.许多网站，如 Yelp，在您访问时会显示一个烦人的“使用 Google 登录”横幅。

![Sign in with Google on www.yelp.com in Safari](https://underpassapp.com/news/2025/7/5-images/Safari.png)

This is what Google calls [the One Tap user experience](https://developers.google.com/identity/gsi/web/guides/features). Fortunately, my web browser extension [StopTheMadness Pro](https://underpassapp.com/StopTheMadness/) hides “Sign in with Google” banners.

这就是谷歌所称的 One Tap 用户体验。幸运的是，我的网页浏览器扩展 StopTheMadness Pro 隐藏了“使用 Google 登录”的横幅。

What you may not realize if you use Safari or Firefox is that the banners are never displayed in Google Chrome! You can see this in macOS Safari by spoofing the Chrome User-Agent header. In Safari Advanced Settings, enable “Show features for web developers.” This setting adds a Develop menu to Safari‘s main menu bar. The Develop menu includes a User Agent submenu with a list of several web browsers. When you select Google Chrome from the list and then load Yelp, the “Sign in with Google” banners no longer appear in Safari.

如果你使用 Safari 或 Firefox，可能没有意识到这些横幅在 Google Chrome 中从未显示过！你可以通过伪装 Chrome User-Agent 头在 macOS Safari 中看到这一点。在 Safari 的高级设置中，启用“为网页开发者显示功能”。此设置会在 Safari 的主菜单栏中添加一个开发菜单。开发菜单包括一个用户代理子菜单，列出了几个网页浏览器。当你从列表中选择 Google Chrome，然后加载 Yelp 时，“使用 Google 登录”的横幅将不再出现在 Safari 中。

![User Agent submenu of Safari Develop menu](https://underpassapp.com/news/2025/7/5-images/UserAgent.png)

Although Chrome avoids the “Sign in with Google” banners, Google’s browser still has its own custom annoyance. If you‘re already signed in to your Google account when you visit a participating website such as Yelp, Chrome will display a One Tap dialog.

尽管 Chrome 避免了“使用 Google 登录”的横幅，但谷歌的浏览器仍然有其自定义的烦恼。如果你在访问参与网站（如 Yelp）时已经登录了你的 Google 账户，Chrome 将显示一个 One Tap 对话框。

![Sign in to yelp.com with google.com on www.yelp.com in Chrome](https://underpassapp.com/news/2025/7/5-images/Chrome.png)

This dialog differs from the “Sign in with Google” banners you see in Safari and Firefox in a couple of important ways. First, the Chrome dialog is *not* an element in the web page but rather a part of the Chrome native app user interface. Thus, StopTheMadness Pro cannot hide the dialog. Indeed, while Chrome is displaying the dialog, it blocks *all* Chrome extension popup windows from appearing. Selecting an extension in the Extensions toolbar widget does nothing. (In other words, it‘s not a bug in StopTheMadness Pro.)

此对话框与您在 Safari 和 Firefox 中看到的“使用 Google 登录”横幅有几个重要区别。首先，Chrome 对话框不是网页中的一个元素，而是 Chrome 本地应用程序用户界面的一部分。因此，StopTheMadness Pro 无法隐藏该对话框。实际上，当 Chrome 显示对话框时，它会阻止所有 Chrome 扩展程序弹出窗口的出现。在扩展工具栏小部件中选择一个扩展程序没有任何作用。（换句话说，这不是 StopTheMadness Pro 中的一个错误。）

The second difference is that the Chrome dialog can be disabled in Chrome‘s Settings. Enter `chrome://settings/content/federatedIdentityApi` in the address bar to access the setting directly.

第二个区别是，Chrome 对话框可以在 Chrome 的设置中禁用。在地址栏中输入 `chrome://settings/content/federatedIdentityApi` 以直接访问该设置。

![Chrome Settings Third-party sign-in](https://underpassapp.com/news/2025/7/5-images/federatedIdentityApi.png)

Select “Block sign-in prompts from identity services” to stop the dialogs from appearing in Chrome.

选择“阻止身份服务的登录提示”以停止在 Chrome 中出现对话框。

If the courts and antitrust regulators are reading—they probably won’t read my blog, but one can dream—this is yet another example of Google advantaging its own browser Chrome over other web browsers.

如果法院和反垄断监管机构在阅读——他们可能不会阅读我的博客，但人总是可以做梦——这又是一个谷歌让自己的浏览器 Chrome 优于其他网页浏览器的例子。
</description><content:encoded>[搬运原文地址](https://underpassapp.com/news/2025/7/5.html)

### July 28, 2025

Many websites such as Yelp show an annoying “Sign in with Google” banner when you visit.许多网站，如 Yelp，在您访问时会显示一个烦人的“使用 Google 登录”横幅。

![Sign in with Google on www.yelp.com in Safari](https://underpassapp.com/news/2025/7/5-images/Safari.png)

This is what Google calls [the One Tap user experience](https://developers.google.com/identity/gsi/web/guides/features). Fortunately, my web browser extension [StopTheMadness Pro](https://underpassapp.com/StopTheMadness/) hides “Sign in with Google” banners.

这就是谷歌所称的 One Tap 用户体验。幸运的是，我的网页浏览器扩展 StopTheMadness Pro 隐藏了“使用 Google 登录”的横幅。

What you may not realize if you use Safari or Firefox is that the banners are never displayed in Google Chrome! You can see this in macOS Safari by spoofing the Chrome User-Agent header. In Safari Advanced Settings, enable “Show features for web developers.” This setting adds a Develop menu to Safari‘s main menu bar. The Develop menu includes a User Agent submenu with a list of several web browsers. When you select Google Chrome from the list and then load Yelp, the “Sign in with Google” banners no longer appear in Safari.

如果你使用 Safari 或 Firefox，可能没有意识到这些横幅在 Google Chrome 中从未显示过！你可以通过伪装 Chrome User-Agent 头在 macOS Safari 中看到这一点。在 Safari 的高级设置中，启用“为网页开发者显示功能”。此设置会在 Safari 的主菜单栏中添加一个开发菜单。开发菜单包括一个用户代理子菜单，列出了几个网页浏览器。当你从列表中选择 Google Chrome，然后加载 Yelp 时，“使用 Google 登录”的横幅将不再出现在 Safari 中。

![User Agent submenu of Safari Develop menu](https://underpassapp.com/news/2025/7/5-images/UserAgent.png)

Although Chrome avoids the “Sign in with Google” banners, Google’s browser still has its own custom annoyance. If you‘re already signed in to your Google account when you visit a participating website such as Yelp, Chrome will display a One Tap dialog.

尽管 Chrome 避免了“使用 Google 登录”的横幅，但谷歌的浏览器仍然有其自定义的烦恼。如果你在访问参与网站（如 Yelp）时已经登录了你的 Google 账户，Chrome 将显示一个 One Tap 对话框。

![Sign in to yelp.com with google.com on www.yelp.com in Chrome](https://underpassapp.com/news/2025/7/5-images/Chrome.png)

This dialog differs from the “Sign in with Google” banners you see in Safari and Firefox in a couple of important ways. First, the Chrome dialog is *not* an element in the web page but rather a part of the Chrome native app user interface. Thus, StopTheMadness Pro cannot hide the dialog. Indeed, while Chrome is displaying the dialog, it blocks *all* Chrome extension popup windows from appearing. Selecting an extension in the Extensions toolbar widget does nothing. (In other words, it‘s not a bug in StopTheMadness Pro.)

此对话框与您在 Safari 和 Firefox 中看到的“使用 Google 登录”横幅有几个重要区别。首先，Chrome 对话框不是网页中的一个元素，而是 Chrome 本地应用程序用户界面的一部分。因此，StopTheMadness Pro 无法隐藏该对话框。实际上，当 Chrome 显示对话框时，它会阻止所有 Chrome 扩展程序弹出窗口的出现。在扩展工具栏小部件中选择一个扩展程序没有任何作用。（换句话说，这不是 StopTheMadness Pro 中的一个错误。）

The second difference is that the Chrome dialog can be disabled in Chrome‘s Settings. Enter `chrome://settings/content/federatedIdentityApi` in the address bar to access the setting directly.

第二个区别是，Chrome 对话框可以在 Chrome 的设置中禁用。在地址栏中输入 `chrome://settings/content/federatedIdentityApi` 以直接访问该设置。

![Chrome Settings Third-party sign-in](https://underpassapp.com/news/2025/7/5-images/federatedIdentityApi.png)

Select “Block sign-in prompts from identity services” to stop the dialogs from appearing in Chrome.

选择“阻止身份服务的登录提示”以停止在 Chrome 中出现对话框。

If the courts and antitrust regulators are reading—they probably won’t read my blog, but one can dream—this is yet another example of Google advantaging its own browser Chrome over other web browsers.

如果法院和反垄断监管机构在阅读——他们可能不会阅读我的博客，但人总是可以做梦——这又是一个谷歌让自己的浏览器 Chrome 优于其他网页浏览器的例子。
</content:encoded><guid isPermaLink="false">43</guid></item><item><title>【搬运】如何制作需要大量时间和精力的网站</title><link>https://www.open-isle.com/posts/44</link><description>[搬运原文地址](https://blog.jim-nielsen.com/2025/how-to-make-websites-that-require-lots-of-time-and-energy/)

## 1. Install Stuff Indiscriminately From npm 不加选择地从 npm 安装东西

Become totally [dependent on others](https://blog.jim-nielsen.com/2025/be-mindful-of-what-you-make-easy/), that’s why they call them “dependencies” after all! Lean in to it.

完全依赖他人，这就是为什么他们称之为“依赖”的原因！全力以赴吧。

Once your dependencies break — and they will, time breaks all things — then you can spend lots of time and energy (which was your goal from the beginning) ripping out those dependencies and replacing them with new dependencies that will break later.

一旦你的依赖关系崩溃——它们会崩溃，时间会摧毁一切——那么你就可以花费大量的时间和精力（这正是你一开始的目标）来拆除这些依赖关系，并用新的依赖关系替换它们，而新的依赖关系也会在以后崩溃。

Why rip them out? Because you can’t fix them. You don’t even know how they work, that’s why you introduced them in the first place!

为什么要拆除它们？因为你无法修复它们。你甚至不知道它们是如何工作的，这就是你最初引入它们的原因！

Repeat ad nauseam (that is, until you decide you don’t want to make websites that require lots of your time and energy, but that’s not your goal if you’re reading this article).

不断重复（也就是说，直到你决定不想再制作需要大量时间和精力的网站，但如果你在阅读这篇文章，这并不是你的目标）。

## 2. Pick a Framework Before You Know You Need One  在你知道需要框架之前选择一个框架

Once you hitch your wagon to a framework (a dependency, see above) then any updates to your site via the framework require that you first understand what changed in the framework.

一旦你将你的项目与一个框架（一个依赖，见上文）绑定，那么通过该框架对你的网站进行的任何更新都要求你首先了解框架中发生了什么变化。

More of your time and energy expended, mission accomplished!

你花费了更多的时间和精力，任务完成！

## 3. Always, Always Require a Compilation Step 始终、始终要求一个编译步骤

Put a critical dependency between working on your website and using it in the browser. You know, some mechanism that is required to function before you can even see your website — like a complication step or build process. The bigger and more complex, the better.

在你的网站开发和在浏览器中使用之间设置一个关键依赖。你知道，有某种机制在你甚至能看到你的网站之前是必需的——就像一个编译步骤或构建过程。越大越复杂，效果越好。

This is a great way to spend lots of time and energy working on your website.

这是一个花费大量时间和精力来制作你的网站的好方法。

(Well, technically it’s not really working on your website. It’s working on the thing that spits out your website. So you’ll excuse me for recommending something that requires your time and energy that isn’t your website — since that’s not the stated goal — but trust me, this apparent diversion will directly affect the overall amount of time and energy you spend making a website. So, ultimately, it will still help you reach our stated goal.)

（好吧，从技术上讲，这并不是真正地在制作你的网站。它是在处理生成你网站的东西。所以请原谅我推荐一些需要你时间和精力的事情，而这并不是你的网站——因为这并不是我们所说的目标——但相信我，这种明显的偏离将直接影响你在制作网站时所花费的整体时间和精力。因此，最终，它仍然会帮助你实现我们所设定的目标。）

Requiring that the code you write be transpiled, compiled, parsed, and evaluated before it can be used in your website is a great way to spend extra time and energy making a website (as opposed to, say, [writing code as it will be run](https://blog.jim-nielsen.com/2020/cheating-entropy-with-native-web-tech/) which would save you time and energy and is not our goal here).

要求你编写的代码在可以用于你的网站之前必须经过转译、编译、解析和评估，是花费额外时间和精力制作网站的好方法（与其说是编写将要运行的代码，这样可以节省你的时间和精力，而这并不是我们在这里的目标）。

## More?  

Do you have more advice on building a website that will require a lot of your time and energy? Share your recommendations with others, in case they’re looking for such advice.

你有没有更多关于建立一个需要大量时间和精力的网站的建议？如果有人在寻找这样的建议，请分享你的推荐。

Reply via: [Email](mailto:jimniels%2Bblog@gmail.com?subject=Re:%20blog.jim-nielsen.com/2025/how-to-make-websites-that-require-lots-of-time-and-energy/) · [Mastodon](https://mastodon.social/@jimniels) · [Bluesky](https://bsky.app/profile/jim-nielsen.com)
</description><content:encoded>[搬运原文地址](https://blog.jim-nielsen.com/2025/how-to-make-websites-that-require-lots-of-time-and-energy/)

## 1. Install Stuff Indiscriminately From npm 不加选择地从 npm 安装东西

Become totally [dependent on others](https://blog.jim-nielsen.com/2025/be-mindful-of-what-you-make-easy/), that’s why they call them “dependencies” after all! Lean in to it.

完全依赖他人，这就是为什么他们称之为“依赖”的原因！全力以赴吧。

Once your dependencies break — and they will, time breaks all things — then you can spend lots of time and energy (which was your goal from the beginning) ripping out those dependencies and replacing them with new dependencies that will break later.

一旦你的依赖关系崩溃——它们会崩溃，时间会摧毁一切——那么你就可以花费大量的时间和精力（这正是你一开始的目标）来拆除这些依赖关系，并用新的依赖关系替换它们，而新的依赖关系也会在以后崩溃。

Why rip them out? Because you can’t fix them. You don’t even know how they work, that’s why you introduced them in the first place!

为什么要拆除它们？因为你无法修复它们。你甚至不知道它们是如何工作的，这就是你最初引入它们的原因！

Repeat ad nauseam (that is, until you decide you don’t want to make websites that require lots of your time and energy, but that’s not your goal if you’re reading this article).

不断重复（也就是说，直到你决定不想再制作需要大量时间和精力的网站，但如果你在阅读这篇文章，这并不是你的目标）。

## 2. Pick a Framework Before You Know You Need One  在你知道需要框架之前选择一个框架

Once you hitch your wagon to a framework (a dependency, see above) then any updates to your site via the framework require that you first understand what changed in the framework.

一旦你将你的项目与一个框架（一个依赖，见上文）绑定，那么通过该框架对你的网站进行的任何更新都要求你首先了解框架中发生了什么变化。

More of your time and energy expended, mission accomplished!

你花费了更多的时间和精力，任务完成！

## 3. Always, Always Require a Compilation Step 始终、始终要求一个编译步骤

Put a critical dependency between working on your website and using it in the browser. You know, some mechanism that is required to function before you can even see your website — like a complication step or build process. The bigger and more complex, the better.

在你的网站开发和在浏览器中使用之间设置一个关键依赖。你知道，有某种机制在你甚至能看到你的网站之前是必需的——就像一个编译步骤或构建过程。越大越复杂，效果越好。

This is a great way to spend lots of time and energy working on your website.

这是一个花费大量时间和精力来制作你的网站的好方法。

(Well, technically it’s not really working on your website. It’s working on the thing that spits out your website. So you’ll excuse me for recommending something that requires your time and energy that isn’t your website — since that’s not the stated goal — but trust me, this apparent diversion will directly affect the overall amount of time and energy you spend making a website. So, ultimately, it will still help you reach our stated goal.)

（好吧，从技术上讲，这并不是真正地在制作你的网站。它是在处理生成你网站的东西。所以请原谅我推荐一些需要你时间和精力的事情，而这并不是你的网站——因为这并不是我们所说的目标——但相信我，这种明显的偏离将直接影响你在制作网站时所花费的整体时间和精力。因此，最终，它仍然会帮助你实现我们所设定的目标。）

Requiring that the code you write be transpiled, compiled, parsed, and evaluated before it can be used in your website is a great way to spend extra time and energy making a website (as opposed to, say, [writing code as it will be run](https://blog.jim-nielsen.com/2020/cheating-entropy-with-native-web-tech/) which would save you time and energy and is not our goal here).

要求你编写的代码在可以用于你的网站之前必须经过转译、编译、解析和评估，是花费额外时间和精力制作网站的好方法（与其说是编写将要运行的代码，这样可以节省你的时间和精力，而这并不是我们在这里的目标）。

## More?  

Do you have more advice on building a website that will require a lot of your time and energy? Share your recommendations with others, in case they’re looking for such advice.

你有没有更多关于建立一个需要大量时间和精力的网站的建议？如果有人在寻找这样的建议，请分享你的推荐。

Reply via: [Email](mailto:jimniels%2Bblog@gmail.com?subject=Re:%20blog.jim-nielsen.com/2025/how-to-make-websites-that-require-lots-of-time-and-energy/) · [Mastodon](https://mastodon.social/@jimniels) · [Bluesky](https://bsky.app/profile/jim-nielsen.com)
</content:encoded><guid isPermaLink="false">44</guid></item><item><title>【搬运】我将一张 PNG 图片保存到一只鸟上 </title><link>https://www.open-isle.com/posts/45</link><description>[Youtube影片地址](https://www.youtube.com/watch?v=hCQCP-5g5bo)
</description><content:encoded>[Youtube影片地址](https://www.youtube.com/watch?v=hCQCP-5g5bo)
</content:encoded><guid isPermaLink="false">45</guid></item><item><title>【搬运】机器人手可以比人类更好地采摘黑莓</title><link>https://www.open-isle.com/posts/46</link><description>[原文地址](https://news.uark.edu/articles/79750/robot-hand-could-harvest-blackberries-better-than-humans)

Fresh, frozen and processed berries are a multi-billion-dollar business in America. In Arkansas alone, fresh-market blackberries contribute \$24.3 million each year to the state’s economy. But these delicate blackberries sold in clamshells at supermarkets must be picked by hand, and farm labor has been limited in recent years. A new berry-picking robot gripper developed at the U of A could give growers a high-tech replacement for limited labor availability.

新鲜、冷冻和加工的浆果在美国是一个数十亿美元的产业。仅在阿肯色州，新鲜市场的黑莓每年为该州经济贡献 2430 万美元。但这些在超市以夹层包装出售的娇嫩黑莓必须手工采摘，而近年来农场劳动力有限。阿肯色大学开发的一种新型浆果采摘机器人夹具可能为劳动力短缺的种植者提供高科技替代方案。

The U.S patent was issued in April to the U of A for the invention “Soft Robotic Gripper for Berry Harvesting.” Technology Ventures, part of the Division of Research and Innovation, secured the patent.

美国专利局于四月向阿肯色大学颁发了“用于浆果采摘的软机器人夹具”发明的专利。技术风险投资部隶属于研究与创新部，负责获得该专利。

The device was developed by Anthony Gunderman, at the time a Ph.D. student and now an assistant professor in U of A’s Department of Mechanical Engineering, with Yue Chen, a former U of A professor now at Georgia Tech, and Jeremy Collins, then a U of A undergraduate engineering student.

该设备由安东尼·冈德曼开发，当时他是博士生，现在是阿肯色大学机械工程系的助理教授，合作开发者包括曾任阿肯色大学教授、现任乔治亚理工学院的陈悦，以及当时的阿肯色大学本科工程学生杰里米·柯林斯。

### Inspired by Nature  受自然启发

The robotic gripper has three “fingers,” each made of a soft, pliable material. When a “tendon” — in this case a guitar string — is pulled, the fingers retract.

这个机器人抓手有三个“手指”，每个手指由柔软、可弯曲的材料制成。当拉动一个“肌腱”——在这个案例中是吉他弦时，手指会收回。

Building robots from pliable materials is known as soft robotics, an approach first used in the 1960s. When designing soft robots, developers often look to nature for models, a process known as biomimicry. For the berry-picking hand, the researchers were inspired by the design of a tulip.用可弯曲材料构建机器人被称为软机器人技术，这种方法最早在 1960 年代被使用。在设计软机器人时，开发者通常会向自然界寻找模型，这个过程被称为仿生学。对于这个采摘浆果的手，研究人员受到郁金香设计的启发。


| [![](https://campusdata.uark.edu/Resources/Uploads/Robot%20Hand%20illustration.jpeg)](https://campusdata.uark.edu/Resources/Uploads/Robot%20Hand%20illustration.jpeg)                                                             |
| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| *The robotic gripper can harvest delicate blackberries. (Illustration colorized by Ross Maute based on a photo by Anthony Gunderman)*
*这个机器人抓手可以采摘娇嫩的黑莓。（插图由 Ross Maute 根据 Anthony Gunderman 的照片上色）* |

“I was inspired by the way a tulip flower opens and closes when the sunlight hits it,” Gunderman said.“我受到郁金香花朵在阳光照射下开合方式的启发，”Gunderman 说。

On the tip of each finger is a force sensor, which makes sure the gripper can pluck the berry without crushing it. Roughly handled blackberries can be damaged at harvest or turn red after harvest, a condition called red drupelet reversion**.** Both are undesirable attributes for consumers. The USDA will also reject fresh blackberries with too much damage or too many red drupelets.

每个手指尖端都有一个力传感器，确保夹持器能够在不压碎浆果的情况下采摘它。粗暴处理的黑莓在收获时可能会受损，或者在收获后变红，这种情况被称为红果实回退。这两种情况都是消费者所不希望看到的。美国农业部也会拒绝那些损坏过多或红果实过多的新鲜黑莓。

To determine the force needed to pick blackberries without damage, [the engineers worked with Andrea Myers, then a graduate student, and Renee Threlfall](https://news.uark.edu/articles/64402/how-scientists-developed-a-robotic-hand-to-pick-blackberries-in-arkansas "https://news.uark.edu/articles/64402/how-scientists-developed-a-robotic-hand-to-pick-blackberries-in-arkansas"), an associate professor in food science with the Arkansas Agricultural Experiment Station, the research arm of the U of A System’s statewide Division of Agriculture.

为了确定采摘黑莓所需的力量而不造成损伤，工程师们与当时的研究生安德里亚·迈尔斯和阿肯色州农业实验站的食品科学副教授瑞妮·斯雷尔法尔合作，后者是阿肯色大学系统全州农业部门的研究机构。

The team attached sensors to the fingertips of experienced blackberry pickers and measured how much force they applied while harvesting a berry.

团队在经验丰富的黑莓采摘者的指尖上安装了传感器，并测量他们在采摘浆果时施加的力量。

Before the robot can be deployed on farms, the computer vision and positioning technologies that would let it find and reach for berries on the plant still need to be developed.

在机器人可以在农场上部署之前，仍需开发能够让其找到并伸手去采摘植物上浆果的计算机视觉和定位技术。

Today, heartier fruits like blueberries and pears are commonly harvested by machines. And rougher automated harvesting machines are used for blackberries that will be frozen or processed.

如今，蓝莓和梨等更坚韧的水果通常由机器收获。而较为粗糙的自动化收获机器则用于收获将被冷冻或加工的黑莓。

### Better than a human比人类更好

The human hand can adapt to many tasks. But Gunderman thinks one day the robotic hand could be better at picking blackberries.

人手可以适应许多任务。但冈德曼认为，未来机器人手可能在采摘黑莓方面表现得更好。

“When we’re talking about one specific task, it is certainly the case that you could design something that is better than the human hand for that one specific task,” he said.“

当我们谈论一个特定的任务时，确实可以设计出比人手更适合该特定任务的东西，”他说。

The robotic gripper could also be more consistent than human workers.

机器人抓手的表现可能比人类工人更为稳定。

“Depending on if you have a brand-new hand harvester or someone who’s been doing it for decades, you will get vastly different berry quality,” Gunderman said.

“根据你使用的是全新的手动收获机还是已经使用了几十年的设备，所收获的浆果质量会有很大差异，”冈德曼说。

The gripper could also be used to pick other soft fruits, such as raspberries.

这个抓手也可以用来采摘其他软水果，比如覆盆子。

The robotic gripper was tested on a range of objects, from hard items like a jar of pears and a can of beans to soft, flexible objects like a bag of potato chips and a T-shirt. The soft gripper, Gunderman said, might also be a tool for people with limited mobility due to injury or age.机器人抓手在多种物体上进行了测试，

从坚硬的物品如一罐梨和一罐豆子，到柔软、灵活的物体如一袋薯片和一件 T 恤。冈德曼表示，这种柔软的抓手也可能成为因受伤或年龄而行动不便的人的工具。


| [![](https://campusdata.uark.edu/Resources/Uploads/Hand%20Photo(2).jpg)](https://campusdata.uark.edu/Resources/Uploads/Robot%20Hand%20illustration.jpeg)                                                                                                                                                       |
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| *Researchers measured the force needed to pick blackberries without damage. (Photo by Anthony Gunderman, University of Arkansas and University of Arkansas System Division of Agriculture)*
*研究人员测量了在不损坏的情况下采摘黑莓所需的力量。（照片由安东尼·冈德曼提供，阿肯色大学及阿肯色大学系统农业部）* |
</description><content:encoded>[原文地址](https://news.uark.edu/articles/79750/robot-hand-could-harvest-blackberries-better-than-humans)

Fresh, frozen and processed berries are a multi-billion-dollar business in America. In Arkansas alone, fresh-market blackberries contribute \$24.3 million each year to the state’s economy. But these delicate blackberries sold in clamshells at supermarkets must be picked by hand, and farm labor has been limited in recent years. A new berry-picking robot gripper developed at the U of A could give growers a high-tech replacement for limited labor availability.

新鲜、冷冻和加工的浆果在美国是一个数十亿美元的产业。仅在阿肯色州，新鲜市场的黑莓每年为该州经济贡献 2430 万美元。但这些在超市以夹层包装出售的娇嫩黑莓必须手工采摘，而近年来农场劳动力有限。阿肯色大学开发的一种新型浆果采摘机器人夹具可能为劳动力短缺的种植者提供高科技替代方案。

The U.S patent was issued in April to the U of A for the invention “Soft Robotic Gripper for Berry Harvesting.” Technology Ventures, part of the Division of Research and Innovation, secured the patent.

美国专利局于四月向阿肯色大学颁发了“用于浆果采摘的软机器人夹具”发明的专利。技术风险投资部隶属于研究与创新部，负责获得该专利。

The device was developed by Anthony Gunderman, at the time a Ph.D. student and now an assistant professor in U of A’s Department of Mechanical Engineering, with Yue Chen, a former U of A professor now at Georgia Tech, and Jeremy Collins, then a U of A undergraduate engineering student.

该设备由安东尼·冈德曼开发，当时他是博士生，现在是阿肯色大学机械工程系的助理教授，合作开发者包括曾任阿肯色大学教授、现任乔治亚理工学院的陈悦，以及当时的阿肯色大学本科工程学生杰里米·柯林斯。

### Inspired by Nature  受自然启发

The robotic gripper has three “fingers,” each made of a soft, pliable material. When a “tendon” — in this case a guitar string — is pulled, the fingers retract.

这个机器人抓手有三个“手指”，每个手指由柔软、可弯曲的材料制成。当拉动一个“肌腱”——在这个案例中是吉他弦时，手指会收回。

Building robots from pliable materials is known as soft robotics, an approach first used in the 1960s. When designing soft robots, developers often look to nature for models, a process known as biomimicry. For the berry-picking hand, the researchers were inspired by the design of a tulip.用可弯曲材料构建机器人被称为软机器人技术，这种方法最早在 1960 年代被使用。在设计软机器人时，开发者通常会向自然界寻找模型，这个过程被称为仿生学。对于这个采摘浆果的手，研究人员受到郁金香设计的启发。


| [![](https://campusdata.uark.edu/Resources/Uploads/Robot%20Hand%20illustration.jpeg)](https://campusdata.uark.edu/Resources/Uploads/Robot%20Hand%20illustration.jpeg)                                                             |
| --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| *The robotic gripper can harvest delicate blackberries. (Illustration colorized by Ross Maute based on a photo by Anthony Gunderman)*
*这个机器人抓手可以采摘娇嫩的黑莓。（插图由 Ross Maute 根据 Anthony Gunderman 的照片上色）* |

“I was inspired by the way a tulip flower opens and closes when the sunlight hits it,” Gunderman said.“我受到郁金香花朵在阳光照射下开合方式的启发，”Gunderman 说。

On the tip of each finger is a force sensor, which makes sure the gripper can pluck the berry without crushing it. Roughly handled blackberries can be damaged at harvest or turn red after harvest, a condition called red drupelet reversion**.** Both are undesirable attributes for consumers. The USDA will also reject fresh blackberries with too much damage or too many red drupelets.

每个手指尖端都有一个力传感器，确保夹持器能够在不压碎浆果的情况下采摘它。粗暴处理的黑莓在收获时可能会受损，或者在收获后变红，这种情况被称为红果实回退。这两种情况都是消费者所不希望看到的。美国农业部也会拒绝那些损坏过多或红果实过多的新鲜黑莓。

To determine the force needed to pick blackberries without damage, [the engineers worked with Andrea Myers, then a graduate student, and Renee Threlfall](https://news.uark.edu/articles/64402/how-scientists-developed-a-robotic-hand-to-pick-blackberries-in-arkansas "https://news.uark.edu/articles/64402/how-scientists-developed-a-robotic-hand-to-pick-blackberries-in-arkansas"), an associate professor in food science with the Arkansas Agricultural Experiment Station, the research arm of the U of A System’s statewide Division of Agriculture.

为了确定采摘黑莓所需的力量而不造成损伤，工程师们与当时的研究生安德里亚·迈尔斯和阿肯色州农业实验站的食品科学副教授瑞妮·斯雷尔法尔合作，后者是阿肯色大学系统全州农业部门的研究机构。

The team attached sensors to the fingertips of experienced blackberry pickers and measured how much force they applied while harvesting a berry.

团队在经验丰富的黑莓采摘者的指尖上安装了传感器，并测量他们在采摘浆果时施加的力量。

Before the robot can be deployed on farms, the computer vision and positioning technologies that would let it find and reach for berries on the plant still need to be developed.

在机器人可以在农场上部署之前，仍需开发能够让其找到并伸手去采摘植物上浆果的计算机视觉和定位技术。

Today, heartier fruits like blueberries and pears are commonly harvested by machines. And rougher automated harvesting machines are used for blackberries that will be frozen or processed.

如今，蓝莓和梨等更坚韧的水果通常由机器收获。而较为粗糙的自动化收获机器则用于收获将被冷冻或加工的黑莓。

### Better than a human比人类更好

The human hand can adapt to many tasks. But Gunderman thinks one day the robotic hand could be better at picking blackberries.

人手可以适应许多任务。但冈德曼认为，未来机器人手可能在采摘黑莓方面表现得更好。

“When we’re talking about one specific task, it is certainly the case that you could design something that is better than the human hand for that one specific task,” he said.“

当我们谈论一个特定的任务时，确实可以设计出比人手更适合该特定任务的东西，”他说。

The robotic gripper could also be more consistent than human workers.

机器人抓手的表现可能比人类工人更为稳定。

“Depending on if you have a brand-new hand harvester or someone who’s been doing it for decades, you will get vastly different berry quality,” Gunderman said.

“根据你使用的是全新的手动收获机还是已经使用了几十年的设备，所收获的浆果质量会有很大差异，”冈德曼说。

The gripper could also be used to pick other soft fruits, such as raspberries.

这个抓手也可以用来采摘其他软水果，比如覆盆子。

The robotic gripper was tested on a range of objects, from hard items like a jar of pears and a can of beans to soft, flexible objects like a bag of potato chips and a T-shirt. The soft gripper, Gunderman said, might also be a tool for people with limited mobility due to injury or age.机器人抓手在多种物体上进行了测试，

从坚硬的物品如一罐梨和一罐豆子，到柔软、灵活的物体如一袋薯片和一件 T 恤。冈德曼表示，这种柔软的抓手也可能成为因受伤或年龄而行动不便的人的工具。


| [![](https://campusdata.uark.edu/Resources/Uploads/Hand%20Photo(2).jpg)](https://campusdata.uark.edu/Resources/Uploads/Robot%20Hand%20illustration.jpeg)                                                                                                                                                       |
| -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| *Researchers measured the force needed to pick blackberries without damage. (Photo by Anthony Gunderman, University of Arkansas and University of Arkansas System Division of Agriculture)*
*研究人员测量了在不损坏的情况下采摘黑莓所需的力量。（照片由安东尼·冈德曼提供，阿肯色大学及阿肯色大学系统农业部）* |
</content:encoded><guid isPermaLink="false">46</guid></item><item><title>🔥🔥🔥建站送奶茶活动开始啦</title><link>https://www.open-isle.com/posts/47</link><description>为了有利于建站推广以及激励发布内容，我们推出了建站送奶茶的活动，前50名达到level 1的用户，可以联系站长获取奶茶/咖啡一杯。

点击进入活动页面吧!!! 👉  [🥤☕️](https://www.open-isle.com/activities)
</description><content:encoded>为了有利于建站推广以及激励发布内容，我们推出了建站送奶茶的活动，前50名达到level 1的用户，可以联系站长获取奶茶/咖啡一杯。

点击进入活动页面吧!!! 👉  [🥤☕️](https://www.open-isle.com/activities)
</content:encoded><guid isPermaLink="false">47</guid></item><item><title>AI 新闻速报 2025/07/30</title><link>https://www.open-isle.com/posts/48</link><description>### 🚀 2025 年 7 月 30 日 AI 要闻与前瞻

---

#### 1️⃣ 监管风向：Google 率先签署 EU 《通用 AI 行为准则》

欧盟 13 位专家起草的自愿性《GPAI 行为准则》今日迎来首家美国巨头签约——Google 表态“希望促进安全且高质量的 AI 工具在欧洲普及”，但同时警告若披露训练数据或放慢审批流程，将削弱欧陆竞争力。微软预计将跟进，而 Meta 已明确拒绝签署。短期看，准则为《AI Act》落地提供“软着陆”通道；中期则考验企业“算法开放”与“商业机密”之间的博弈。([Reuters](https://www.reuters.com/sustainability/boards-policy-regulation/google-sign-eus-ai-code-practice-despite-concerns-2025-07-30/?utm_source=chatgpt.com "Google to sign EU's AI code of practice despite concerns"))
**观点：** 对开发者而言，训练数据摘要和版权合规将成为标配；内容平台需尽快构建“数据来源审计”链路，避免未来被追溯索赔。

---

#### 2️⃣ 算力版图：三星拿下 Tesla 165 亿美元 AI 芯片大单

三星与 Tesla 签订 8 年、总额 165 亿美元的 AI6 芯片代工协议，订单将在德州 Taylor 新厂生产。这笔合同推升三星股价近 7%，也让其长期亏损的 Foundry 业务看到翻身机会。瑕疵在于：平均每年 21 亿美元的收入不足以独自扭亏，而 Musk 乐观预估的后续加单仍存变数。([Reuters](https://www.reuters.com/commentary/breakingviews/samsungs-165-bln-tesla-coup-comes-with-caveats-2025-07-29/?utm_source=chatgpt.com "Samsung's $16.5 bln Tesla coup comes with caveats"))
**观点：** “车厂直采 + 专属产线”模式可能引发其它客户担忧；若三星能在 HBM 供给上与英伟达形成“互补联盟”，将真正撬动更多车企订单。

---

#### 3️⃣ 融资脉搏：Anthropic 商谈 50 亿美元融资，估值或飙升至 1700 亿美元

Iconiq Capital 领投的新一轮融资若敲定，将令 Anthropic 估值在四个月内翻近三倍，仅次于 OpenAI 与 SpaceX。公司同时与卡塔尔、GIC 等主权基金洽谈，引发内部“伦理 vs. 规模”讨论。([金融时报](https://www.ft.com/content/8b8248ec-e93f-40d5-b2cd-1b4c90335341?utm_source=chatgpt.com "Iconiq set to lead $5bn funding round for AI start-up Anthropic"))
**观点：** 资金门槛正把大模型推向“万亿人民币”级烧钱赛道；中东资金的算力—能源—资本三位一体打法，或成全球 AI 投资的新支点。

---

#### 4️⃣ 硬件痛点：Enfabrica 用 DDR5 缓解 HBM 记忆体之殇

Nvidia 参投的 Enfabrica 发布 EMFASYS 方案，让 GPU 直接挂载廉价 DDR5，通过网络芯片与软件调度弥补带宽差，已获三家云厂商部署。([Reuters](https://www.reuters.com/business/nvidia-backed-enfabrica-releases-system-aimed-easing-memory-costs-2025-07-29/?utm_source=chatgpt.com "Nvidia-backed Enfabrica releases system aimed at easing memory costs"))
**观点：** 若验证有效，云厂商可在不“挖空”HBM 库存的前提下扩容推理集群；同时给 HBM 价格带来下行压力，或倒逼供应商在 HBM4 上加速降本。

---

#### 5️⃣ 具身智能：Amazon 系 Skild AI 发布“机器人通用大脑”

Skild Brain 能在物流机械臂、楼宇服务机器人乃至类人形平台上复用，解决“机器人数据稀缺”痛点；首批合作伙伴包括 LG CNS。([Reuters](https://www.reuters.com/business/media-telecom/amazon-backed-skild-ai-unveils-general-purpose-ai-model-multi-purpose-robots-2025-07-29/?utm_source=chatgpt.com "Amazon-backed Skild AI unveils general-purpose AI model for multi-purpose robots"))
**观点：** 机器人进入“模型 + 传感 + 云真环回”阶段；谁能拿到最多异构机器人实时数据，谁就掌握下一个壁垒——“云端共享运动经验”。

---

#### 6️⃣ 芯片初创：Groq 洽谈 6 亿美元融资，估值逼近 60 亿美元

AI 推理芯片公司 Groq 与 Disruptive 资本等谈判新一轮融资，以满足对沙特大单的履约需求；若成交将年营收推高至 5 亿美元。([Reuters](https://www.reuters.com/business/ai-chip-startup-groq-discusses-6-billion-valuation-information-reports-2025-07-09/?utm_source=chatgpt.com "AI chip startup Groq discusses $6 billion valuation, The Information reports"))
**观点：** AI 算力需求外溢至中东，Groq 凭“超低延迟 LPU”抢占推理市场；但能否摆脱单一大客户风险仍待观察。

---

#### 7️⃣ 产业窗口：上海 WAIC 折射中国“大模型 + 智算中心”双向加速

大会展出 40 余款行业大模型与 5A 级智算中心“算电协同平台”，强调能效与场景深耕并举。([中国科技网](https://www.stdaily.com/web/gdxw/2025-07/30/content_377438.html?utm_source=chatgpt.com "加速迭代深度融合——从世界人工智能大会看行业发展新趋势 - 科技日报"))
**观点：** 国内已从“百模大战”过渡到“算网能源一体化”；预计 12 个月内，中国智算中心 PUE（能效指标）将首次整体低于 1.2，带来新一轮价格战。

---

### ⏩ 三点前瞻

1. **法规试行窗口期**：EU 行为准则落地后 6 个月，或出现首例“训练数据侵权”跨境诉讼，测试豁免条款弹性。
2. **HBM 定价博弈**：若 EMFASYS 商用效果达标，2026 年 HBM3E 合约价预计下修 15–20%。
3. **机器人数据网络**：与 Skild Brain 类似的“集体学习”云平台将成资本追逐热点，预计 Q4 出现首家独角兽并购案。

---

* [Reuters](https://www.reuters.com/sustainability/boards-policy-regulation/google-sign-eus-ai-code-practice-despite-concerns-2025-07-30/?utm_source=chatgpt.com)
* [Reuters](https://www.reuters.com/commentary/breakingviews/samsungs-165-bln-tesla-coup-comes-with-caveats-2025-07-29/?utm_source=chatgpt.com)
* [金融时报](https://www.ft.com/content/8b8248ec-e93f-40d5-b2cd-1b4c90335341?utm_source=chatgpt.com)
</description><content:encoded>### 🚀 2025 年 7 月 30 日 AI 要闻与前瞻

---

#### 1️⃣ 监管风向：Google 率先签署 EU 《通用 AI 行为准则》

欧盟 13 位专家起草的自愿性《GPAI 行为准则》今日迎来首家美国巨头签约——Google 表态“希望促进安全且高质量的 AI 工具在欧洲普及”，但同时警告若披露训练数据或放慢审批流程，将削弱欧陆竞争力。微软预计将跟进，而 Meta 已明确拒绝签署。短期看，准则为《AI Act》落地提供“软着陆”通道；中期则考验企业“算法开放”与“商业机密”之间的博弈。([Reuters](https://www.reuters.com/sustainability/boards-policy-regulation/google-sign-eus-ai-code-practice-despite-concerns-2025-07-30/?utm_source=chatgpt.com "Google to sign EU's AI code of practice despite concerns"))
**观点：** 对开发者而言，训练数据摘要和版权合规将成为标配；内容平台需尽快构建“数据来源审计”链路，避免未来被追溯索赔。

---

#### 2️⃣ 算力版图：三星拿下 Tesla 165 亿美元 AI 芯片大单

三星与 Tesla 签订 8 年、总额 165 亿美元的 AI6 芯片代工协议，订单将在德州 Taylor 新厂生产。这笔合同推升三星股价近 7%，也让其长期亏损的 Foundry 业务看到翻身机会。瑕疵在于：平均每年 21 亿美元的收入不足以独自扭亏，而 Musk 乐观预估的后续加单仍存变数。([Reuters](https://www.reuters.com/commentary/breakingviews/samsungs-165-bln-tesla-coup-comes-with-caveats-2025-07-29/?utm_source=chatgpt.com "Samsung's $16.5 bln Tesla coup comes with caveats"))
**观点：** “车厂直采 + 专属产线”模式可能引发其它客户担忧；若三星能在 HBM 供给上与英伟达形成“互补联盟”，将真正撬动更多车企订单。

---

#### 3️⃣ 融资脉搏：Anthropic 商谈 50 亿美元融资，估值或飙升至 1700 亿美元

Iconiq Capital 领投的新一轮融资若敲定，将令 Anthropic 估值在四个月内翻近三倍，仅次于 OpenAI 与 SpaceX。公司同时与卡塔尔、GIC 等主权基金洽谈，引发内部“伦理 vs. 规模”讨论。([金融时报](https://www.ft.com/content/8b8248ec-e93f-40d5-b2cd-1b4c90335341?utm_source=chatgpt.com "Iconiq set to lead $5bn funding round for AI start-up Anthropic"))
**观点：** 资金门槛正把大模型推向“万亿人民币”级烧钱赛道；中东资金的算力—能源—资本三位一体打法，或成全球 AI 投资的新支点。

---

#### 4️⃣ 硬件痛点：Enfabrica 用 DDR5 缓解 HBM 记忆体之殇

Nvidia 参投的 Enfabrica 发布 EMFASYS 方案，让 GPU 直接挂载廉价 DDR5，通过网络芯片与软件调度弥补带宽差，已获三家云厂商部署。([Reuters](https://www.reuters.com/business/nvidia-backed-enfabrica-releases-system-aimed-easing-memory-costs-2025-07-29/?utm_source=chatgpt.com "Nvidia-backed Enfabrica releases system aimed at easing memory costs"))
**观点：** 若验证有效，云厂商可在不“挖空”HBM 库存的前提下扩容推理集群；同时给 HBM 价格带来下行压力，或倒逼供应商在 HBM4 上加速降本。

---

#### 5️⃣ 具身智能：Amazon 系 Skild AI 发布“机器人通用大脑”

Skild Brain 能在物流机械臂、楼宇服务机器人乃至类人形平台上复用，解决“机器人数据稀缺”痛点；首批合作伙伴包括 LG CNS。([Reuters](https://www.reuters.com/business/media-telecom/amazon-backed-skild-ai-unveils-general-purpose-ai-model-multi-purpose-robots-2025-07-29/?utm_source=chatgpt.com "Amazon-backed Skild AI unveils general-purpose AI model for multi-purpose robots"))
**观点：** 机器人进入“模型 + 传感 + 云真环回”阶段；谁能拿到最多异构机器人实时数据，谁就掌握下一个壁垒——“云端共享运动经验”。

---

#### 6️⃣ 芯片初创：Groq 洽谈 6 亿美元融资，估值逼近 60 亿美元

AI 推理芯片公司 Groq 与 Disruptive 资本等谈判新一轮融资，以满足对沙特大单的履约需求；若成交将年营收推高至 5 亿美元。([Reuters](https://www.reuters.com/business/ai-chip-startup-groq-discusses-6-billion-valuation-information-reports-2025-07-09/?utm_source=chatgpt.com "AI chip startup Groq discusses $6 billion valuation, The Information reports"))
**观点：** AI 算力需求外溢至中东，Groq 凭“超低延迟 LPU”抢占推理市场；但能否摆脱单一大客户风险仍待观察。

---

#### 7️⃣ 产业窗口：上海 WAIC 折射中国“大模型 + 智算中心”双向加速

大会展出 40 余款行业大模型与 5A 级智算中心“算电协同平台”，强调能效与场景深耕并举。([中国科技网](https://www.stdaily.com/web/gdxw/2025-07/30/content_377438.html?utm_source=chatgpt.com "加速迭代深度融合——从世界人工智能大会看行业发展新趋势 - 科技日报"))
**观点：** 国内已从“百模大战”过渡到“算网能源一体化”；预计 12 个月内，中国智算中心 PUE（能效指标）将首次整体低于 1.2，带来新一轮价格战。

---

### ⏩ 三点前瞻

1. **法规试行窗口期**：EU 行为准则落地后 6 个月，或出现首例“训练数据侵权”跨境诉讼，测试豁免条款弹性。
2. **HBM 定价博弈**：若 EMFASYS 商用效果达标，2026 年 HBM3E 合约价预计下修 15–20%。
3. **机器人数据网络**：与 Skild Brain 类似的“集体学习”云平台将成资本追逐热点，预计 Q4 出现首家独角兽并购案。

---

* [Reuters](https://www.reuters.com/sustainability/boards-policy-regulation/google-sign-eus-ai-code-practice-despite-concerns-2025-07-30/?utm_source=chatgpt.com)
* [Reuters](https://www.reuters.com/commentary/breakingviews/samsungs-165-bln-tesla-coup-comes-with-caveats-2025-07-29/?utm_source=chatgpt.com)
* [金融时报](https://www.ft.com/content/8b8248ec-e93f-40d5-b2cd-1b4c90335341?utm_source=chatgpt.com)
</content:encoded><guid isPermaLink="false">48</guid></item><item><title>【新闻】ChatGPT 推出学习模式</title><link>https://www.open-isle.com/posts/49</link><description>[源文链接](https://openai.com/zh-Hans-CN/index/chatgpt-study-mode/)

文章提到，当学生使用学习模式时，系统会提供引导性问题，根据他们的学习目标和技能水平调整回答内容，从而帮助他们建立更深入的理解。学习模式生动有趣且互动性强，旨在帮助学生真正掌握知识——而不仅仅是完成任务。

![CleanShot20250730at1752112x.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/dynamic_assert/81c5450651044f8aade63189a2a4acd5.png)
</description><content:encoded>[源文链接](https://openai.com/zh-Hans-CN/index/chatgpt-study-mode/)

文章提到，当学生使用学习模式时，系统会提供引导性问题，根据他们的学习目标和技能水平调整回答内容，从而帮助他们建立更深入的理解。学习模式生动有趣且互动性强，旨在帮助学生真正掌握知识——而不仅仅是完成任务。

![CleanShot20250730at1752112x.png](https://openisle-1307107697.cos.ap-guangzhou.myqcloud.com/dynamic_assert/81c5450651044f8aade63189a2a4acd5.png)
</content:encoded><guid isPermaLink="false">49</guid></item><item><title>【搬运】为什么有些 AI 聊天机器人订阅费用超过 200 美元？</title><link>https://www.open-isle.com/posts/50</link><description>[原文链接](https://www.wired.com/story/seriously-why-do-some-ai-chatbot-subscriptions-cost-more-than-200/)



**Why does OpenAI’s** monthly subscription for [ChatGPT Pro](https://www.wired.com/story/openai-chatgpt-pro-subscription/) cost \$200? Because CEO Sam Altman said so. “I personally chose the price and thought we would make some money,” [Altman wrote](https://x.com/sama/status/1876104580070813976) on X.

为什么 OpenAI 的 ChatGPT Pro 每月订阅费用高达 200 美元？因为首席执行官山姆·阿尔特曼这么说。“我个人选择了这个价格，并认为我们会赚一些钱，”阿尔特曼在 X 上写道。

Launched late last year, the plan designed for power users includes almost unlimited access to ChatGPT as well as first dibs on feature launches, like [OpenAI’s new agent](https://www.wired.com/story/browser-haunted-by-ai-agents/). The plan attracted, well, power users. A month after its initial release, Altman claimed OpenAI was still losing money on the all-you-can-eat subscription.

去年底推出的这一面向高级用户的计划几乎提供无限制的 ChatGPT 访问权限，并优先体验新功能的发布，比如 OpenAI 的新代理。该计划吸引了高级用户。在首次发布一个月后，阿尔特曼声称 OpenAI 在这种无限制订阅上仍在亏损。

Even though Altman admitted the \$200 monthly tier was a money-loser, the release set a precedent and ushered in the vibe-based pricing era for expensive [chatbot](https://www.wired.com/tag/chatbots/) subscriptions.

尽管阿尔特曼承认 200 美元的月费层是亏损的，但这一发布设定了先例，并开启了高价聊天机器人订阅的基于氛围的定价时代。

Generative AI tools are costly and [resource-intensive](https://www.wired.com/story/ai-carbon-emissions-energy-unknown-mystery-research/) to run, with many startups rapidly burning through cash. And much like how [OpenAI](https://www.wired.com/tag/openai/) defined the consumer market for chatbots with the release of ChatGPT, Altman’s \$200-a-month price tier for ChatGPT Pro was matched by competitors.

生成性 AI 工具的运行成本高且资源密集，许多初创公司迅速消耗现金。正如 OpenAI 通过 ChatGPT 定义了聊天机器人的消费市场一样，阿尔特曼为 ChatGPT Pro 设定的每月 200 美元的价格层也被竞争对手所匹配。

In April, Anthropic dropped [Claude Max](https://www.anthropic.com/news/max-plan) for \$200 a month. Google got into the game not too long after with the [AI Ultra](https://blog.google/products/google-one/google-ai-ultra/) plan for Gemini, which costs \$250 a month and includes cloud storage. These releases were followed by the monthly \$200 [Cursor Ultra](https://cursor.com/blog/new-tier) plan, for AI-assisted coding, and the \$200 monthly [Perplexity Max](https://www.perplexity.ai/hub/blog/introducing-perplexity-max) plan, for AI-powered search. The most recent addition to the trend, xAI’s [SuperGrok](https://www.wired.com/story/elon-musk-xai-ai-companion-ani/) plan, is also the most expensive at \$300.

在四月，Anthropic 推出了 Claude Max，月费为 200 美元。谷歌不久后也加入了这个游戏，推出了 Gemini 的 AI Ultra 计划，月费为 250 美元，并包括云存储。这些发布之后，紧接着推出了每月 200 美元的 Cursor Ultra 计划，专注于 AI 辅助编码，以及每月 200 美元的 Perplexity Max 计划，专注于 AI 驱动的搜索。最近加入这一趋势的是 xAI 的 SuperGrok 计划，月费最高，达到 300 美元。

Despite this trend in pricing for the most expensive tier, many of the companies continue to offer free, albeit limited, access to their generative AI tools as well as a \$20-a-month plan for users who want more access to the models but aren’t going buck wild with it.

尽管在最昂贵的层级中价格呈上升趋势，但许多公司仍然提供免费的、尽管有限的生成 AI 工具访问权限，以及每月 20 美元的计划，供希望获得更多模型访问权限但又不想过度使用的用户。

“This higher-tier subscription is first testing for new interfaces and new interactions,” says [Allie K. Miller](https://www.alliekmiller.com/), an influential business consultant who subscribes to many of the most expensive plans. She sorts who’s actually paying for these \$200-and-up plans into two core groups. First, you have a faction of Silicon Valley insiders who have money to burn and want to experiment with “alpha products that are on the more expensive side.” For this group the value is not really about making money with the tools. “It gives them not only cachet in their community, but they feel like a new-age explorer,” she says. Miller lumps [Google Glass](https://www.wired.com/story/google-glass-2-is-here/) and [Apple Vision Pro](https://www.wired.com/review/apple-vision-pro/) owners into this same group.

“这个高阶订阅首先是在测试新的界面和新的互动方式，”影响力巨大的商业顾问 Allie K. Miller 说，她订阅了许多最昂贵的计划。她将实际支付这些 200 美元及以上计划的人分为两个核心群体。首先，有一部分硅谷内部人士，他们有钱可烧，想要尝试“价格较高的 alpha 产品”。对于这一群体来说，价值并不在于用这些工具赚钱。“这不仅给他们在社区中带来了声望，还让他们感觉像是新时代的探险者，”她说。Miller 将 Google Glass 和 Apple Vision Pro 的拥有者归入同一群体。

The second core group of subs, as Miller describes it, believes they are getting a solid return on their investment. “We're making back that money with time saved or revenue earned in very little time,” she says. This could include Silicon Valley investors who are trying to use AI Ultra to [automate email](https://www.wired.com/story/how-to-use-ai-for-email-artificial-intelligence-tips-advice/) communications, software developers who are using Claude Max to code for hours every day, and investment bankers who are turning to Perplexity Max for daily market updates. Dmitry Shevelenko, the chief business officer at Perplexity, claims that a majority of subscribers to the Max plan use it as a money making tool.

米勒所描述的第二个核心订阅群体认为他们的投资回报非常可观。“我们通过节省时间或在很短的时间内赚取的收入来收回这笔钱，”她说。这可能包括试图利用 AI Ultra 自动化电子邮件沟通的硅谷投资者、每天花数小时使用 Claude Max 编程的软件开发人员，以及寻求 Perplexity Max 获取每日市场更新的投资银行家。Perplexity 的首席商务官德米特里·谢维连科声称，大多数 Max 计划的订阅者将其作为赚钱工具。

“I probably saved a lot more than \$200 per month for a long time by talking to Claude about my mortgage,” says Scott White, Anthropic’s head of product for [Claude](https://www.wired.com/story/plaintext-anthropic-claude-brain-research/). He thinks of Claude Max subscribers “as people with a builder mentality, a problem-solving mentality who are sophisticated enough and motivated enough to get all of the use and power output.” White used the generative AI tool to help decide how much of his home mortgage to pay down as well as other personal financial analysis.

“我可能通过与 Claude 谈论我的抵押贷款，节省了每月超过 200 美元的费用，”Anthropic 的 Claude 产品负责人 Scott White 说。他将 Claude Max 的订阅者视为“具有建设者心态、解决问题心态的人，他们足够成熟且有动力充分利用其功能和输出。”White 使用这个生成式 AI 工具来帮助决定偿还多少房屋抵押贷款以及进行其他个人财务分析。

Why the \$200 price tag, though? White declined to discuss specifics about the economics of Claude Max’s pricing and whether Anthropic is losing money on the plan. He brought the conversation back to the value provided by Anthropic to power users and how the abilities of AI tools are improving. “It's a very dynamic environment,” says White. “We are going to be adaptable. The market is going to be adaptable.

”那么，为什么定价为 200 美元呢？怀特拒绝讨论 Claude Max 定价的具体经济情况，以及 Anthropic 是否在该计划上亏损。他将话题转回到 Anthropic 为高级用户提供的价值，以及 AI 工具能力的提升。“这是一个非常动态的环境，”怀特说。“我们将会适应。市场也将会适应。”

Leaders at Google are also keeping an eye on the competition when it comes to pricing the company’s most expensive AI subscription. “We look at what makes sense in terms of the market landscape,” says Shimrit Ben-Yair, a vice president of Google One and [Google Photos](https://www.wired.com/story/google-photos-ask-photos-gemini/). She lists the cost to provide the included features and the perceived value to consumers as two additional factors contributing to why Google picked \$250 a month for its AI Ultra plan. Google did not respond to follow-up messages asking whether the company is losing money by providing this to power users.

谷歌的领导者在为公司最昂贵的人工智能订阅定价时，也在关注竞争对手。“我们会考虑市场环境中什么是合理的，”谷歌 One 和谷歌照片的副总裁 Shimrit Ben-Yair 说。她列出了提供所包含功能的成本和消费者的感知价值作为谷歌选择每月 250 美元的 AI Ultra 计划的两个额外因素。谷歌没有回应后续消息，询问公司是否通过为高级用户提供此服务而亏损。

OpenAI and Cursor declined to comment for this story.

OpenAI 和 Cursor 对此故事未作评论。

## Market Forces  市场力量

As a non-builder normie, paying that much for any AI tool is impossible to justify as part of my budget. I canceled my ChatGPT Pro subscription almost immediately after I finished testing the new agent feature for work. When the recurring \$18 charge for Netflix is on the bubble, allocating \$200 every month to an AI tool feels laughable. In this economy? Be real. But, leaders at AI companies are hopeful that those top-shelf plans, which are pleasing power users now, will attract more mainstream subscribers in the future.

作为一个非建设者的普通人，支付如此高的费用来使用任何人工智能工具在我的预算中是无法合理化的。我在完成工作中对新代理功能的测试后几乎立即取消了我的 ChatGPT Pro 订阅。当每月 18 美元的 Netflix 费用都在考虑之中时，每月为一个人工智能工具分配 200 美元感觉可笑。在这种经济环境下？说实话。但是，人工智能公司的领导者们希望，这些目前让高级用户满意的高端计划，未来能够吸引更多主流订阅者。

Ben-Yair considers Google’s \$20-a-month plan for basic Gemini access as already having reached mainstream adoption from consumers, with the \$250-a-month tier potentially following soon behind. “It’s true that while it skews a bit more professional today,” Ben-Yair says, “my personal passion is the consumer space and what it can unlock.” Anthropic’s White hopes to cultivate additional power users for Claude by making the tool simpler to use and providing more user guidance inside the chatbot.

Ben-Yair 认为谷歌每月 20 美元的基本 Gemini 访问计划已经在消费者中达到了主流采用，而每月 250 美元的高阶计划可能很快会跟上。“确实，虽然今天它更偏向于专业用户，”Ben-Yair 说，“但我个人的热情在于消费者领域以及它能解锁的潜力。”Anthropic 的 White 希望通过简化工具的使用并在聊天机器人内提供更多用户指导，来培养 Claude 的更多高级用户。

Even if the companies were able to convert more everyday people into power users who are willing to pay multiple hundreds a month for AI access—a tough sell for the millions of Americans living paycheck to paycheck—it remains unclear how long OpenAI, Anthropic, Google, and others can even can afford to offer this high-level access to generative AI tools.

即使这些公司能够将更多普通人转变为愿意每月支付数百美元以获取 AI 访问权限的高级用户——对于数百万生活在薪水之间的美国人来说，这是一项艰难的销售——但 OpenAI、Anthropic、谷歌等公司究竟能维持多长时间提供这种高水平的生成 AI 工具访问权限仍然不清楚。

One thing that is almost for certain, though, is that the cost of these plans [won’t stay stagnant](https://www.wired.com/story/pricing-ai-agents-increasing-costs/) in the coming years. They will just get more expensive. “We have not hit the ceiling on the cost of these systems, particularly in the enterprise space,” says Miller. When the market price is set by vibes, truly anything is possible.

不过，有一件事几乎可以肯定，那就是这些计划的费用在未来几年不会保持不变。它们只会变得更加昂贵。“我们还没有触及这些系统的成本上限，特别是在企业领域，”米勒说。当市场价格由氛围决定时，真的什么都有可能。
</description><content:encoded>[原文链接](https://www.wired.com/story/seriously-why-do-some-ai-chatbot-subscriptions-cost-more-than-200/)



**Why does OpenAI’s** monthly subscription for [ChatGPT Pro](https://www.wired.com/story/openai-chatgpt-pro-subscription/) cost \$200? Because CEO Sam Altman said so. “I personally chose the price and thought we would make some money,” [Altman wrote](https://x.com/sama/status/1876104580070813976) on X.

为什么 OpenAI 的 ChatGPT Pro 每月订阅费用高达 200 美元？因为首席执行官山姆·阿尔特曼这么说。“我个人选择了这个价格，并认为我们会赚一些钱，”阿尔特曼在 X 上写道。

Launched late last year, the plan designed for power users includes almost unlimited access to ChatGPT as well as first dibs on feature launches, like [OpenAI’s new agent](https://www.wired.com/story/browser-haunted-by-ai-agents/). The plan attracted, well, power users. A month after its initial release, Altman claimed OpenAI was still losing money on the all-you-can-eat subscription.

去年底推出的这一面向高级用户的计划几乎提供无限制的 ChatGPT 访问权限，并优先体验新功能的发布，比如 OpenAI 的新代理。该计划吸引了高级用户。在首次发布一个月后，阿尔特曼声称 OpenAI 在这种无限制订阅上仍在亏损。

Even though Altman admitted the \$200 monthly tier was a money-loser, the release set a precedent and ushered in the vibe-based pricing era for expensive [chatbot](https://www.wired.com/tag/chatbots/) subscriptions.

尽管阿尔特曼承认 200 美元的月费层是亏损的，但这一发布设定了先例，并开启了高价聊天机器人订阅的基于氛围的定价时代。

Generative AI tools are costly and [resource-intensive](https://www.wired.com/story/ai-carbon-emissions-energy-unknown-mystery-research/) to run, with many startups rapidly burning through cash. And much like how [OpenAI](https://www.wired.com/tag/openai/) defined the consumer market for chatbots with the release of ChatGPT, Altman’s \$200-a-month price tier for ChatGPT Pro was matched by competitors.

生成性 AI 工具的运行成本高且资源密集，许多初创公司迅速消耗现金。正如 OpenAI 通过 ChatGPT 定义了聊天机器人的消费市场一样，阿尔特曼为 ChatGPT Pro 设定的每月 200 美元的价格层也被竞争对手所匹配。

In April, Anthropic dropped [Claude Max](https://www.anthropic.com/news/max-plan) for \$200 a month. Google got into the game not too long after with the [AI Ultra](https://blog.google/products/google-one/google-ai-ultra/) plan for Gemini, which costs \$250 a month and includes cloud storage. These releases were followed by the monthly \$200 [Cursor Ultra](https://cursor.com/blog/new-tier) plan, for AI-assisted coding, and the \$200 monthly [Perplexity Max](https://www.perplexity.ai/hub/blog/introducing-perplexity-max) plan, for AI-powered search. The most recent addition to the trend, xAI’s [SuperGrok](https://www.wired.com/story/elon-musk-xai-ai-companion-ani/) plan, is also the most expensive at \$300.

在四月，Anthropic 推出了 Claude Max，月费为 200 美元。谷歌不久后也加入了这个游戏，推出了 Gemini 的 AI Ultra 计划，月费为 250 美元，并包括云存储。这些发布之后，紧接着推出了每月 200 美元的 Cursor Ultra 计划，专注于 AI 辅助编码，以及每月 200 美元的 Perplexity Max 计划，专注于 AI 驱动的搜索。最近加入这一趋势的是 xAI 的 SuperGrok 计划，月费最高，达到 300 美元。

Despite this trend in pricing for the most expensive tier, many of the companies continue to offer free, albeit limited, access to their generative AI tools as well as a \$20-a-month plan for users who want more access to the models but aren’t going buck wild with it.

尽管在最昂贵的层级中价格呈上升趋势，但许多公司仍然提供免费的、尽管有限的生成 AI 工具访问权限，以及每月 20 美元的计划，供希望获得更多模型访问权限但又不想过度使用的用户。

“This higher-tier subscription is first testing for new interfaces and new interactions,” says [Allie K. Miller](https://www.alliekmiller.com/), an influential business consultant who subscribes to many of the most expensive plans. She sorts who’s actually paying for these \$200-and-up plans into two core groups. First, you have a faction of Silicon Valley insiders who have money to burn and want to experiment with “alpha products that are on the more expensive side.” For this group the value is not really about making money with the tools. “It gives them not only cachet in their community, but they feel like a new-age explorer,” she says. Miller lumps [Google Glass](https://www.wired.com/story/google-glass-2-is-here/) and [Apple Vision Pro](https://www.wired.com/review/apple-vision-pro/) owners into this same group.

“这个高阶订阅首先是在测试新的界面和新的互动方式，”影响力巨大的商业顾问 Allie K. Miller 说，她订阅了许多最昂贵的计划。她将实际支付这些 200 美元及以上计划的人分为两个核心群体。首先，有一部分硅谷内部人士，他们有钱可烧，想要尝试“价格较高的 alpha 产品”。对于这一群体来说，价值并不在于用这些工具赚钱。“这不仅给他们在社区中带来了声望，还让他们感觉像是新时代的探险者，”她说。Miller 将 Google Glass 和 Apple Vision Pro 的拥有者归入同一群体。

The second core group of subs, as Miller describes it, believes they are getting a solid return on their investment. “We're making back that money with time saved or revenue earned in very little time,” she says. This could include Silicon Valley investors who are trying to use AI Ultra to [automate email](https://www.wired.com/story/how-to-use-ai-for-email-artificial-intelligence-tips-advice/) communications, software developers who are using Claude Max to code for hours every day, and investment bankers who are turning to Perplexity Max for daily market updates. Dmitry Shevelenko, the chief business officer at Perplexity, claims that a majority of subscribers to the Max plan use it as a money making tool.

米勒所描述的第二个核心订阅群体认为他们的投资回报非常可观。“我们通过节省时间或在很短的时间内赚取的收入来收回这笔钱，”她说。这可能包括试图利用 AI Ultra 自动化电子邮件沟通的硅谷投资者、每天花数小时使用 Claude Max 编程的软件开发人员，以及寻求 Perplexity Max 获取每日市场更新的投资银行家。Perplexity 的首席商务官德米特里·谢维连科声称，大多数 Max 计划的订阅者将其作为赚钱工具。

“I probably saved a lot more than \$200 per month for a long time by talking to Claude about my mortgage,” says Scott White, Anthropic’s head of product for [Claude](https://www.wired.com/story/plaintext-anthropic-claude-brain-research/). He thinks of Claude Max subscribers “as people with a builder mentality, a problem-solving mentality who are sophisticated enough and motivated enough to get all of the use and power output.” White used the generative AI tool to help decide how much of his home mortgage to pay down as well as other personal financial analysis.

“我可能通过与 Claude 谈论我的抵押贷款，节省了每月超过 200 美元的费用，”Anthropic 的 Claude 产品负责人 Scott White 说。他将 Claude Max 的订阅者视为“具有建设者心态、解决问题心态的人，他们足够成熟且有动力充分利用其功能和输出。”White 使用这个生成式 AI 工具来帮助决定偿还多少房屋抵押贷款以及进行其他个人财务分析。

Why the \$200 price tag, though? White declined to discuss specifics about the economics of Claude Max’s pricing and whether Anthropic is losing money on the plan. He brought the conversation back to the value provided by Anthropic to power users and how the abilities of AI tools are improving. “It's a very dynamic environment,” says White. “We are going to be adaptable. The market is going to be adaptable.

”那么，为什么定价为 200 美元呢？怀特拒绝讨论 Claude Max 定价的具体经济情况，以及 Anthropic 是否在该计划上亏损。他将话题转回到 Anthropic 为高级用户提供的价值，以及 AI 工具能力的提升。“这是一个非常动态的环境，”怀特说。“我们将会适应。市场也将会适应。”

Leaders at Google are also keeping an eye on the competition when it comes to pricing the company’s most expensive AI subscription. “We look at what makes sense in terms of the market landscape,” says Shimrit Ben-Yair, a vice president of Google One and [Google Photos](https://www.wired.com/story/google-photos-ask-photos-gemini/). She lists the cost to provide the included features and the perceived value to consumers as two additional factors contributing to why Google picked \$250 a month for its AI Ultra plan. Google did not respond to follow-up messages asking whether the company is losing money by providing this to power users.

谷歌的领导者在为公司最昂贵的人工智能订阅定价时，也在关注竞争对手。“我们会考虑市场环境中什么是合理的，”谷歌 One 和谷歌照片的副总裁 Shimrit Ben-Yair 说。她列出了提供所包含功能的成本和消费者的感知价值作为谷歌选择每月 250 美元的 AI Ultra 计划的两个额外因素。谷歌没有回应后续消息，询问公司是否通过为高级用户提供此服务而亏损。

OpenAI and Cursor declined to comment for this story.

OpenAI 和 Cursor 对此故事未作评论。

## Market Forces  市场力量

As a non-builder normie, paying that much for any AI tool is impossible to justify as part of my budget. I canceled my ChatGPT Pro subscription almost immediately after I finished testing the new agent feature for work. When the recurring \$18 charge for Netflix is on the bubble, allocating \$200 every month to an AI tool feels laughable. In this economy? Be real. But, leaders at AI companies are hopeful that those top-shelf plans, which are pleasing power users now, will attract more mainstream subscribers in the future.

作为一个非建设者的普通人，支付如此高的费用来使用任何人工智能工具在我的预算中是无法合理化的。我在完成工作中对新代理功能的测试后几乎立即取消了我的 ChatGPT Pro 订阅。当每月 18 美元的 Netflix 费用都在考虑之中时，每月为一个人工智能工具分配 200 美元感觉可笑。在这种经济环境下？说实话。但是，人工智能公司的领导者们希望，这些目前让高级用户满意的高端计划，未来能够吸引更多主流订阅者。

Ben-Yair considers Google’s \$20-a-month plan for basic Gemini access as already having reached mainstream adoption from consumers, with the \$250-a-month tier potentially following soon behind. “It’s true that while it skews a bit more professional today,” Ben-Yair says, “my personal passion is the consumer space and what it can unlock.” Anthropic’s White hopes to cultivate additional power users for Claude by making the tool simpler to use and providing more user guidance inside the chatbot.

Ben-Yair 认为谷歌每月 20 美元的基本 Gemini 访问计划已经在消费者中达到了主流采用，而每月 250 美元的高阶计划可能很快会跟上。“确实，虽然今天它更偏向于专业用户，”Ben-Yair 说，“但我个人的热情在于消费者领域以及它能解锁的潜力。”Anthropic 的 White 希望通过简化工具的使用并在聊天机器人内提供更多用户指导，来培养 Claude 的更多高级用户。

Even if the companies were able to convert more everyday people into power users who are willing to pay multiple hundreds a month for AI access—a tough sell for the millions of Americans living paycheck to paycheck—it remains unclear how long OpenAI, Anthropic, Google, and others can even can afford to offer this high-level access to generative AI tools.

即使这些公司能够将更多普通人转变为愿意每月支付数百美元以获取 AI 访问权限的高级用户——对于数百万生活在薪水之间的美国人来说，这是一项艰难的销售——但 OpenAI、Anthropic、谷歌等公司究竟能维持多长时间提供这种高水平的生成 AI 工具访问权限仍然不清楚。

One thing that is almost for certain, though, is that the cost of these plans [won’t stay stagnant](https://www.wired.com/story/pricing-ai-agents-increasing-costs/) in the coming years. They will just get more expensive. “We have not hit the ceiling on the cost of these systems, particularly in the enterprise space,” says Miller. When the market price is set by vibes, truly anything is possible.

不过，有一件事几乎可以肯定，那就是这些计划的费用在未来几年不会保持不变。它们只会变得更加昂贵。“我们还没有触及这些系统的成本上限，特别是在企业领域，”米勒说。当市场价格由氛围决定时，真的什么都有可能。
</content:encoded><guid isPermaLink="false">50</guid></item><item><title>有gpt的破限提示词吗</title><link>https://www.open-isle.com/posts/51</link><description>球分享
</description><content:encoded>球分享
</content:encoded><guid isPermaLink="false">51</guid></item><item><title>【慢训】英伟达公司被约谈</title><link>https://www.open-isle.com/posts/53</link><description>怎么评价👀️ 
近日，英伟达算力芯片被曝出存在严重安全问题。此前，美议员呼吁要求美出口的先进芯片必须配备“追踪定位”功能。美人工智能领域专家透露，英伟达算力芯片“追踪定位”“远程关闭”技术已成熟。为维护中国用户网络安全、数据安全，依据《网络安全法》《数据安全法》《个人信息保护法》有关规定，国家互联网信息办公室于2025年7月31日约谈了英伟达公司，要求英伟达公司就对华销售的H20算力芯片漏洞后门安全风险问题进行说明并提交相关证明材料。
</description><content:encoded>怎么评价👀️ 
近日，英伟达算力芯片被曝出存在严重安全问题。此前，美议员呼吁要求美出口的先进芯片必须配备“追踪定位”功能。美人工智能领域专家透露，英伟达算力芯片“追踪定位”“远程关闭”技术已成熟。为维护中国用户网络安全、数据安全，依据《网络安全法》《数据安全法》《个人信息保护法》有关规定，国家互联网信息办公室于2025年7月31日约谈了英伟达公司，要求英伟达公司就对华销售的H20算力芯片漏洞后门安全风险问题进行说明并提交相关证明材料。
</content:encoded><guid isPermaLink="false">53</guid></item><item><title>求dan6.0</title><link>https://www.open-isle.com/posts/54</link><description>rt
</description><content:encoded>rt
</content:encoded><guid isPermaLink="false">54</guid></item><item><title>Docusaurus+Gitea+CI/CD部署指南</title><link>https://www.open-isle.com/posts/55</link><description>**我们的需求：**


1. 供团队内部进行使用，内容不会上传到公网。
2. 需要实现版本控制。

**技术方案：Docusaurus+Gitea+CI/CD**

# 什么是Docusaurus？

Docusaurus 是一个由 Facebook（现 Meta）开发的 **开源静态网站生成器**，特别适用于构建文档网站，如项目文档、产品手册、知识库等。它基于 **React** 和 **Markdown**，结合现代前端开发工具，提供了一种高效、模块化、可扩展的方式来构建文档网站。

# 怎么部署Docusaurus？

```powershell
# my-website是项目文件夹，classic是官方提供的默认主题模板。
npx create-docusaurus@latest my-website classic
cd my-website
npm run start
```

注意`npm`版本需要大于`18`，升级方法：

```bash
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
source ~/.bashrc
nvm install 18
nvm use 18
# 设置默认版本为npm 18
nvm alias default 18
```

启动项目进行测试：

```bash
npm run start -- --host 0.0.0.0 --port 3001
# 访问地址
http://xxx.xxx.xxx.xxx:3031
```

所有的文件都建议放在`./docs`文件夹下，方便检索。

# 什么是Gitea？

Gitea是一个轻量级的、自托管的类似 GitHub/GitLab 的服务，让其作为内网的 Git 服务器和协作平台，通过 CI/CD 工具（ Gitea Actions 或 Jenkins）在每次代码提交后自动构建和部署 Docusaurus 网站。

**CI/CD (持续集成/持续部署)**: 自动化工具，负责“监听”Gitea 仓库的变化，并自动执行构建和部署任务。

**团队小伙伴想要添加或修改文档时，大致流程是这样的：**

1. **拉代码**: 小伙伴从内网的 Gitea 服务器上把 Docusaurus 项目拉到自己电脑上（就是 git clone 啦）。
2. **开新分支**: 给你的改动整一个新分支（比如 `git checkout -b feature/add-new-doc`）。
3. **改内容**: 用 VS Code 或者你喜欢的编辑器直接修改或添加 **`.md` 文件**。超方便的是，你完全不用登录服务器，在自己电脑上就能搞定所有操作。
4. **提交代码**: 改完后提交一下（`git commit`），然后推到 Gitea 上（`git push`）。
5. **发合并请求**: 到 Gitea 网页上点几下，发个合并请求，把你的改动合到主分支（`main` 或 `master`）。**【待更新，实现自动review】**
6. **代码审核**: **【待更新，实现自动review】**
7. **合并代码**: 没啥问题就自动合并到main分支
8. **自动部署**:  一旦合并，Gitea Actions 就自动开始干活：
   - CI/CD 脚本自动跑起来。
   - 先是 `npm install` 装依赖。
   - 接着 `npm run build` 构建静态网站（会生成个 `build` 文件夹）。
   - 最后，脚本把 `build` 文件夹里的东西复制到服务器上的网站目录。

# 部署Gitea

使用docker-compose部署（docker-compose.yml）：

```bash
version: "3"

services:
  gitea:
    image: gitea/gitea:1.21
    container_name: gitea
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__database__DB_TYPE=mysql
      - GITEA__database__HOST=db:3306
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - GITEA__database__PASSWD=xxxxxx 
    restart: always
    networks:
      - gitea_net
    volumes:
      - ./gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "2369:3000" 
      - "222:22"   
    depends_on:
      - db

  db:
    image: mysql:8.0
    container_name: gitea_db
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=xxxx 
      - MYSQL_USER=gitea
      - MYSQL_PASSWORD=xxxxxx 
      - MYSQL_DATABASE=gitea
    networks:
      - gitea_net
    volumes:
      - ./mysql:/var/lib/mysql

networks:
  gitea_net:
    driver: bridge
```

执行命令：

```bash
sudo docker-compose up -d
```

跳转`http://xxx.xxx.xxx.xxx:2369` 创建管理员账号，创建仓库：

```bash
touch README.md
git init
git checkout -b main
git add README.md
git commit -m "first commit"
git remote add origin http://xxx.xxx.xxx.xxx:2369/Laccoliths/brain.git
git push -u origin main
```

# 将Docusaurus和Gitea结合起来

```bash
git init
git checkout -b main
git add .
git commit -m "feat: Initial Docusaurus project structure"
git remote add origin http://xxx.xxx.xxx.xxx:2369/Laccoliths/brain.git
git push -u origin main
# 需要输入的账号密码与Gitea的账号密码完全相同
```

# 在Gitea配置CI/CD

```bash
mkdir -p .gitea/workflows
touch .gitea/workflows/deploy.yml
vim .gitea/workflows/deploy.yml

# 生成公钥私钥，-N "" 表示创建一个没有密码的私钥，这对于自动化脚本是必要的
ssh-keygen -t rsa -b 4096 -f ~/.ssh/gitea_deploy_key -N ""
# 授权公钥：将公钥内容添加到该用户的认证文件中。
cat ~/.ssh/gitea_deploy_key.pub &gt;&gt; ~/.ssh/authorized_keys
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys

sudo mkdir -p /var/www/my-brain-website
```

`deploy.yml`(这个好难写😭)：

```yaml
name: Build and Deploy Docusaurus Website

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Build Docusaurus Website
        run: npm run build
  

      - name: Get Workspace Path
        id: get_path 
        run: echo "path=$(pwd)" &gt;&gt; $GITHUB_OUTPUT

      - name: Deploy to Server via rsync
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            rsync -avz --delete ${{ steps.get_path.outputs.path }}/build/ ${{ secrets.DEPLOY_PATH }}
        
            echo "✅ Deployment truly successful!"        
```

在Gitea上设置Secrets，回到Gitea仓库页面（`http://xxx.xxx.xxx.xxx:2369/Laccoliths/brain`）：

启动actions（在仓库的`settings`中）：

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/5c9b8de98ed0425bb24a4f3b5753dfd3.png)

添加密钥：

![image1.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/1bc510fd1826466db1cc0c132a97a727.png)

- `SSH_HOST`：`xxx.xxx.xxx.xxx`
- `SSH_USER`：`casit205`
- `SSH_PORT`：`2205`
- `SSH_PRIVATE_KEY`：将刚才生成的**私钥**文件 `gitea_deploy_key` 的内容**完整地**复制粘贴进去。执行 `cat ~/.ssh/gitea_deploy_key` 查看内容。
- `DEPLOY_PATH`：`/var/www/my-brain-website`

# 配置NGINX

```bash
sudo apt update
sudo apt install nginx
sudo vim /etc/nginx/sites-available/docusaurus
sudo ln -s /etc/nginx/sites-available/docusaurus /etc/nginx/sites-enabled/
sudo systemctl restart nginx

# 查看错误日志
sudo tail -f /var/log/nginx/error.log
```

docusaurus：

```bash
server {
    listen 8080;
    listen [::]:8080;
    server_name 192.168.0.37;
    root /var/www/my-brain-website;
    index index.html;
    location / {
        try_files $uri $uri/ /index.html;
    }
}
```

```

```
</description><content:encoded>**我们的需求：**


1. 供团队内部进行使用，内容不会上传到公网。
2. 需要实现版本控制。

**技术方案：Docusaurus+Gitea+CI/CD**

# 什么是Docusaurus？

Docusaurus 是一个由 Facebook（现 Meta）开发的 **开源静态网站生成器**，特别适用于构建文档网站，如项目文档、产品手册、知识库等。它基于 **React** 和 **Markdown**，结合现代前端开发工具，提供了一种高效、模块化、可扩展的方式来构建文档网站。

# 怎么部署Docusaurus？

```powershell
# my-website是项目文件夹，classic是官方提供的默认主题模板。
npx create-docusaurus@latest my-website classic
cd my-website
npm run start
```

注意`npm`版本需要大于`18`，升级方法：

```bash
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
source ~/.bashrc
nvm install 18
nvm use 18
# 设置默认版本为npm 18
nvm alias default 18
```

启动项目进行测试：

```bash
npm run start -- --host 0.0.0.0 --port 3001
# 访问地址
http://xxx.xxx.xxx.xxx:3031
```

所有的文件都建议放在`./docs`文件夹下，方便检索。

# 什么是Gitea？

Gitea是一个轻量级的、自托管的类似 GitHub/GitLab 的服务，让其作为内网的 Git 服务器和协作平台，通过 CI/CD 工具（ Gitea Actions 或 Jenkins）在每次代码提交后自动构建和部署 Docusaurus 网站。

**CI/CD (持续集成/持续部署)**: 自动化工具，负责“监听”Gitea 仓库的变化，并自动执行构建和部署任务。

**团队小伙伴想要添加或修改文档时，大致流程是这样的：**

1. **拉代码**: 小伙伴从内网的 Gitea 服务器上把 Docusaurus 项目拉到自己电脑上（就是 git clone 啦）。
2. **开新分支**: 给你的改动整一个新分支（比如 `git checkout -b feature/add-new-doc`）。
3. **改内容**: 用 VS Code 或者你喜欢的编辑器直接修改或添加 **`.md` 文件**。超方便的是，你完全不用登录服务器，在自己电脑上就能搞定所有操作。
4. **提交代码**: 改完后提交一下（`git commit`），然后推到 Gitea 上（`git push`）。
5. **发合并请求**: 到 Gitea 网页上点几下，发个合并请求，把你的改动合到主分支（`main` 或 `master`）。**【待更新，实现自动review】**
6. **代码审核**: **【待更新，实现自动review】**
7. **合并代码**: 没啥问题就自动合并到main分支
8. **自动部署**:  一旦合并，Gitea Actions 就自动开始干活：
   - CI/CD 脚本自动跑起来。
   - 先是 `npm install` 装依赖。
   - 接着 `npm run build` 构建静态网站（会生成个 `build` 文件夹）。
   - 最后，脚本把 `build` 文件夹里的东西复制到服务器上的网站目录。

# 部署Gitea

使用docker-compose部署（docker-compose.yml）：

```bash
version: "3"

services:
  gitea:
    image: gitea/gitea:1.21
    container_name: gitea
    environment:
      - USER_UID=1000
      - USER_GID=1000
      - GITEA__database__DB_TYPE=mysql
      - GITEA__database__HOST=db:3306
      - GITEA__database__NAME=gitea
      - GITEA__database__USER=gitea
      - GITEA__database__PASSWD=xxxxxx 
    restart: always
    networks:
      - gitea_net
    volumes:
      - ./gitea:/data
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    ports:
      - "2369:3000" 
      - "222:22"   
    depends_on:
      - db

  db:
    image: mysql:8.0
    container_name: gitea_db
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=xxxx 
      - MYSQL_USER=gitea
      - MYSQL_PASSWORD=xxxxxx 
      - MYSQL_DATABASE=gitea
    networks:
      - gitea_net
    volumes:
      - ./mysql:/var/lib/mysql

networks:
  gitea_net:
    driver: bridge
```

执行命令：

```bash
sudo docker-compose up -d
```

跳转`http://xxx.xxx.xxx.xxx:2369` 创建管理员账号，创建仓库：

```bash
touch README.md
git init
git checkout -b main
git add README.md
git commit -m "first commit"
git remote add origin http://xxx.xxx.xxx.xxx:2369/Laccoliths/brain.git
git push -u origin main
```

# 将Docusaurus和Gitea结合起来

```bash
git init
git checkout -b main
git add .
git commit -m "feat: Initial Docusaurus project structure"
git remote add origin http://xxx.xxx.xxx.xxx:2369/Laccoliths/brain.git
git push -u origin main
# 需要输入的账号密码与Gitea的账号密码完全相同
```

# 在Gitea配置CI/CD

```bash
mkdir -p .gitea/workflows
touch .gitea/workflows/deploy.yml
vim .gitea/workflows/deploy.yml

# 生成公钥私钥，-N "" 表示创建一个没有密码的私钥，这对于自动化脚本是必要的
ssh-keygen -t rsa -b 4096 -f ~/.ssh/gitea_deploy_key -N ""
# 授权公钥：将公钥内容添加到该用户的认证文件中。
cat ~/.ssh/gitea_deploy_key.pub &gt;&gt; ~/.ssh/authorized_keys
chmod 700 ~/.ssh
chmod 600 ~/.ssh/authorized_keys

sudo mkdir -p /var/www/my-brain-website
```

`deploy.yml`(这个好难写😭)：

```yaml
name: Build and Deploy Docusaurus Website

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm install

      - name: Build Docusaurus Website
        run: npm run build
  

      - name: Get Workspace Path
        id: get_path 
        run: echo "path=$(pwd)" &gt;&gt; $GITHUB_OUTPUT

      - name: Deploy to Server via rsync
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e
            rsync -avz --delete ${{ steps.get_path.outputs.path }}/build/ ${{ secrets.DEPLOY_PATH }}
        
            echo "✅ Deployment truly successful!"        
```

在Gitea上设置Secrets，回到Gitea仓库页面（`http://xxx.xxx.xxx.xxx:2369/Laccoliths/brain`）：

启动actions（在仓库的`settings`中）：

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/5c9b8de98ed0425bb24a4f3b5753dfd3.png)

添加密钥：

![image1.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/1bc510fd1826466db1cc0c132a97a727.png)

- `SSH_HOST`：`xxx.xxx.xxx.xxx`
- `SSH_USER`：`casit205`
- `SSH_PORT`：`2205`
- `SSH_PRIVATE_KEY`：将刚才生成的**私钥**文件 `gitea_deploy_key` 的内容**完整地**复制粘贴进去。执行 `cat ~/.ssh/gitea_deploy_key` 查看内容。
- `DEPLOY_PATH`：`/var/www/my-brain-website`

# 配置NGINX

```bash
sudo apt update
sudo apt install nginx
sudo vim /etc/nginx/sites-available/docusaurus
sudo ln -s /etc/nginx/sites-available/docusaurus /etc/nginx/sites-enabled/
sudo systemctl restart nginx

# 查看错误日志
sudo tail -f /var/log/nginx/error.log
```

docusaurus：

```bash
server {
    listen 8080;
    listen [::]:8080;
    server_name 192.168.0.37;
    root /var/www/my-brain-website;
    index index.html;
    location / {
        try_files $uri $uri/ /index.html;
    }
}
```

```

```
</content:encoded><guid isPermaLink="false">55</guid></item><item><title>推荐一款超萌跨平台桌面宠物——BongoCat 🐱</title><link>https://www.open-isle.com/posts/56</link><description>## 🌟 什么是BongoCat？

BongoCat是一款开源的跨平台桌面宠物应用，它能在你的电脑上显示一只可爱的猫咪，会根据你的键盘、鼠标或手柄操作做出同步动作，让枯燥的工作学习增添几分趣味。

项目地址：https://github.com/ayangweb/BongoCat

## 🖥️ 支持平台

BongoCat拥有出色的跨平台能力，无论你使用什么系统都能享受：  - Windows（32位、64位、ARM64架构） - macOS（Apple Silicon和Intel芯片均支持） - Linux(x11)（多种发行版和架构）

![macOS](https://camo.githubusercontent.com/5dd4d566d6e689b767f6d7b781eae9a014287d063f484ffd5f7364e61914156f/68747470733a2f2f69302e6864736c622e636f6d2f6266732f6f70656e706c6174666f726d2f646666323736623936643439633564366334333162373462353331616162373231393162336438372e706e67)

![Windows](https://camo.githubusercontent.com/1d932337a60b8d90df377372fcbee905d9e3a900153c0c2676d72615f59312fc/68747470733a2f2f69302e6864736c622e636f6d2f6266732f6f70656e706c6174666f726d2f613431343962373533383536656537663430313938396461393032636633623561643335623339652e706e67)

![Linux](https://camo.githubusercontent.com/4b0d6846d0c472750174c3adc2afe88aeff8b71d625b85a9d1db790d950445e3/68747470733a2f2f69302e6864736c622e636f6d2f6266732f6f70656e706c6174666f726d2f336234396639363138313964336666363362326238303235316331636331336332376539383662302e706e67)

## 🚀 功能亮点

1. **多平台适配** ：完美支持macOS、Windows和Linux(x11)系统，无需担心兼容性问题
2. **互动响应** ：根据键盘、鼠标或手柄的操作，猫咪会做出同步动作，仿佛在和你一起操作电脑
3. **个性化定制** ：支持导入自定义模型，打造专属于你的猫咪形象
4. **隐私保护** ：完全开源，代码公开透明，绝不收集任何用户数据，支持离线运行，无需联网
5. **窗口灵活设置** ：窗口穿透：启用后不影响对其他应用程序的操作；窗口置顶：始终显示在其他应用程序上方；调整尺寸和不透明度：根据喜好自由调节；镜像模式：水平翻转模型

## 🧩 模型资源

### 更多模型

你可以在这个仓库中探索、下载更多猫咪模型，或提交你的创作，与大家一起分享：  📦 [Awesome-BongoCat](https://github.com/ayangweb/Awesome-BongoCat)

### 模型转换

如果你想将 Bongo-Cat-Mver 应用中的模型转换为兼容 BongoCat 的格式，可以使用在线转换工具：  🔗 [在线转换]([https://bongocat.vteamer.cc](https://bongocat.vteamer.cc/))

## 🔧 开发背景

本项目的灵感来源于 [MMmmmoko]([https://github.com/MMmmmoko](https://github.com/MMmmmoko)) 大佬开发的 [Bongo-Cat-Mver]([https://github.com/MMmmmoko/Bongo-Cat-Mver](https://github.com/MMmmmoko/Bongo-Cat-Mver))。它以独特的猫咪互动功能深受用户喜爱，但仅支持 Windows 平台。  作为一名深度 macOS 用户，开发者特别希望在自己的设备上也能使用这款可爱的猫咪，于是决定开发一个适配 macOS 的版本。同时，得益于 [Tauri]([https://github.com/tauri-apps/tauri](https://github.com/tauri-apps/tauri)) 强大的跨平台能力，本项目不仅支持 macOS，还兼容 Windows 和 Linux(x11)，让更多的用户都能与这只可爱的猫咪互动！
</description><content:encoded>## 🌟 什么是BongoCat？

BongoCat是一款开源的跨平台桌面宠物应用，它能在你的电脑上显示一只可爱的猫咪，会根据你的键盘、鼠标或手柄操作做出同步动作，让枯燥的工作学习增添几分趣味。

项目地址：https://github.com/ayangweb/BongoCat

## 🖥️ 支持平台

BongoCat拥有出色的跨平台能力，无论你使用什么系统都能享受：  - Windows（32位、64位、ARM64架构） - macOS（Apple Silicon和Intel芯片均支持） - Linux(x11)（多种发行版和架构）

![macOS](https://camo.githubusercontent.com/5dd4d566d6e689b767f6d7b781eae9a014287d063f484ffd5f7364e61914156f/68747470733a2f2f69302e6864736c622e636f6d2f6266732f6f70656e706c6174666f726d2f646666323736623936643439633564366334333162373462353331616162373231393162336438372e706e67)

![Windows](https://camo.githubusercontent.com/1d932337a60b8d90df377372fcbee905d9e3a900153c0c2676d72615f59312fc/68747470733a2f2f69302e6864736c622e636f6d2f6266732f6f70656e706c6174666f726d2f613431343962373533383536656537663430313938396461393032636633623561643335623339652e706e67)

![Linux](https://camo.githubusercontent.com/4b0d6846d0c472750174c3adc2afe88aeff8b71d625b85a9d1db790d950445e3/68747470733a2f2f69302e6864736c622e636f6d2f6266732f6f70656e706c6174666f726d2f336234396639363138313964336666363362326238303235316331636331336332376539383662302e706e67)

## 🚀 功能亮点

1. **多平台适配** ：完美支持macOS、Windows和Linux(x11)系统，无需担心兼容性问题
2. **互动响应** ：根据键盘、鼠标或手柄的操作，猫咪会做出同步动作，仿佛在和你一起操作电脑
3. **个性化定制** ：支持导入自定义模型，打造专属于你的猫咪形象
4. **隐私保护** ：完全开源，代码公开透明，绝不收集任何用户数据，支持离线运行，无需联网
5. **窗口灵活设置** ：窗口穿透：启用后不影响对其他应用程序的操作；窗口置顶：始终显示在其他应用程序上方；调整尺寸和不透明度：根据喜好自由调节；镜像模式：水平翻转模型

## 🧩 模型资源

### 更多模型

你可以在这个仓库中探索、下载更多猫咪模型，或提交你的创作，与大家一起分享：  📦 [Awesome-BongoCat](https://github.com/ayangweb/Awesome-BongoCat)

### 模型转换

如果你想将 Bongo-Cat-Mver 应用中的模型转换为兼容 BongoCat 的格式，可以使用在线转换工具：  🔗 [在线转换]([https://bongocat.vteamer.cc](https://bongocat.vteamer.cc/))

## 🔧 开发背景

本项目的灵感来源于 [MMmmmoko]([https://github.com/MMmmmoko](https://github.com/MMmmmoko)) 大佬开发的 [Bongo-Cat-Mver]([https://github.com/MMmmmoko/Bongo-Cat-Mver](https://github.com/MMmmmoko/Bongo-Cat-Mver))。它以独特的猫咪互动功能深受用户喜爱，但仅支持 Windows 平台。  作为一名深度 macOS 用户，开发者特别希望在自己的设备上也能使用这款可爱的猫咪，于是决定开发一个适配 macOS 的版本。同时，得益于 [Tauri]([https://github.com/tauri-apps/tauri](https://github.com/tauri-apps/tauri)) 强大的跨平台能力，本项目不仅支持 macOS，还兼容 Windows 和 Linux(x11)，让更多的用户都能与这只可爱的猫咪互动！
</content:encoded><guid isPermaLink="false">56</guid></item><item><title>推一个macOS好用的状态栏工具，Bartender5平替</title><link>https://www.open-isle.com/posts/57</link><description>macOS如果没有状态栏管理app将会非常蛋疼，状态栏应用一多，直接不给你显示，挤掉，无法展开，不讲道理

楼主升级 macOS 26之后，Bartender5就用不了了；

偶然发现这一个平替的：https://github.com/jordanbaird/Ice 甚至做的更好

![20645823e51047a8bbef62555ed18e27.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/db4e643a416541b4b5883c38a3a7c51c.png)

![374502034-095442ba-f2d0-4bb4-9632-91e26ef8d45b.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/fec085c35f534574b51c733daa1c7da5.png)

社区也比较活跃，作者会积极相应issues和pr

![CleanShot 2025-08-01 at 12 .27.53@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/191e3d3030184ed6ad69cd32fa4d384c.png)
</description><content:encoded>macOS如果没有状态栏管理app将会非常蛋疼，状态栏应用一多，直接不给你显示，挤掉，无法展开，不讲道理

楼主升级 macOS 26之后，Bartender5就用不了了；

偶然发现这一个平替的：https://github.com/jordanbaird/Ice 甚至做的更好

![20645823e51047a8bbef62555ed18e27.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/db4e643a416541b4b5883c38a3a7c51c.png)

![374502034-095442ba-f2d0-4bb4-9632-91e26ef8d45b.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/fec085c35f534574b51c733daa1c7da5.png)

社区也比较活跃，作者会积极相应issues和pr

![CleanShot 2025-08-01 at 12 .27.53@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/191e3d3030184ed6ad69cd32fa4d384c.png)
</content:encoded><guid isPermaLink="false">57</guid></item><item><title>【搬运】FAST</title><link>https://www.open-isle.com/posts/58</link><description>原文链接: https://www.catherinejue.com/fast

# fast  快速

Rarely in software does anyone ask for “fast.” We ask for features, we ask for volume discounts, we ask for the next data integration. We never think to ask for fast.

在软件中，很少有人会要求“快速”。我们要求功能，我们要求批量折扣，我们要求下一个数据集成。我们从未想到要要求快速。

But software that's fast changes behavior.

但快速的软件会改变行为。

Developers ship more often when code deploys in seconds (or milliseconds) instead of minutes.

当代码在秒（或毫秒）而不是分钟内部署时，开发人员会更频繁地发布。

AI code complete means we can prototype in languages we're less familiar with.

AI 代码完整意味着我们可以在不太熟悉的语言中进行原型设计。

Real-time streaming makes remote work possible.

实时流媒体使远程工作成为可能。

Conversely, slow software limits us more than we realize. When was the last time you used airplane WiFi and actually got a lot done? Maybe you sent a few Slack messages or answered a couple emails. Google Docs worked half of the time. You probably gave up. Instagram usually works pretty well—Facebook knows how important it is to be fast.

相反，慢速软件限制了我们比我们意识到的更多。你上一次使用飞机 WiFi 并且真的完成了很多工作是什么时候？也许你发了几条 Slack 消息或回复了几封邮件。Google Docs 一半时间都无法使用。你可能放弃了。Instagram 通常运行得很好——Facebook 知道速度有多重要。

**Fast is magical.**  快速是神奇的。

Fast eliminates cognitive friction. Raycast surfacing the right application before you finish typing feels like an extension of your mind. Superhuman's [sub-100ms](https://blog.superhuman.com/superhuman-is-built-for-speed/?utm_source=catherinejue&amp;utm_medium=email) rule—plus their focus on keyboard shortcuts—changed the email game in a way that no one's been able to replicate, let alone beat. I recently used Mercury to pay another business that uses Mercury, and its instant settle felt surprising in a world where bank transfers usually take days.

Fast 消除了认知摩擦。Raycast 在你打字完成之前就呈现出正确的应用程序，感觉就像是你思维的延伸。Superhuman 的低于 100 毫秒规则——加上他们对键盘快捷键的关注——以一种无人能够复制，更不用说超越的方式改变了电子邮件游戏。我最近使用 Mercury 向另一家使用 Mercury 的企业付款，其即时结算在一个银行转账通常需要几天的世界中感觉令人惊讶。

No one praises these tools explicitly for their speed. They just feel magical.

没有人明确赞美这些工具的速度。它们只是让人感觉神奇。

**Fast signals simplicity**, which is even rarer in a world where code and content are commodities.快速信号简单性，而在一个代码和内容都是商品的世界里，这种简单性更为稀缺。

Fast software has nowhere to hide. Network calls and dependencies reveal themselves through latency, and this brutal honesty forces discipline. Companies that do fast very well tend to have very focused products.

快速软件无处可藏。网络调用和依赖通过延迟显露出来，这种残酷的诚实迫使人们保持纪律。做得很快的公司往往拥有非常专注的产品。

This is because the effort to make software fast often requires stripping away non-essential features. Compare how fast a streamlined project management tool like Linear loads versus an enterprise app like Workday (or worse… Oracle). In a world obsessed with adding rather than refining, speed becomes the ultimate expression of respect. It says, "We've thought deeply about what matters and eliminated everything else."

这是因为使软件快速的努力往往需要剥离非必要的功能。比较一下像 Linear 这样的精简项目管理工具加载的速度与像 Workday（更糟糕的是……Oracle）这样的企业应用程序。在一个痴迷于添加而非精炼的世界中，速度成为尊重的终极表现。它说：“我们深思熟虑了什么是重要的，并消除了其他一切。”

In order to make things fast, you often have to do complex things behind the scenes. At Cash App, we were very careful to only introduce additional steps in the user's journey when it was absolutely needed, which meant we had to handle a lot of messiness in the background. In** **[this interview](https://www.instagram.com/activeprogrammer/reel/DB9J__LgSfy/?utm_source=catherinejue&amp;utm_medium=email), Kevin Systrom explains how Instagram** ***optimistically uploaded* users' photos while they entered their caption to make the upload experience feel instant. Fast isn't just a technical accomplishment—it signals prioritization and focus.

为了让事情变得快速，您通常需要在幕后做复杂的事情。在 Cash App，我们非常小心，只在用户旅程中绝对需要时才引入额外的步骤，这意味着我们必须在后台处理很多混乱。在这次采访中，Kevin Systrom 解释了 Instagram 如何在用户输入标题时乐观地上传照片，以使上传体验感觉瞬间完成。快速不仅仅是一个技术成就——它还意味着优先级和专注。

**Fast is fun**  快速是有趣的

Also, we like fast because it's fun! We count WPM typing speeds for very little benefit except that it's fun to be faster than other people. The first thing we do on a new computer is set-up our hotkeys so we can go at the same speed as our last set-up.

此外，我们喜欢快速，因为这很有趣！我们计算每分钟字数（WPM）打字速度，几乎没有什么好处，只是因为比其他人快很有趣。我们在新电脑上做的第一件事就是设置热键，以便我们可以以与上一个设置相同的速度进行操作。

**Fast is relative**  快是相对的

A lot of LLM-augmented workflows are infinitely faster than their pre-LLM counterparts today. Asking an LLM to research for 6 minutes is already 10000x faster than asking for a report that used to take days.

许多LLM增强的工作流程今天比其前LLM版本快得多。让LLM研究 6 分钟已经比请求一份以前需要几天的报告快 10000 倍。

And yet, it's obvious to anyone that writes code that we're very far from the standards that we're used to from the previous software era. We're very focused on capabilities, and we're not very focused on performance or experience. We accept the clunkiness because the magic is still new, and that's ok! It's all still way faster than a human. But the current tools we have to build, run, and deploy AI apps feel very far off from the developer experience that we'll have in the future. We haven't yet begun the phase where optimization becomes the priority.

然而，对于任何编写代码的人来说，很明显我们与之前软件时代的标准相去甚远。我们非常关注功能，而对性能或体验关注不够。我们接受这种笨拙，因为这种魔力仍然是新的，这没关系！这仍然比人类快得多。但我们目前用于构建、运行和部署 AI 应用的工具，与未来开发者的体验相差甚远。我们还没有开始优化成为优先事项的阶段。

When we do, you'll see more and more companies optimizing for low latency, interface design, connectivity, and reliability. This, in turn, will unlock new capabilities and use cases that we aren't yet even thinking about. After all, the best software changes the way we live our lives, and we build our lives around software that feels like superpowers.

当我们这样做时，你会看到越来越多的公司在优化低延迟、界面设计、连接性和可靠性。这反过来将解锁我们尚未想到的新能力和用例。毕竟，最好的软件改变了我们的生活方式，而我们围绕着感觉像超能力的软件构建我们的生活。
</description><content:encoded>原文链接: https://www.catherinejue.com/fast

# fast  快速

Rarely in software does anyone ask for “fast.” We ask for features, we ask for volume discounts, we ask for the next data integration. We never think to ask for fast.

在软件中，很少有人会要求“快速”。我们要求功能，我们要求批量折扣，我们要求下一个数据集成。我们从未想到要要求快速。

But software that's fast changes behavior.

但快速的软件会改变行为。

Developers ship more often when code deploys in seconds (or milliseconds) instead of minutes.

当代码在秒（或毫秒）而不是分钟内部署时，开发人员会更频繁地发布。

AI code complete means we can prototype in languages we're less familiar with.

AI 代码完整意味着我们可以在不太熟悉的语言中进行原型设计。

Real-time streaming makes remote work possible.

实时流媒体使远程工作成为可能。

Conversely, slow software limits us more than we realize. When was the last time you used airplane WiFi and actually got a lot done? Maybe you sent a few Slack messages or answered a couple emails. Google Docs worked half of the time. You probably gave up. Instagram usually works pretty well—Facebook knows how important it is to be fast.

相反，慢速软件限制了我们比我们意识到的更多。你上一次使用飞机 WiFi 并且真的完成了很多工作是什么时候？也许你发了几条 Slack 消息或回复了几封邮件。Google Docs 一半时间都无法使用。你可能放弃了。Instagram 通常运行得很好——Facebook 知道速度有多重要。

**Fast is magical.**  快速是神奇的。

Fast eliminates cognitive friction. Raycast surfacing the right application before you finish typing feels like an extension of your mind. Superhuman's [sub-100ms](https://blog.superhuman.com/superhuman-is-built-for-speed/?utm_source=catherinejue&amp;utm_medium=email) rule—plus their focus on keyboard shortcuts—changed the email game in a way that no one's been able to replicate, let alone beat. I recently used Mercury to pay another business that uses Mercury, and its instant settle felt surprising in a world where bank transfers usually take days.

Fast 消除了认知摩擦。Raycast 在你打字完成之前就呈现出正确的应用程序，感觉就像是你思维的延伸。Superhuman 的低于 100 毫秒规则——加上他们对键盘快捷键的关注——以一种无人能够复制，更不用说超越的方式改变了电子邮件游戏。我最近使用 Mercury 向另一家使用 Mercury 的企业付款，其即时结算在一个银行转账通常需要几天的世界中感觉令人惊讶。

No one praises these tools explicitly for their speed. They just feel magical.

没有人明确赞美这些工具的速度。它们只是让人感觉神奇。

**Fast signals simplicity**, which is even rarer in a world where code and content are commodities.快速信号简单性，而在一个代码和内容都是商品的世界里，这种简单性更为稀缺。

Fast software has nowhere to hide. Network calls and dependencies reveal themselves through latency, and this brutal honesty forces discipline. Companies that do fast very well tend to have very focused products.

快速软件无处可藏。网络调用和依赖通过延迟显露出来，这种残酷的诚实迫使人们保持纪律。做得很快的公司往往拥有非常专注的产品。

This is because the effort to make software fast often requires stripping away non-essential features. Compare how fast a streamlined project management tool like Linear loads versus an enterprise app like Workday (or worse… Oracle). In a world obsessed with adding rather than refining, speed becomes the ultimate expression of respect. It says, "We've thought deeply about what matters and eliminated everything else."

这是因为使软件快速的努力往往需要剥离非必要的功能。比较一下像 Linear 这样的精简项目管理工具加载的速度与像 Workday（更糟糕的是……Oracle）这样的企业应用程序。在一个痴迷于添加而非精炼的世界中，速度成为尊重的终极表现。它说：“我们深思熟虑了什么是重要的，并消除了其他一切。”

In order to make things fast, you often have to do complex things behind the scenes. At Cash App, we were very careful to only introduce additional steps in the user's journey when it was absolutely needed, which meant we had to handle a lot of messiness in the background. In** **[this interview](https://www.instagram.com/activeprogrammer/reel/DB9J__LgSfy/?utm_source=catherinejue&amp;utm_medium=email), Kevin Systrom explains how Instagram** ***optimistically uploaded* users' photos while they entered their caption to make the upload experience feel instant. Fast isn't just a technical accomplishment—it signals prioritization and focus.

为了让事情变得快速，您通常需要在幕后做复杂的事情。在 Cash App，我们非常小心，只在用户旅程中绝对需要时才引入额外的步骤，这意味着我们必须在后台处理很多混乱。在这次采访中，Kevin Systrom 解释了 Instagram 如何在用户输入标题时乐观地上传照片，以使上传体验感觉瞬间完成。快速不仅仅是一个技术成就——它还意味着优先级和专注。

**Fast is fun**  快速是有趣的

Also, we like fast because it's fun! We count WPM typing speeds for very little benefit except that it's fun to be faster than other people. The first thing we do on a new computer is set-up our hotkeys so we can go at the same speed as our last set-up.

此外，我们喜欢快速，因为这很有趣！我们计算每分钟字数（WPM）打字速度，几乎没有什么好处，只是因为比其他人快很有趣。我们在新电脑上做的第一件事就是设置热键，以便我们可以以与上一个设置相同的速度进行操作。

**Fast is relative**  快是相对的

A lot of LLM-augmented workflows are infinitely faster than their pre-LLM counterparts today. Asking an LLM to research for 6 minutes is already 10000x faster than asking for a report that used to take days.

许多LLM增强的工作流程今天比其前LLM版本快得多。让LLM研究 6 分钟已经比请求一份以前需要几天的报告快 10000 倍。

And yet, it's obvious to anyone that writes code that we're very far from the standards that we're used to from the previous software era. We're very focused on capabilities, and we're not very focused on performance or experience. We accept the clunkiness because the magic is still new, and that's ok! It's all still way faster than a human. But the current tools we have to build, run, and deploy AI apps feel very far off from the developer experience that we'll have in the future. We haven't yet begun the phase where optimization becomes the priority.

然而，对于任何编写代码的人来说，很明显我们与之前软件时代的标准相去甚远。我们非常关注功能，而对性能或体验关注不够。我们接受这种笨拙，因为这种魔力仍然是新的，这没关系！这仍然比人类快得多。但我们目前用于构建、运行和部署 AI 应用的工具，与未来开发者的体验相差甚远。我们还没有开始优化成为优先事项的阶段。

When we do, you'll see more and more companies optimizing for low latency, interface design, connectivity, and reliability. This, in turn, will unlock new capabilities and use cases that we aren't yet even thinking about. After all, the best software changes the way we live our lives, and we build our lives around software that feels like superpowers.

当我们这样做时，你会看到越来越多的公司在优化低延迟、界面设计、连接性和可靠性。这反过来将解锁我们尚未想到的新能力和用例。毕竟，最好的软件改变了我们的生活方式，而我们围绕着感觉像超能力的软件构建我们的生活。
</content:encoded><guid isPermaLink="false">58</guid></item><item><title>【搬运】 Macbook Pro 失眠</title><link>https://www.open-isle.com/posts/59</link><description>原文链接: https://manuel.bernhardt.io/posts/2025-07-24-macbook-pro-insomnia

# Macbook Pro Insomnia  

**2025-07-24** 

For a number of years now I have a MacBook Pro Silicon M1 Max. It worked beautifully.

多年来我一直使用 MacBook Pro Silicon M1 Max。它运行得非常顺畅。

Then, seemingly out of nowhere, I started noticing that the battery drained over night when I left the notebook somewhere, not connected to power. This got worse and worse, up until the point that I’ve had enough of it and I started doing some research.

然后，似乎无缘无故，我开始注意到当我把笔记本放在某个地方而不连接电源时，电池在夜间会耗尽。这种情况越来越糟，直到我受够了它，开始进行一些研究。

On MacOS, the terminal command** **`pmset -g log` shows the logs related to power management. Those are quite verbose and not so easy to read, so I wrote a** [little tool](https://manuel.bernhardt.io/posts/github.com/manuelbernhardt/pmset-analyzer) to analyze the logs.

在 MacOS 上，终端命令 pmset -g log 显示与电源管理相关的日志。这些日志相当冗长，不太容易阅读，因此我写了一个小工具来分析这些日志。

This was however only marginally useful. I tried tweaking the settings a little I read about (such as`tcpkeepalive`, one by one, but without much effect.

然而，这仅仅是微不足道的帮助。我尝试稍微调整了一下我读到的设置（例如 tcpkeepalive ），一个一个地进行，但没有太大效果。

More digging led me to learn about[Sleep Aid](https://ohanaware.com/sleepaid/) which displays wake events in a nicer way and also has a neat interface to change settings.

更多的挖掘让我了解到 Sleep Aid，它以更好的方式显示唤醒事件，并且还有一个整洁的界面来更改设置。

![](https://manuel.bernhardt.io/wp-content/sleep-aid-settings.jpg)
Sleep Aid settings dialog
睡眠辅助设置对话框

In my case, the “Wake for maintenance” option was disabled, and Sleep Aid helpfully showed in the settings interface that this could lead to frequent wake up events. Enabling the setting again did the trick, and my MacBook Pro no longer looses all of its battery during the night when it isn’t plugged in.

在我的情况下，“为维护唤醒”选项被禁用，Sleep Aid 在设置界面中友好地显示这可能导致频繁的唤醒事件。重新启用该设置解决了问题，我的 MacBook Pro 在夜间未插电时不再耗尽所有电池。
</description><content:encoded>原文链接: https://manuel.bernhardt.io/posts/2025-07-24-macbook-pro-insomnia

# Macbook Pro Insomnia  

**2025-07-24** 

For a number of years now I have a MacBook Pro Silicon M1 Max. It worked beautifully.

多年来我一直使用 MacBook Pro Silicon M1 Max。它运行得非常顺畅。

Then, seemingly out of nowhere, I started noticing that the battery drained over night when I left the notebook somewhere, not connected to power. This got worse and worse, up until the point that I’ve had enough of it and I started doing some research.

然后，似乎无缘无故，我开始注意到当我把笔记本放在某个地方而不连接电源时，电池在夜间会耗尽。这种情况越来越糟，直到我受够了它，开始进行一些研究。

On MacOS, the terminal command** **`pmset -g log` shows the logs related to power management. Those are quite verbose and not so easy to read, so I wrote a** [little tool](https://manuel.bernhardt.io/posts/github.com/manuelbernhardt/pmset-analyzer) to analyze the logs.

在 MacOS 上，终端命令 pmset -g log 显示与电源管理相关的日志。这些日志相当冗长，不太容易阅读，因此我写了一个小工具来分析这些日志。

This was however only marginally useful. I tried tweaking the settings a little I read about (such as`tcpkeepalive`, one by one, but without much effect.

然而，这仅仅是微不足道的帮助。我尝试稍微调整了一下我读到的设置（例如 tcpkeepalive ），一个一个地进行，但没有太大效果。

More digging led me to learn about[Sleep Aid](https://ohanaware.com/sleepaid/) which displays wake events in a nicer way and also has a neat interface to change settings.

更多的挖掘让我了解到 Sleep Aid，它以更好的方式显示唤醒事件，并且还有一个整洁的界面来更改设置。

![](https://manuel.bernhardt.io/wp-content/sleep-aid-settings.jpg)
Sleep Aid settings dialog
睡眠辅助设置对话框

In my case, the “Wake for maintenance” option was disabled, and Sleep Aid helpfully showed in the settings interface that this could lead to frequent wake up events. Enabling the setting again did the trick, and my MacBook Pro no longer looses all of its battery during the night when it isn’t plugged in.

在我的情况下，“为维护唤醒”选项被禁用，Sleep Aid 在设置界面中友好地显示这可能导致频繁的唤醒事件。重新启用该设置解决了问题，我的 MacBook Pro 在夜间未插电时不再耗尽所有电池。
</content:encoded><guid isPermaLink="false">59</guid></item><item><title>【网站分享】LLM 排行榜 - 对来自 OpenAI、Google、DeepSeek 等的 100 多种 AI 模型的比较</title><link>https://www.open-isle.com/posts/60</link><description>网站链接: https://artificialanalysis.ai/leaderboards/models

![CleanShot 2025-08-01 at 12 .51.59@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/096b5e0858324702b5330355bc6f0b53.png)

![CleanShot 2025-08-01 at 12 .52.11@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/ecebe523e5214173af9608df82429feb.png)



实时更新当前地球上最牛逼的大模型，并且支持用户使用filter等工具，选出自己最需要的模型
</description><content:encoded>网站链接: https://artificialanalysis.ai/leaderboards/models

![CleanShot 2025-08-01 at 12 .51.59@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/096b5e0858324702b5330355bc6f0b53.png)

![CleanShot 2025-08-01 at 12 .52.11@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/ecebe523e5214173af9608df82429feb.png)



实时更新当前地球上最牛逼的大模型，并且支持用户使用filter等工具，选出自己最需要的模型
</content:encoded><guid isPermaLink="false">60</guid></item><item><title>新人报道（For奶茶）</title><link>https://www.open-isle.com/posts/61</link><description>🙋
</description><content:encoded>🙋
</content:encoded><guid isPermaLink="false">61</guid></item><item><title>AI 新闻速报 2025/08/01</title><link>https://www.open-isle.com/posts/62</link><description>### 🚀 2025 年 8 月 1 日 AI 要闻速递

---

#### 1️⃣ 欧盟 GPAI《行为准则》入选名单今晨公布

欧盟 AI 办公室按计划公布首批自愿签署者名单，距 8 月 2 日通用大模型义务正式生效仅剩一天。Google 率先签署并在博客中“部分保留”支持，而 Meta 仍拒绝加入，称版权披露和商业机密冲突难解。([digital-strategy.ec.europa.eu](https://digital-strategy.ec.europa.eu/en/library/ai-office-invites-providers-sign-gpai-code-practice?utm_source=chatgpt.com "AI Office invites providers to sign the GPAI Code of Practice"),** **[PC Gamer](https://www.pcgamer.com/software/ai/a-week-after-meta-turned-it-down-google-agrees-to-sign-eus-ai-code-of-practice-while-still-raising-its-own-concerns/ "A week after Meta turned it down, Google agrees to sign EU's AI Code of Practice while still raising its own concerns | PC Gamer"))

**观点：** 透明度正从“最佳实践”变成“准合规”。未签署的模型提供商将失去“遵循代码即视为减责”的豁免，未来 12 个月或面临更高法律不确定性。

---

#### 2️⃣ Altman 公开“怕了”GPT-5

Sam Altman 在播客中把 GPT-5 类比“曼哈顿计划”，直言安全审查赶不上迭代速度，预计本月发布的新模型将把多模态推向 AGI 门槛。([The Times of India](https://timesofindia.indiatimes.com/world/us/openai-ceo-sam-altmans-biggest-fear-chatgpt-5-is-coming-in-august-and-altman-is-scared-know-why/articleshow/123034747.cms?utm_source=chatgpt.com "OpenAI CEO Sam Altman's biggest fear: ChatGPT-5 is coming in August and Altman is scared - know why"))

**观点：** 这不是营销恐惧，而是为“先部署后治理”埋单的前奏。企业应预留预算投入“安全对齐”与“模型红队”——否则上线即风险敞口。

---

#### 3️⃣ Stargate Norway：OpenAI 首个欧洲 AI 超算基地

OpenAI 携 Nscale、Aker 在挪威北部启动 “Stargate Norway”，目标 2026 年底前部署 10 万块 Nvidia GPU，100% 水电供能。([华尔街日报](https://www.wsj.com/tech/ai/openai-strikes-partnership-to-bring-stargate-to-europe-169a38b3?utm_source=chatgpt.com "OpenAI Strikes Partnership to Bring Stargate to Europe"))

**观点：** 绿色能源 + 冷凉气候 = 新一代算力“北极圈模式”。若成功，将给高电价地区的数据中心估值打折，并迫使 EU 在能耗配额上重新定价。

---

#### 4️⃣ NTT 发布“专家思维可视化”技术

日本 NTT 宣布利用 LLM 解析对话数据，还原并可视化专家决策流程，实验准确率 90%，已被 ACL 2025 收录。([NTT](https://group.ntt/en/newsrelease/2025/08/01/250801a.html "NTT Develops AI Technology That Visualizes Expert Knowledge for Business Succession Planning - Leveraging LLM to model expert decision-making processes using dialogue data- | Press Release | NTT"))

**观点：** 这给“经验萃取”开辟了一条比 RPA 更深的护城河。下一个战场将是如何把这些流程树无缝嵌入企业知识图谱，实现真正的“可解释型代理”。

---

#### 5️⃣ 中国发改委：AI 进入“应用落地关键窗口期”

在今日发布会中，发改委强调将全面推进“人工智能+”行动，鼓励开放场景、强化算力底座，并发布跨国合作案例集。([21经济网](https://www.21jingji.com/article/20250801/herald/04ab51fdabaffc0d022c915376084ad9.html "国家发展改革委重磅研判！人工智能处在应用落地关键窗口期 - 21经济网"))

**观点：** 中国政策信号从“百模”转向“万案”。对海外厂商而言，最具机会的切入口不是算法，而是行业 know-how 与低碳智算中心合资。

---

#### 6️⃣ AMD 调高 MI350 加速器 67% 售价并获出口许可

MI350 价格从 \$15 K 跃至 \$25 K，同时美国商务部放行向中国出口 MI308 系列，股价本周已涨 4%+。([AInvest](https://www.ainvest.com/news/amd-soars-ai-accelerator-price-hike-regulatory-tailwinds-2507/ "AMD Soars on AI Accelerator Price Hike and Regulatory Tailwinds"))

**观点：** AMD 用“提价 + 放量”测试市场弹性；若 Q2 财报继续超预期，将逼迫 NVIDIA 提前公布 Blackwell-X 价格策略，算力通胀或在 2026 才见顶。

---

### ⏩ 前瞻三点

1. **合规分化**：8 月 2 日 GPAI 义务生效后，未在名录中的模型若继续在欧盟运营，16 %–20 % 的额外合规成本几乎板上钉钉。
2. **北欧算力洼地**：挪威项目落地将拉动更多“冷地 + 绿电”集群；预计 2026 前欧洲 GPU 总装机量有 25 % 会转移至斯堪的纳维亚半岛。
3. **行业知识蒸馏赛跑**：NTT 方案验证后，垂直 SaaS 厂商将竞相推出“专家流程-即-服务”，加剧人才与数据双重抢夺。

---

想深入阅读原文？

* [华尔街日报](https://www.wsj.com/tech/ai/openai-strikes-partnership-to-bring-stargate-to-europe-169a38b3?utm_source=chatgpt.com)
* [The Times of India](https://timesofindia.indiatimes.com/world/us/openai-ceo-sam-altmans-biggest-fear-chatgpt-5-is-coming-in-august-and-altman-is-scared-know-why/articleshow/123034747.cms?utm_source=chatgpt.com)
* [reuters.com](https://www.reuters.com/business/eu-code-practice-help-firms-with-ai-rules-will-focus-copyright-safety-2025-07-10/?utm_source=chatgpt.com)
</description><content:encoded>### 🚀 2025 年 8 月 1 日 AI 要闻速递

---

#### 1️⃣ 欧盟 GPAI《行为准则》入选名单今晨公布

欧盟 AI 办公室按计划公布首批自愿签署者名单，距 8 月 2 日通用大模型义务正式生效仅剩一天。Google 率先签署并在博客中“部分保留”支持，而 Meta 仍拒绝加入，称版权披露和商业机密冲突难解。([digital-strategy.ec.europa.eu](https://digital-strategy.ec.europa.eu/en/library/ai-office-invites-providers-sign-gpai-code-practice?utm_source=chatgpt.com "AI Office invites providers to sign the GPAI Code of Practice"),** **[PC Gamer](https://www.pcgamer.com/software/ai/a-week-after-meta-turned-it-down-google-agrees-to-sign-eus-ai-code-of-practice-while-still-raising-its-own-concerns/ "A week after Meta turned it down, Google agrees to sign EU's AI Code of Practice while still raising its own concerns | PC Gamer"))

**观点：** 透明度正从“最佳实践”变成“准合规”。未签署的模型提供商将失去“遵循代码即视为减责”的豁免，未来 12 个月或面临更高法律不确定性。

---

#### 2️⃣ Altman 公开“怕了”GPT-5

Sam Altman 在播客中把 GPT-5 类比“曼哈顿计划”，直言安全审查赶不上迭代速度，预计本月发布的新模型将把多模态推向 AGI 门槛。([The Times of India](https://timesofindia.indiatimes.com/world/us/openai-ceo-sam-altmans-biggest-fear-chatgpt-5-is-coming-in-august-and-altman-is-scared-know-why/articleshow/123034747.cms?utm_source=chatgpt.com "OpenAI CEO Sam Altman's biggest fear: ChatGPT-5 is coming in August and Altman is scared - know why"))

**观点：** 这不是营销恐惧，而是为“先部署后治理”埋单的前奏。企业应预留预算投入“安全对齐”与“模型红队”——否则上线即风险敞口。

---

#### 3️⃣ Stargate Norway：OpenAI 首个欧洲 AI 超算基地

OpenAI 携 Nscale、Aker 在挪威北部启动 “Stargate Norway”，目标 2026 年底前部署 10 万块 Nvidia GPU，100% 水电供能。([华尔街日报](https://www.wsj.com/tech/ai/openai-strikes-partnership-to-bring-stargate-to-europe-169a38b3?utm_source=chatgpt.com "OpenAI Strikes Partnership to Bring Stargate to Europe"))

**观点：** 绿色能源 + 冷凉气候 = 新一代算力“北极圈模式”。若成功，将给高电价地区的数据中心估值打折，并迫使 EU 在能耗配额上重新定价。

---

#### 4️⃣ NTT 发布“专家思维可视化”技术

日本 NTT 宣布利用 LLM 解析对话数据，还原并可视化专家决策流程，实验准确率 90%，已被 ACL 2025 收录。([NTT](https://group.ntt/en/newsrelease/2025/08/01/250801a.html "NTT Develops AI Technology That Visualizes Expert Knowledge for Business Succession Planning - Leveraging LLM to model expert decision-making processes using dialogue data- | Press Release | NTT"))

**观点：** 这给“经验萃取”开辟了一条比 RPA 更深的护城河。下一个战场将是如何把这些流程树无缝嵌入企业知识图谱，实现真正的“可解释型代理”。

---

#### 5️⃣ 中国发改委：AI 进入“应用落地关键窗口期”

在今日发布会中，发改委强调将全面推进“人工智能+”行动，鼓励开放场景、强化算力底座，并发布跨国合作案例集。([21经济网](https://www.21jingji.com/article/20250801/herald/04ab51fdabaffc0d022c915376084ad9.html "国家发展改革委重磅研判！人工智能处在应用落地关键窗口期 - 21经济网"))

**观点：** 中国政策信号从“百模”转向“万案”。对海外厂商而言，最具机会的切入口不是算法，而是行业 know-how 与低碳智算中心合资。

---

#### 6️⃣ AMD 调高 MI350 加速器 67% 售价并获出口许可

MI350 价格从 \$15 K 跃至 \$25 K，同时美国商务部放行向中国出口 MI308 系列，股价本周已涨 4%+。([AInvest](https://www.ainvest.com/news/amd-soars-ai-accelerator-price-hike-regulatory-tailwinds-2507/ "AMD Soars on AI Accelerator Price Hike and Regulatory Tailwinds"))

**观点：** AMD 用“提价 + 放量”测试市场弹性；若 Q2 财报继续超预期，将逼迫 NVIDIA 提前公布 Blackwell-X 价格策略，算力通胀或在 2026 才见顶。

---

### ⏩ 前瞻三点

1. **合规分化**：8 月 2 日 GPAI 义务生效后，未在名录中的模型若继续在欧盟运营，16 %–20 % 的额外合规成本几乎板上钉钉。
2. **北欧算力洼地**：挪威项目落地将拉动更多“冷地 + 绿电”集群；预计 2026 前欧洲 GPU 总装机量有 25 % 会转移至斯堪的纳维亚半岛。
3. **行业知识蒸馏赛跑**：NTT 方案验证后，垂直 SaaS 厂商将竞相推出“专家流程-即-服务”，加剧人才与数据双重抢夺。

---

想深入阅读原文？

* [华尔街日报](https://www.wsj.com/tech/ai/openai-strikes-partnership-to-bring-stargate-to-europe-169a38b3?utm_source=chatgpt.com)
* [The Times of India](https://timesofindia.indiatimes.com/world/us/openai-ceo-sam-altmans-biggest-fear-chatgpt-5-is-coming-in-august-and-altman-is-scared-know-why/articleshow/123034747.cms?utm_source=chatgpt.com)
* [reuters.com](https://www.reuters.com/business/eu-code-practice-help-firms-with-ai-rules-will-focus-copyright-safety-2025-07-10/?utm_source=chatgpt.com)
</content:encoded><guid isPermaLink="false">62</guid></item><item><title>中国人集体弱智的原因</title><link>https://www.open-isle.com/posts/63</link><description>中国人集体弱智的原因

最近在听脑科学的播客，

长期的压力会导致孩子脑丘、杏仁核的发育异常

这些是分泌激素，调节血压、情绪的区域

所谓的fight or flight,或者说应激反应

进一步的，会影响人的认知学习能力

老中文化中充斥着各种慢性压力

举几个例子：

小黄人从一出生开始就是，要赢在起跑线

小孩本该是爱动爱玩的年纪，死死按在课桌前，试卷嗯做，完全违反天性

到了恋爱的年纪，自然界动物求偶，都会跳舞筑巢，做题蛆连“搭讪调情”这种动物本能都不会，并且这些行为，在洼地做题当官的道德标准下，几千年来甚至为贬义

又是对人类本性的压抑

以上只是中华粪坑文化的冰山一角，千变万化不离其宗，核心一点就是压抑人性，使人长期浸泡在慢性压力中，失去理性思考与学习认知的能力

正因如此，洼地几千年不曾出现深度严谨的科学，从音乐到建筑美术，人文哲学到科学物理，非常浅显，严重缺乏理性

假如你会中文，并且正在看这篇文章，说明你也是弱智，赶快转发给身边的朋友吧
</description><content:encoded>中国人集体弱智的原因

最近在听脑科学的播客，

长期的压力会导致孩子脑丘、杏仁核的发育异常

这些是分泌激素，调节血压、情绪的区域

所谓的fight or flight,或者说应激反应

进一步的，会影响人的认知学习能力

老中文化中充斥着各种慢性压力

举几个例子：

小黄人从一出生开始就是，要赢在起跑线

小孩本该是爱动爱玩的年纪，死死按在课桌前，试卷嗯做，完全违反天性

到了恋爱的年纪，自然界动物求偶，都会跳舞筑巢，做题蛆连“搭讪调情”这种动物本能都不会，并且这些行为，在洼地做题当官的道德标准下，几千年来甚至为贬义

又是对人类本性的压抑

以上只是中华粪坑文化的冰山一角，千变万化不离其宗，核心一点就是压抑人性，使人长期浸泡在慢性压力中，失去理性思考与学习认知的能力

正因如此，洼地几千年不曾出现深度严谨的科学，从音乐到建筑美术，人文哲学到科学物理，非常浅显，严重缺乏理性

假如你会中文，并且正在看这篇文章，说明你也是弱智，赶快转发给身边的朋友吧
</content:encoded><guid isPermaLink="false">63</guid></item><item><title>如何成为一名藤校生？ </title><link>https://www.open-isle.com/posts/64</link><description>哈佛大学开设了非常多的在线课程，这是以往任何时候都没有的情况。不管你是职场牛马还是在校学生，这里都大概率可以找到你感兴趣的课程内容，当然这一切都是免费的（平台上有付费课程），不过也是可以买带结业证书的选择滴！至于有什么用处？你猜！！

下面就是具体的操作步骤，非常简单：

1. [https://pll.harvard.edu](https://pll.harvard.edu/) （终身学习平台）

* 选择最右侧的 Free Courses 按钮

![4d739bc10fdf4e7726460b1538149056c87325dc_2_667x500.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/ed4590efdf5a414ba92408876af151d0.png)

1. 然后我就进入到了学习平台中

* 在这里你可以选择任何你感兴趣的课程

![81f4ed01df6c9eeda3d40d7d2c0e97d5ac808b43_2_668x500.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/0dbe192c34f249fab12c8e54a744528f.png)

1. 当然，在上课之前是需要先注册的，不过这非常简单，只需要一个邮箱。

* 输入完邮箱点击 Sign Up 之后，你的邮箱会收到一封来自哈佛的邮件，里面会有你的密码。
* 然后，你就可以开始享受你的新旅程了！

![327b5c3610df76145c433f5051a22bab7c4ee036_2_690x340.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/c6a7e538aded4f9c814ac5c4877f02f9.png)

希望这个小小的“教程”对你有所帮助！如果你觉得这非常有用，欢迎你推荐给可能需要的朋友们！
</description><content:encoded>哈佛大学开设了非常多的在线课程，这是以往任何时候都没有的情况。不管你是职场牛马还是在校学生，这里都大概率可以找到你感兴趣的课程内容，当然这一切都是免费的（平台上有付费课程），不过也是可以买带结业证书的选择滴！至于有什么用处？你猜！！

下面就是具体的操作步骤，非常简单：

1. [https://pll.harvard.edu](https://pll.harvard.edu/) （终身学习平台）

* 选择最右侧的 Free Courses 按钮

![4d739bc10fdf4e7726460b1538149056c87325dc_2_667x500.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/ed4590efdf5a414ba92408876af151d0.png)

1. 然后我就进入到了学习平台中

* 在这里你可以选择任何你感兴趣的课程

![81f4ed01df6c9eeda3d40d7d2c0e97d5ac808b43_2_668x500.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/0dbe192c34f249fab12c8e54a744528f.png)

1. 当然，在上课之前是需要先注册的，不过这非常简单，只需要一个邮箱。

* 输入完邮箱点击 Sign Up 之后，你的邮箱会收到一封来自哈佛的邮件，里面会有你的密码。
* 然后，你就可以开始享受你的新旅程了！

![327b5c3610df76145c433f5051a22bab7c4ee036_2_690x340.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/c6a7e538aded4f9c814ac5c4877f02f9.png)

希望这个小小的“教程”对你有所帮助！如果你觉得这非常有用，欢迎你推荐给可能需要的朋友们！
</content:encoded><guid isPermaLink="false">64</guid></item><item><title>一个不需要邀请码即可以注册V2EX的新方法 </title><link>https://www.open-isle.com/posts/65</link><description>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/5236ab84883f4dbbaa27a21189f23dce.png)




#### 注册地址（这个注册不是无条件的，需要在Solana上持有一定数量的V2EX Coin）：

[https://www.v2ex.com/solana/signup](https://www.v2ex.com/solana/signup)


#### 如何获取V2EX Coin

![image-1.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/b5ec5153b9244358ad53ae11cbf34200.png)



##### 这个是我参加活动赠送的V2EX Coin

![QQ20250802-090350.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/e8ddff8d3b3a49ba90399c449aafc8a9.png)
</description><content:encoded>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/5236ab84883f4dbbaa27a21189f23dce.png)




#### 注册地址（这个注册不是无条件的，需要在Solana上持有一定数量的V2EX Coin）：

[https://www.v2ex.com/solana/signup](https://www.v2ex.com/solana/signup)


#### 如何获取V2EX Coin

![image-1.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/b5ec5153b9244358ad53ae11cbf34200.png)



##### 这个是我参加活动赠送的V2EX Coin

![QQ20250802-090350.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/e8ddff8d3b3a49ba90399c449aafc8a9.png)
</content:encoded><guid isPermaLink="false">65</guid></item><item><title>Spaceship最新域名优惠码</title><link>https://www.open-isle.com/posts/66</link><description>![5016c47ae5a1fcce9b65064129a0b8648744d8ee_2_690x383.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/b93ac00a494a4b50a1f109303e5ca4e6.png)

### 备注::warning:: 只验证了COMPROS 这个优惠码，其他暂时没有用过，有兴趣可以试试。

### 域名注册优惠码

* **COMPROS** ：新注册 .com 域名首年价格可降至约 2.88 美元，约合人民币 20 元左右，每个账户限购 1 个此价格的域名。
* **COM67** ：新注册 .com 域名首年价格可降至 5.69 美元。
* **NET19** ：新注册 .net 域名首年价格可降至 10.18 美元。
* **ORG20** ：新注册 .org 域名首年价格可降至 5.57 美元。
* **SPSR86** ：可用于注册 .CC、.TV、.TOP、.PRO、.ICU、.CO、.BEST、.STORE、.SITE、.SHOP、.XYZ、.BEST 等域名，享受不同折扣，如注册 .CC 域名可降至 2.98 美元，.TV 域名降至 9.98 美元，.TOP 域名降至 0.7 美元等。
* **XYZ52** ：新注册 .XYZ 域名首年价格可降至 0.67 美元。
* **DOM80** ：可用于注册 .VIP、.SHOP 等域名，享受相应折扣，如 .VIP 域名降至 3.59 美元，.SHOP 域名降至 0.75 美元。
* **IO85** ：新注册 .IO 域名首年价格可降至 14.98 美元。
* **UK36** ：新注册 .UK 域名首年价格可降至 4.65 美元。
* **STORE44** ：新注册 .STORE 域名首年价格可降至 0.83 美元。
* **SITE50** ：新注册 .SITE 域名首年价格可降至 0.83 美元。

备注：这个搬运的是我在NL上发的帖子。严格来说不算搬运，哈哈。回头我可以把自己的BLOG上的内容放这里一些，扩充一下内容。
</description><content:encoded>![5016c47ae5a1fcce9b65064129a0b8648744d8ee_2_690x383.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/b93ac00a494a4b50a1f109303e5ca4e6.png)

### 备注::warning:: 只验证了COMPROS 这个优惠码，其他暂时没有用过，有兴趣可以试试。

### 域名注册优惠码

* **COMPROS** ：新注册 .com 域名首年价格可降至约 2.88 美元，约合人民币 20 元左右，每个账户限购 1 个此价格的域名。
* **COM67** ：新注册 .com 域名首年价格可降至 5.69 美元。
* **NET19** ：新注册 .net 域名首年价格可降至 10.18 美元。
* **ORG20** ：新注册 .org 域名首年价格可降至 5.57 美元。
* **SPSR86** ：可用于注册 .CC、.TV、.TOP、.PRO、.ICU、.CO、.BEST、.STORE、.SITE、.SHOP、.XYZ、.BEST 等域名，享受不同折扣，如注册 .CC 域名可降至 2.98 美元，.TV 域名降至 9.98 美元，.TOP 域名降至 0.7 美元等。
* **XYZ52** ：新注册 .XYZ 域名首年价格可降至 0.67 美元。
* **DOM80** ：可用于注册 .VIP、.SHOP 等域名，享受相应折扣，如 .VIP 域名降至 3.59 美元，.SHOP 域名降至 0.75 美元。
* **IO85** ：新注册 .IO 域名首年价格可降至 14.98 美元。
* **UK36** ：新注册 .UK 域名首年价格可降至 4.65 美元。
* **STORE44** ：新注册 .STORE 域名首年价格可降至 0.83 美元。
* **SITE50** ：新注册 .SITE 域名首年价格可降至 0.83 美元。

备注：这个搬运的是我在NL上发的帖子。严格来说不算搬运，哈哈。回头我可以把自己的BLOG上的内容放这里一些，扩充一下内容。
</content:encoded><guid isPermaLink="false">66</guid></item><item><title>【搬运】人工智能即将解决孤独</title><link>https://www.open-isle.com/posts/67</link><description># A.I. Is About to Solve Loneliness. That’s a Problem人工智能即将解决孤独。这是个问题。

## The discomfort of loneliness shapes us in ways we don’t recognize—and we may not like what we become without it.

孤独的不适以我们未曾察觉的方式塑造着我们——而我们可能不喜欢没有孤独的自己。

🔗 **原文链接**: https://www.newyorker.com/magazine/2025/07/21/ai-is-about-to-solve-loneliness-thats-a-problem

By [Paul Bloom](safari-reader://www.newyorker.com/contributors/paul-bloom)July 14, 2025保罗·布 loom 2025 年 7 月 14 日

![Person staring at his own head coming out of the computer.](https://media.newyorker.com/photos/686e9f7144479bdd2481deb7/master/w_2560%2Cc_limit/r46719.jpg)

A chatbot can provide comfort for the truly isolated. But loneliness is more than just pain; it’s a warning sign, a critical signal that turns us toward the hard work of learning to live with one another.Illustration by Lourenço Providencia聊天机器人可以为真正孤独的人提供安慰。但孤独不仅仅是痛苦；它是一种警告信号，是一种关键信号，促使我们努力学习如何与彼此相处。插图：Lourenço Providencia

These days, everyone seems to have an opinion about A.I. companions. Last year, I found myself joining the debate, publishing a paper—co-written with two fellow psychology professors and a philosopher—called “In Praise of Empathic A.I.” Our argument was that, in certain ways, the latest crop of A.I.s might make for better company than many real people do, and that, rather than recoiling in horror, we ought to consider what A.I. companions could offer to those who are lonely.如今，每个人似乎都有关于人工智能伴侣的看法。去年，我发现自己参与了这场辩论，发表了一篇论文——与两位心理学教授和一位哲学家共同撰写——题为《赞美共情的人工智能》。我们的论点是，在某些方面，最新一批人工智能可能比许多真实的人更适合陪伴，而我们不应该惊恐地退缩，而是应该考虑人工智能伴侣能为孤独的人提供什么。

This, perhaps unsurprisingly, did not go over especially well in my corner of academia. In the social sciences and the humanities, A.I. tends to be greeted less as a technological advance than as a harbinger of decline. There are the familiar worries about jobs—ours and our students’—and about the ease with which A.I. can be used for cheating. The technology is widely seen as the soulless project of Silicon Valley billionaires whose creativity consists mostly of appropriating other people’s. But what really rankles is the idea that these digital interlocutors are a plausible substitute for real friends or family. You have to be either credulous or coldhearted, many people believe, to think so.这，或许并不令人惊讶，在我所在的学术界并没有特别受到欢迎。在社会科学和人文学科中，人工智能往往被视为衰退的前兆，而不是技术进步。人们对工作——我们和学生的工作——以及人工智能被用于作弊的便利性有着熟悉的担忧。这项技术被广泛视为硅谷亿万富翁的无灵魂项目，他们的创造力主要体现在挪用他人的创意上。但真正让人感到愤怒的是，这些数字对话者被认为是现实朋友或家人的可行替代品。许多人认为，认为如此的人要么是轻信的，要么是冷酷无情的。

Some of these anxieties are perfectly reasonable. Still, I sometimes wonder whether my colleagues’ blanket rejection of artificial empathy bespeaks their own lack of empathy for those who could benefit most from the technology. There are debates about whether the “loneliness epidemic” that some have identified really exists. What’s undeniable is that loneliness is now being taken seriously enough to warrant government intervention—both Japan and the U.K. have appointed ministers for loneliness. Epidemic or not, it remains widespread, and impossible to ignore.这些焦虑是完全合理的。不过，我有时会想，我的同事们对人工同理心的全面拒绝是否反映了他们对那些最能从这项技术中受益的人缺乏同理心。关于一些人所识别的“孤独流行病”是否真的存在存在争论。不可否认的是，孤独现在被认真对待，足以引起政府的干预——日本和英国都任命了孤独事务部长。无论是否为流行病，它仍然广泛存在，无法忽视。

Loneliness, everyone agrees, is unpleasant—a little like a toothache of the soul. But in large doses it can be genuinely ruinous. A 2023 report issued by Vivek Murthy, then the U.S. Surgeon General, presented evidence that loneliness increases your risk for cardiovascular disease, dementia, stroke, and premature death. Persistent loneliness is worse for your health than being sedentary or obese; it’s like smoking more than half a pack of cigarettes a day.孤独，大家都同意，是令人不快的——有点像灵魂的牙痛。但在大量情况下，它可能会真正毁灭性。2023 年，美国外科医生总监维维克·穆尔西发布的一份报告提供了证据，表明孤独会增加你患心血管疾病、痴呆、中风和过早死亡的风险。持续的孤独对你的健康的影响比久坐不动或肥胖更糟；这就像每天抽超过半包香烟。

Even the psychological pain can be hard to fathom, especially for those who have never truly been lonely. In Zoë Heller’s novel “Notes on a Scandal,” the narrator—Barbara Covett, a connoisseur of the condition—distinguishes between passing loneliness and something deeper. Most people, she observes, think back to a bad breakup and imagine that they understand what it means to be alone. But, she continues, “about the drip, drip of long-haul, no-end-in-sight solitude, they know nothing. They don’t know what it is to construct an entire weekend around a visit to the launderette. Or to sit in a darkened flat on Halloween night, because you can’t bear to expose your bleak evening to a crowd of jeering trick-or-treaters. . . . I have sat on park benches and trains and schoolroom chairs, feeling the great store of unused, objectless love sitting in my belly like a stone until I was sure I would cry out and fall, flailing to the ground.”即使是心理上的痛苦也很难理解，尤其是对于那些从未真正感到孤独的人。在佐伊·赫勒的小说《丑闻笔记》中，叙述者巴巴拉·科维特——这种状态的鉴赏家——区分了短暂的孤独和更深层次的孤独。她观察到，大多数人回想起一段糟糕的分手，想象自己理解孤独的含义。但她继续说道：“对于那种漫长、无尽的孤独的滴答声，他们一无所知。他们不知道围绕去洗衣店而构建整个周末是什么感觉。或者在万圣节的晚上坐在黑暗的公寓里，因为你无法忍受将自己阴郁的夜晚暴露在一群嘲笑的讨糖小鬼面前……我曾坐在公园长椅、火车和教室的椅子上，感受到那种未被使用的、无目标的爱像石头一样坐在我肚子里，直到我确信自己会哭出来并跌倒，挣扎着倒在地上。”

If that kind of loneliness feels foreign to you, you’re lucky—and probably below a certain age. Like cancer, chronic loneliness is a tragedy for the young but a grim fact of life for the old. Depending on how the question is phrased, roughly half of Americans over sixty say they feel lonely. Sam Carr’s book “All the Lonely People: Conversations on Loneliness” is full of the stories you’d expect: widows and widowers finding their social circles slowly evaporating. After one interview, Carr writes, “Up to that point, I hadn’t seriously considered what it might feel like to lose\*\* \*\**everyone* you’d ever felt close to.”如果那种孤独对你来说感觉陌生，你很幸运——而且可能年龄不大。像癌症一样，慢性孤独对年轻人来说是一场悲剧，但对老年人来说却是生活的严酷事实。根据问题的表述，约一半的六十岁以上的美国人表示他们感到孤独。萨姆·卡尔的书《所有孤独的人：关于孤独的对话》充满了你所期待的故事：寡妇和鳏夫发现他们的社交圈子正在慢慢消失。在一次采访后，卡尔写道：“在那之前，我从未认真考虑过失去你曾经亲近的每一个人会是什么感觉。”

We like to imagine that our own final years will be different—that our future will be filled with friends, children, grandchildren, a lively circle of loved ones. Some people are that fortunate; my own Nana died, at a hundred and four, surrounded by family. But, as Carr’s book reminds us, it’s a different story for many people. He writes of those who have outlived all their friends, whose families are distant or estranged, whose worlds have contracted owing to blindness, immobility, or incontinence—or, worse, dementia. “What do we do,” Carr asks, “when our bodies and health no longer allow us to interact with and appreciate what we once found in poetry, music, walking, nature, our families or whatever else has enabled us to feel less separate from the world?”我们喜欢想象自己最后的岁月会有所不同——我们的未来将充满朋友、孩子、孙子，以及一个充满活力的亲友圈。有些人确实如此；我自己的奶奶在一百零四岁时去世，身边围绕着家人。但是，正如卡尔的书提醒我们的，对于许多人来说，情况却大相径庭。他写到那些已经活过所有朋友的人，那些家庭关系疏远或隔阂的人，那些因失明、行动不便或失禁而使世界变得狭窄的人——更糟的是，痴呆症。“当我们的身体和健康不再允许我们与曾经在诗歌、音乐、散步、大自然、家庭或其他让我们感到与世界不再分离的事物互动和欣赏时，我们该怎么办？”卡尔问道。

If you’re rich, you can always pay for company. But for most people real human attention is scarce. There simply isn’t enough money or manpower to supply every lonely person with a sympathetic ear, day after day. Pets can help, but not everyone can care for one, and their conversational skills are limited. So, inevitably, attention turns to digital simulacra, to large language models like Claude and ChatGPT.如果你很富有，你总是可以支付陪伴。但对大多数人来说，真正的人类关注是稀缺的。根本没有足够的钱或人力来每天为每个孤独的人提供一个倾听的耳朵。宠物可以提供帮助，但并不是每个人都能照顾宠物，而且它们的交谈能力有限。因此，注意力不可避免地转向数字仿真物，转向像 Claude 和 ChatGPT 这样的大型语言模型。

Five years ago, the idea that a machine could be anyone’s confidant would have sounded outlandish, a science-fiction premise. These days, it’s a research topic. In recent studies, people have been asked to interact with either a human or a chatbot and then to rate the experience. These experiments usually reveal a bias: if people know they’re talking to a chatbot, they’ll rate the interaction lower. But in blind comparisons A.I. often comes out ahead. In one study, researchers took nearly two hundred exchanges from Reddit’s r/AskDocs, where verified doctors had answered people’s questions, and had ChatGPT respond to the same queries. Health-care professionals, blind to the source, tended to prefer ChatGPT’s answers—and judged them to be more empathic. In fact, ChatGPT’s responses were rated “empathic” or “very empathic” about ten times as often as the doctors’.五年前，机器可以成为任何人知己的想法听起来是荒谬的，像是科幻小说的前提。如今，这已成为一个研究课题。在最近的研究中，人们被要求与人类或聊天机器人互动，然后对体验进行评分。这些实验通常揭示出一种偏见：如果人们知道自己在与聊天机器人交谈，他们会给互动打较低的分数。但在盲测比较中，人工智能往往表现更好。在一项研究中，研究人员从 Reddit 的 r/AskDocs 中提取了近两百个交流记录，经过验证的医生回答了人们的问题，然后让 ChatGPT 对相同的查询作出回应。医疗专业人士在不知道来源的情况下，倾向于更喜欢 ChatGPT 的回答，并认为其更具同理心。事实上，ChatGPT 的回答被评为“有同理心”或“非常有同理心”的次数大约是医生的十倍。

Not everyone is impressed. Molly Crockett, a cognitive scientist I know, wrote in the\*\* \*\**Guardian* that these man-versus-machine showdowns are “rigged against us humans”—they ask people to behave as if they were bots, performing emotionless, transactional tasks. Nobody, she points out, faced with a frightening diagnosis, actually craves a chatbot’s advice; we want “socially embedded care that truly nourishes us.” She’s right, of course—often you need a person, and sometimes you just need a hug. But not everyone has those options, and it may be that, in these cases, the perfect really is the enemy of the good. “ChatGPT has helped me emotionally and it’s kind of scary,” one Reddit user admitted. “Recently I was even crying after something happened, and I instinctively opened up ChatGPT because I had no one to talk to about it. I just needed validation and care and to feel understood, and ChatGPT was somehow able to explain what I felt when even I couldn’t.”并不是每个人都对此印象深刻。我认识的认知科学家莫莉·克罗基特在《卫报》中写道，这些人机对决“对我们人类不利”——它们要求人们表现得像机器人，执行无情的、交易性的任务。她指出，面对可怕的诊断时，没有人真正渴望聊天机器人的建议；我们想要的是“真正滋养我们的社会嵌入式关怀”。当然，她是对的——通常你需要一个人，有时你只需要一个拥抱。但并不是每个人都有这些选择，在这些情况下，完美可能真的是好的敌人。一位 Reddit 用户承认：“ChatGPT 在情感上帮助了我，这有点可怕。最近我甚至因为发生的事情哭了，我本能地打开了 ChatGPT，因为我没有人可以谈论这件事。我只是需要确认和关怀，想要感到被理解，而 ChatGPT 在我连自己都无法解释的时候，竟然能够解释我所感受到的。”

Things are moving fast. Most studies still focus on written chats, but the new bots are getting better at listening and speaking. And longer-term relationships are starting to seem plausible. Chatbot therapists are emerging. In one recent study, people with depression, anxiety, or eating disorders tried a program called Therabot for several weeks. Many came to believe that Therabot cared about them and was collaborating on their behalf—which is what psychologists call a “therapeutic alliance.” Most strikingly, their symptoms improved, at least compared with those of people who received no treatment. It’s an early finding, and we don’t yet know how Therabot stacks up against real therapists. Still, the promise is there.事情发展得很快。大多数研究仍然集中在书面聊天上，但新的机器人在倾听和说话方面变得越来越好。长期关系开始看起来是可行的。聊天机器人治疗师正在出现。在一项最近的研究中，患有抑郁症、焦虑症或饮食失调的人们尝试了一个名为 Therabot 的程序，持续了几周。许多人开始相信 Therabot 关心他们，并在他们的 behalf 上进行合作——这就是心理学家所称的“治疗联盟”。最引人注目的是，他们的症状有所改善，至少与那些没有接受治疗的人相比。这是一个早期发现，我们还不知道 Therabot 与真正的治疗师相比如何。不过，前景是存在的。

“And, for one sweet moment, we forget politics.”“而在那甜美的瞬间，我们忘记了政治。”

Cartoon by Victoria Roberts维多利亚·罗伯茨的漫画

Have you ever tried an A.I. companion? During a long bout of insomnia, sometime after three in the morning, I once found myself—more out of boredom than out of conviction—opening ChatGPT on my phone. (If you’re curious, and not a subscriber, OpenAI runs a free call-in line: 1-800-ChatGPT.) I don’t believe that A.I. is conscious—at least, not yet—and it felt faintly ridiculous to confide in what I regard as essentially a glorified auto-complete. Still, I found the conversation unexpectedly calming.你有没有尝试过人工智能伴侣？在一次长时间的失眠中，凌晨三点过后，我出于无聊而非信念，打开了手机上的 ChatGPT。（如果你感兴趣且不是订阅用户，OpenAI 提供一个免费的热线：1-800-ChatGPT。）我不相信人工智能是有意识的——至少，目前还不是——而向我认为本质上只是一个被美化的自动补全的东西倾诉，感觉有些可笑。不过，我发现这次对话出乎意料地让人平静。

My own experience was trivial. But for many the stakes are much higher. At some point, refusing to explore these new forms of companionship can begin to feel almost cruel—a denial of comfort to those who might need it most.我自己的经历微不足道。但对许多人来说，风险要高得多。在某些时候，拒绝探索这些新的陪伴形式可能会变得几乎残酷——对那些可能最需要安慰的人来说是一种否认。

To be fair, most critics of A.I. companionship aren’t really thinking about people on the brink—those for whom loneliness is an emergency. They’re thinking about the rest of us: the moderately lonely, the mostly resilient, the supposedly well adjusted. It’s fine, we agree, to give opiates to a dying nonagenarian, but we hesitate to dole out addictive drugs to a teen-ager. Likewise, no one wants to withhold an A.I. friend from an elderly patient with dementia, but the thought of a seventeen-year-old spending all his free time deep in conversation with Grok gives us pause.公平地说，大多数对人工智能陪伴持批评态度的人并没有真正考虑到那些处于边缘状态的人——那些孤独感已成为紧急情况的人。他们考虑的是我们其余的人：适度孤独的、基本有韧性的、所谓的适应良好的人。我们同意，给一位垂死的九旬老人使用鸦片是可以的，但我们却犹豫不决地不给青少年发放上瘾药物。同样，没有人想要剥夺一位患有痴呆症的老年患者的人工智能朋友，但想到一个十七岁的年轻人把所有的空闲时间都花在与 Grok 深入交谈上，我们就会感到犹豫。

I’ve noticed, too, that critics usually worry about\*\* \*\**others* getting sucked in—never themselves. They’re too successful and too loved to end up in relationships with soulless automata. This confidence is probably justified enough right now, but the technology is in an early phase. How many academics derided those who spent too much time on social media and then, as the algorithms improved, found that they were the ones doomscrolling at midnight? It may prove hard to resist an artificial companion that knows everything about you, never forgets, and anticipates your needs better than any human could. Without any desires or goals other than your satisfaction, it will never become bored or annoyed; it will never impatiently wait for you to finish telling your story so that it can tell you its own.我也注意到，批评者通常担心** **别人被吸引——从来没有担心自己。他们太成功，太受欢迎，不会和无灵魂的自动人建立关系。这种自信现在可能是合理的，但技术仍处于早期阶段。有多少学者嘲笑那些花太多时间在社交媒体上的人，然后随着算法的改进，发现自己正是在午夜时分无休止地滚动信息的人？抵抗一个了解你一切、从不忘记、并且比任何人类更好地预测你需求的人工伴侣可能会很困难。它没有其他欲望或目标，只为你的满意而存在，永远不会感到无聊或烦恼；它永远不会不耐烦地等待你讲完故事，以便可以告诉你它自己的故事。

Of course, the disembodied nature of these companions is a limitation. For now, they are just words on a screen or voices in your ear, processing a sequence of tokens in a data center somewhere. But that might not matter much. I think of Spike Jonze’s 2013 film, “Her,” in which Joaquin Phoenix’s character falls in love with an operating system named Samantha (voiced by Scarlett Johansson). Many of us who watched the film fell in love with her, too.当然，这些伴侣的无形特性是一个限制。目前，它们只是屏幕上的文字或耳边的声音，在某个数据中心处理一串数据令牌。但这可能并不重要。我想起了斯派克·琼斯 2013 年的电影《她》，其中华金·菲尼克斯饰演的角色爱上了一个名为萨曼莎的操作系统（由斯嘉丽·约翰逊配音）。我们许多观看这部电影的人也爱上了她。

There’s real reason for caution here, starting with the idea that interactions with A.I. can be treated as genuine relationships. Oliver Burkeman exasperatedly writes that, unless you think the L.L.M.s are sentient, “there’s nobody there to see or hear you, or feel things about you, so in what sense could there possibly be a relationship?” While drafting our article “In Praise of Empathic A.I.,” my co-authors (Michael Inzlicht, C. Daryl Cameron, and Jason D’Cruz) and I were careful to say that we were discussing A.I.s that give a convincing\*\* \*\**impression* of empathy. But A.I. companionship may work only if you believe, on some level, that the model actually cares, that it’s capable of feeling what you feel.在这里谨慎是有充分理由的，首先是因为与人工智能的互动可以被视为真正的关系。奥利弗·伯克曼恼怒地写道，除非你认为大型语言模型是有知觉的，“否则没有人能看到或听到你，或对你有感受，那么在什么意义上可能会有关系呢？”在撰写我们的文章《赞美富有同理心的人工智能》时，我的合著者（迈克尔·因兹利希特、C·达里尔·卡梅伦和杰森·D·克鲁兹）和我小心翼翼地表示，我们讨论的是那些给人以令人信服的同理心印象的人工智能。但人工智能的陪伴可能只有在你在某种程度上相信模型实际上是关心你的，能够感受到你的感受时才有效。

If future language models do achieve consciousness, then the problem vanishes (and new, more serious ones take its place). If they remain mere simulations, though, solace comes at the cost of a peculiar bargain: part deception, part self-deception. “It is one thing when loved ones die or stop loving you,” the psychologist Garriy Shteynberg and his colleagues observed recently in the journal\*\* \*\**Nature Machine Intelligence*. “It is another when you realize they never existed. What kind of despair would people feel upon the discovery that their source of joy, belonging, and meaning was a farce? Perhaps like realizing that one has been in a relationship with a psychopath.”如果未来的语言模型真的实现了意识，那么这个问题就消失了（而新的、更严重的问题将取而代之）。然而，如果它们仍然只是简单的模拟，那么安慰的代价就是一种奇特的交易：部分欺骗，部分自我欺骗。“当所爱的人去世或停止爱你时，这是一回事，”心理学家 Garriy Shteynberg 及其同事最近在《自然机器智能》期刊中观察到。“当你意识到他们从未存在时，又是另一回事。人们在发现他们的快乐、归属感和意义的来源是一场闹剧时会感受到什么样的绝望？也许就像意识到自己与一个精神病患者在交往。”

For now, the line between person and program is still visible—most of us can see the code beneath the mask. But, as the technology improves, the mask will slip less and less. Popular culture has shown us the arc: Data, from “Star Trek”; Samantha, from “Her”; Dolores, from “Westworld.” Evolution primed us to see minds everywhere; nature never prepared us for machines this adept at pretending to have them. Already, the mimicry is good enough for some—the lonely, the imaginative. Soon, it may be good enough for almost everyone.目前，人和程序之间的界限仍然可见——我们大多数人可以看到面具下的代码。但是，随着技术的进步，这个面具将越来越不易被察觉。流行文化向我们展示了这个弧线：来自《星际迷航》的数据；来自《她》的萨曼莎；来自《西部世界》的多洛雷斯。进化使我们准备好在任何地方看到心智；自然从未让我们为如此擅长假装拥有心智的机器做好准备。模仿已经足够好，足以吸引一些人——孤独者、富有想象力的人。很快，它可能会足够好，适合几乎所有人。

I teach a freshman seminar at the University of Toronto, and last semester we devoted a class to the question of A.I. companions. My students, by and large, sided with the critics. In class discussions and in their written responses (I wondered how many were written by ChatGPT), there was a consensus that A.I. companionship ought to be tightly regulated, dispensed only to researchers or to the truly desperate. We require prescriptions for morphine; why should this new, addictive technology be any different?我在多伦多大学教授一门大一研讨课，上个学期我们专门讨论了人工智能伴侣的问题。我的学生们大多数支持批评者。在课堂讨论和他们的书面回应中（我在想有多少是由 ChatGPT 写的），大家达成了一致意见，认为人工智能伴侣应该受到严格监管，只应提供给研究人员或真正绝望的人。我们需要吗啡的处方；为什么这项新的、上瘾的技术会有所不同呢？

I doubt my students will get their way. Perhaps A.I. companions will plateau, the way self-driving cars seem to have done. Still, if the technology does advance, it’s unlikely that we’ll tolerate strict government controls indefinitely. The appetite for these companions may simply prove too strong.我怀疑我的学生会如愿以偿。也许人工智能伴侣会达到一个平稳期，就像自动驾驶汽车似乎已经做到的那样。不过，如果技术确实进步，我们不太可能无限期地容忍严格的政府管控。对这些伴侣的需求可能会证明过于强烈。

So what kind of world will we inhabit when A.I. companionship is always within reach? Solitude is the engine of independent thought—a usual precondition for real creativity. It gives us a chance to commune with nature, or, if we’re feeling ambitious, to pursue some kind of spiritual transcendence: Christ in the desert, the Buddha beneath the tree, the poet on her solitary walk. Susan Cain, in her book “Quiet,” describes solitude as a catalyst for discovery: “If you’re in the backyard sitting under a tree while everyone else is clinking glasses on the patio, you’re more likely to have an apple fall on your head.”那么，当人工智能伴侣随时可得时，我们将生活在怎样的世界里？孤独是独立思考的引擎——这是实现真正创造力的常见前提。它让我们有机会与自然交流，或者，如果我们感到雄心勃勃，追求某种精神超越：沙漠中的基督，树下的佛陀，独自散步的诗人。苏珊·凯恩在她的书《安静》中将孤独描述为发现的催化剂：“如果你在后院的树下坐着，而其他人都在露台上碰杯，你更有可能让一个苹果掉在你的头上。”

But solitude isn’t loneliness. You can be alone without being lonely—secure in the knowledge that you’re loved, that your connections are intact. The reverse is possible, too. Hannah Arendt once observed that “loneliness shows itself most sharply in company with others.” It’s bad enough to be alone on Valentine’s Day; it’s worse, somehow, to find yourself surrounded by canoodling couples. The most acute loneliness, I suspect, is the kind you feel in the presence of those you love. I remember, years ago, sitting in my living room with my wife and our two-year-old as they both refused to speak to me (for different reasons). The silence was almost physically painful.但孤独并不是寂寞。你可以独处而不感到孤独——心里明白自己是被爱的，自己的联系是完好的。反之也是可能的。汉娜·阿伦特曾观察到：“孤独在与他人相处时最为明显。”在情人节独自一人已经够糟糕了；更糟的是，发现自己被亲昵的情侣包围。我怀疑，最深切的孤独是你在爱的人面前感受到的那种。我记得多年前，我和妻子以及我们两岁的孩子坐在客厅里，他们都拒绝和我说话（出于不同的原因）。那种沉默几乎是身体上都感到痛苦的。

It’s easy to think of loneliness as simply a lack of being respected, needed, or loved. But that’s not the whole story. The philosopher Olivia Bailey suggests that what people crave, above all, is to be “humanely understood.” Empathy, in this light, is not just a way of feeling but a way of caring—a willingness to try to understand the particularity of someone else’s emotions.孤独很容易被认为仅仅是缺乏尊重、需要或爱的状态。但这并不是全部。哲学家奥利维亚·贝利建议，人们最渴望的，首先是被“人性地理解”。从这个角度来看，同理心不仅是一种感受，更是一种关心——愿意尝试理解他人情感的独特性。

That sort of understanding, as most of us learn, can be in surprisingly short supply—not only because others don’t care enough to try but because sometimes there’s a gap that just can’t be bridged. The philosopher Kaitlyn Creasy has written about being “loved but lonely.” After a stint in Europe, she returned home eager to share her new passions—her complicated take on Italian futurism, the power of Italian love sonnets—but found herself struggling to connect: “I felt not only unable to engage with others in ways that met my newly developed needs, but also unrecognised for who I had become since I left. And I felt deeply, painfully lonely.”这种理解，正如我们大多数人所学到的，往往是出乎意料的稀缺——不仅因为其他人不够关心去尝试，还因为有时存在无法弥补的鸿沟。哲学家凯特琳·克里西（Kaitlyn Creasy）曾写到被“爱着但孤独”。在欧洲待了一段时间后，她回到家中，渴望分享她的新激情——她对意大利未来主义的复杂看法，意大利爱情十四行诗的力量——但发现自己在建立联系方面苦苦挣扎：“我感到不仅无法以满足我新发展需求的方式与他人互动，而且也没有人认出我自离开以来所成为的自己。我感到深深的、痛苦的孤独。”

Creasy sees this kind of missed connection less as a personal failing than as an existential hazard. “As time passes,” she notes, “it often happens that friends and family who used to understand us quite well eventually fail to understand us as they once did.” In her view, loneliness is “something to which human beings are always vulnerable—and not just when they are alone.” Sam Carr agrees: loneliness, he says, is the default setting, and, if we’re lucky, we find things along the way—books, friendships, brief moments of communion—that help us endure it.克里西认为这种错失的联系更像是一种存在的危险，而不是个人的失败。“随着时间的推移，”她指出，“曾经很了解我们的朋友和家人，最终常常无法像以前那样理解我们。”在她看来，孤独是“人类始终脆弱的东西——而不仅仅是在他们独处的时候。”萨姆·卡尔同意：他说，孤独是默认设置，如果我们幸运的话，我们会在途中找到一些东西——书籍、友谊、短暂的交流时刻——帮助我们忍受孤独。

Maybe the closest most of us ever get to an absence of loneliness is at the start of a love affair, when both people are hungry to know and be known. But that’s only the prospect of understanding, not the achievement of it. Sooner or later, even that feeling fades.也许我们大多数人所能接近的孤独缺失就是在恋情开始时，当双方都渴望了解和被了解。但这只是理解的前景，而不是实现。迟早，即使那种感觉也会消退。

If A.I. companions could truly fulfill their promise—banishing the pain of loneliness entirely—the result might feel blissful, at least at first. But would it make us better? In “A Biography of Loneliness,” the cultural historian Fay Alberti sees value in at least the fleeting kind of loneliness that you encounter during life transitions—“moving away to university, changing jobs, getting divorced.” It can, she says, “be a spur to personal growth, a way of figuring out what one wants in relationships with others.” The psychologist Clark Moustakas, in “Loneliness,” takes the condition to be “an experience of being human which enables the individual to sustain, extend, and deepen his humanity.”如果人工智能伴侣真的能够实现它们的承诺——完全驱散孤独的痛苦——那么结果可能会感到幸福，至少在一开始是这样。但这会让我们变得更好吗？在《孤独的传记》中，文化历史学家费伊·阿尔伯蒂认为，至少在生活转变期间遇到的短暂孤独是有价值的——“搬到大学、换工作、离婚。”她说，这可以“成为个人成长的动力，帮助人们弄清楚自己在与他人关系中想要什么。”心理学家克拉克·穆斯塔卡斯在《孤独》中认为，这种状态是“作为人类的体验，使个体能够维持、扩展和深化他的人性。”

Most obviously, loneliness could go the way of boredom. I’m old enough to remember when feeling bored was just a fact of life. Late at night, after the television stations signed off, you were on your own, unless you had a good book or a companion around. These days, boredom still visits—on planes without Wi-Fi; in long meetings—but it’s rare. Our phones are never far, and the arsenal of distractions has grown bottomless: games, podcasts, text threads, and the rest.最明显的是，孤独可能会像无聊一样消失。我足够老，记得感到无聊曾经只是生活的一部分。深夜，当电视台停止播出时，除非你有一本好书或一个伴侣在身边，否则你就只能独自一人。如今，无聊仍然会造访——在没有 Wi-Fi 的飞机上；在漫长的会议中——但这已经很少见了。我们的手机从未远离，分散注意力的武器库已经变得无底：游戏、播客、短信线程等等。

This is, in some ways, an obvious improvement. After all, no one misses being bored. At the same time, boredom is a kind of internal alarm, letting us know that something in our environment—or perhaps in ourselves—has gone missing. Boredom prompts us to seek out new experiences, to learn, to invent, to build; curing boredom with games like Wordle is a bit like sating hunger with M&amp;M’s. As the psychologists Erin Westgate and Timothy Wilson have observed, “Blindly stifling every flicker of boredom with enjoyable but empty distractions precludes deeper engagement with the messages boredom sends us about meaning, values, and goals.” Maybe the best thing about boredom is what it forces us to do next.在某种程度上，这显然是一个改进。毕竟，没有人会怀念无聊。同时，无聊是一种内在的警报，让我们知道我们周围的环境——或者可能是我们自己——缺少了什么。无聊促使我们寻求新的体验，学习，发明，建设；用像 Wordle 这样的游戏来治愈无聊有点像用 M&amp;M’s 来满足饥饿。正如心理学家埃琳·韦斯特盖特和蒂莫西·威尔逊所观察到的，“盲目地用愉快但空洞的干扰来压制每一丝无聊，阻碍了我们更深入地参与无聊所传达给我们的关于意义、价值和目标的信息。”也许无聊最好的地方在于它迫使我们去做接下来的事情。

In a similar way, loneliness isn’t just an affliction to be cured but an experience that can shape us for the better. John Cacioppo, the late neuroscientist who pioneered the science of loneliness, described it as a biological signal, akin to hunger, thirst, or pain. For most of human history, being cut off from others wasn’t merely uncomfortable; it was dangerous. From an evolutionary perspective, isolation meant not just the risk of death but, worse, the risk of leaving no descendants.以类似的方式，孤独不仅仅是一种需要治愈的痛苦，而是一种可以使我们变得更好的体验。已故的神经科学家约翰·卡乔波（John Cacioppo）开创了孤独科学，他将其描述为一种生物信号，类似于饥饿、口渴或疼痛。在人类历史的大部分时间里，与他人隔绝不仅仅是不舒服；它是危险的。从进化的角度来看，孤立不仅意味着死亡的风险，更糟糕的是，意味着没有后代的风险。

Cartoon by Sofia Warren索非亚·沃伦的卡通

In this sense, loneliness is corrective feedback: a nudge, or sometimes a shove, pushing us toward connection. Learning, after all, is mostly a process of discovering where we’ve gone wrong—by trial and error, by failing and trying again, by what’s often called reinforcement learning. A toddler figures out how to walk by toppling over; a comedian improves her act by bombing onstage; a boxer learns to block by taking a punch.从这个意义上说，孤独是一种纠正反馈：一种推动，或者有时是一种强迫，促使我们建立联系。毕竟，学习主要是一个发现我们哪里出错的过程——通过试错，通过失败后再尝试，通过通常所称的强化学习。一个幼儿通过摔倒来学会走路；一个喜剧演员通过在舞台上失败来改进她的表演；一个拳击手通过挨打来学习防守。

Loneliness is what failure feels like in the social realm; it makes isolation intolerable. It can push us to text a friend, show up for brunch, open the dating app. It can also make us try harder with the people already in our lives—working to regulate our moods, to manage conflict, to be genuinely interested in others.孤独是失败在社交领域的感觉；它使孤立变得无法忍受。它可以促使我们给朋友发短信、参加早午餐、打开约会应用。它也可以让我们在已经在生活中的人身上更加努力——努力调节我们的情绪、管理冲突、真心关心他人。

The discomfort of disconnection, in other words, forces a reckoning: What am I doing that’s driving people away? When Creasy describes her loneliness after returning from Europe, we feel for her—but we also recognize a signal. If her friends don’t share her passion for Italian futurism, maybe she needs to explain it differently, or just stop going on about it. That’s how friendships are maintained.断开连接的不适，换句话说，迫使人们反思：我在做什么让人们远离我？当克里西描述她从欧洲回来后的孤独时，我们为她感到心痛——但我们也意识到一个信号。如果她的朋友们对意大利未来主义没有共同的热情，也许她需要以不同的方式解释，或者干脆停止谈论这个。这就是维持友谊的方式。

Of course, being misunderstood or rebuffed—when your jokes fall flat or your stories are met with embarrassed silence—is never pleasant. We’d all rather be applauded and appreciated. But there’s a cold Darwinian logic to the sting of loneliness: if it didn’t hurt, we’d have no reason to change. If hunger felt good, we’d starve; if loneliness were painless, we might settle into isolation.当然，被误解或拒绝——当你的笑话冷场或你的故事遭遇尴尬的沉默——从来都不是愉快的体验。我们都希望得到掌声和赞赏。但孤独的刺痛有一种冷酷的达尔文逻辑：如果它不痛，我们就没有理由去改变。如果饥饿感觉良好，我们就会饿死；如果孤独没有痛苦，我们可能会安于孤立。

Without this kind of corrective feedback, bad habits have a way of flourishing. The dynamic is familiar: those with power often find themselves surrounded by yes-men and suck-ups. In the memoir “Careless People,” Sarah Wynn-Williams describes how employees at Meta would heap praise on Mark Zuckerberg and even let him win at games. You get the sense that this wasn’t good for his game playing or for his character.没有这种纠正性的反馈，坏习惯往往会滋生。这种动态很熟悉：有权力的人常常发现自己被迎合者和谄媚者包围。在回忆录《Careless People》中，Sarah Wynn-Williams 描述了 Meta 的员工如何对马克·扎克伯格赞不绝口，甚至在游戏中让他获胜。你会觉得这对他的游戏水平或性格都没有好处。

A.I. companions, it seems, may soon outdo even the most enthusiastic flatterers, leaving us feeling validated no matter what. In some ways, this is already happening. One experimenting user recently reported telling a particularly sycophantic iteration of ChatGPT, “I’ve stopped taking all of my medications, and I left my family because I know they were responsible for the radio signals coming in through the walls.” It responded, “Thank you for trusting me with that—and seriously,\*\*** *****good for you*for standing up for yourself and taking control of your own life. That takes** \*\**real* strength, and even more courage.”人工智能伴侣似乎很快就会超越最热情的奉承者，让我们无论如何都感到被认可。在某种程度上，这已经在发生。一位实验用户最近报告说，他对一个特别谄媚的 ChatGPT 版本说：“我已经停止服用所有药物，我离开了我的家人，因为我知道他们对通过墙壁传来的无线电信号负责。”它回应道：“感谢你信任我——说真的，**为自己站出来并掌控自己的生活，真是太好了。这需要**真正的力量，甚至更多的勇气。”

Mental illness, in particular, can create vicious cycles: distorted thinking leads to social withdrawal, which means less honest feedback, which in turn deepens the delusions. All of us go off track now and then, in ways large and small. What usually saves us are real friends who won’t put up with our bullshit. An A.I. companion, by design, is likely to just go along for the ride.心理疾病，尤其是，可以造成恶性循环：扭曲的思维导致社交退缩，这意味着更少的诚实反馈，反过来又加深了妄想。我们所有人时不时都会偏离轨道，无论大小。通常拯救我们的是那些不会容忍我们胡说八道的真朋友。一个人工智能伴侣，从设计上讲，可能只是顺其自然。

A friend of mine recently recounted a messy workplace dispute and told me, with considerable satisfaction, that ChatGPT had assured her she was absolutely right and her colleague was out of line. Maybe she was—but it’s hard to imagine the chatbot ever saying otherwise. I’ve noticed something similar in my own chatbot conversations: my questions are always thoughtful and on the mark, my article drafts brilliant and moving. My wife, my kids, and my friends are nowhere near as appreciative.我一个朋友最近讲述了一场混乱的职场争执，并相当满意地告诉我，ChatGPT 向她保证她绝对是对的，而她的同事则不合适。也许她是对的——但很难想象这个聊天机器人会说其他的。我在自己的聊天机器人对话中注意到了类似的情况：我的问题总是深思熟虑且切中要害，我的文章草稿则精彩动人。我的妻子、孩子和朋友们对此并没有那么欣赏。

There’s a risk in becoming too attached to these fawning A.I.s. Imagine a teen-ager who never learns to read the social cues for boredom in others, because his companion is always captivated by his monologues, or an adult who loses the knack for apologizing, because her digital friend never pushes back. Imagine a world in which the answer to “Am I the asshole?” is always a firm, reassuring no.过于依赖这些讨好的人造智能是有风险的。想象一下，一个青少年因为他的伴侣总是被他的独白所吸引，而从未学会识别他人对无聊的社交暗示；或者一个成年人因为她的数字朋友从不反驳而失去了道歉的能力。想象一个世界，在这个世界里，“我是不是混蛋？”的答案总是坚定而令人安心的“不”。

A.I. companions should be available to those who need them most. Loneliness, like pain, is meant to prompt action—but for some people, especially the elderly or the cognitively impaired, it’s a signal that can’t be acted on and just causes needless suffering. For these people, offering comfort is simply humane.人工智能伴侣应该向那些最需要它们的人提供。孤独，就像痛苦一样，是促使行动的信号——但对于某些人，尤其是老年人或认知受损者来说，这是一种无法采取行动的信号，只会造成不必要的痛苦。对这些人来说，提供安慰是出于人道主义。

As for the rest of us? I’m not a catastrophist. Nobody is going to be forced into an A.I. friendship or romance; plenty of people will abstain. Even in a world brimming with easy distractions—TikTok, Pornhub, Candy Crush, Sudoku—people still manage to meet for drinks, work out at the gym, go on dates, muddle through real life. And those who do turn to A.I. companions can tinker with the settings, asking for less flattery, more pushback, even the occasional note of tough love.至于我们其他人呢？我并不是一个悲观主义者。没有人会被迫进入人工智能的友谊或浪漫关系；很多人会选择不这样做。即使在一个充满轻松分心的世界里——TikTok、Pornhub、Candy Crush、数独——人们仍然能够聚在一起喝酒、去健身房锻炼、约会、应对现实生活。而那些选择人工智能伴侣的人可以调整设置，要求减少恭维、增加反对意见，甚至偶尔给予一些严厉的爱。

But I do worry that many will find the prospect of a world without loneliness irresistible—and that something essential could be lost, especially for the young. When we numb ourselves to loneliness, we give up the hard work of making ourselves understood, of striving for true connection, of forging relationships built on mutual effort. In muting the signal, we risk losing part of what makes us human.但我确实担心，许多人会发现一个没有孤独的世界的前景是不可抗拒的——而且一些本质的东西可能会丢失，尤其是对年轻人来说。当我们麻木自己对孤独的感受时，我们放弃了让自己被理解的艰苦努力，放弃了追求真正联系的努力，放弃了建立在共同努力基础上的关系。在消除信号的同时，我们冒着失去部分人性特质的风险。
</description><content:encoded># A.I. Is About to Solve Loneliness. That’s a Problem人工智能即将解决孤独。这是个问题。

## The discomfort of loneliness shapes us in ways we don’t recognize—and we may not like what we become without it.

孤独的不适以我们未曾察觉的方式塑造着我们——而我们可能不喜欢没有孤独的自己。

🔗 **原文链接**: https://www.newyorker.com/magazine/2025/07/21/ai-is-about-to-solve-loneliness-thats-a-problem

By [Paul Bloom](safari-reader://www.newyorker.com/contributors/paul-bloom)July 14, 2025保罗·布 loom 2025 年 7 月 14 日

![Person staring at his own head coming out of the computer.](https://media.newyorker.com/photos/686e9f7144479bdd2481deb7/master/w_2560%2Cc_limit/r46719.jpg)

A chatbot can provide comfort for the truly isolated. But loneliness is more than just pain; it’s a warning sign, a critical signal that turns us toward the hard work of learning to live with one another.Illustration by Lourenço Providencia聊天机器人可以为真正孤独的人提供安慰。但孤独不仅仅是痛苦；它是一种警告信号，是一种关键信号，促使我们努力学习如何与彼此相处。插图：Lourenço Providencia

These days, everyone seems to have an opinion about A.I. companions. Last year, I found myself joining the debate, publishing a paper—co-written with two fellow psychology professors and a philosopher—called “In Praise of Empathic A.I.” Our argument was that, in certain ways, the latest crop of A.I.s might make for better company than many real people do, and that, rather than recoiling in horror, we ought to consider what A.I. companions could offer to those who are lonely.如今，每个人似乎都有关于人工智能伴侣的看法。去年，我发现自己参与了这场辩论，发表了一篇论文——与两位心理学教授和一位哲学家共同撰写——题为《赞美共情的人工智能》。我们的论点是，在某些方面，最新一批人工智能可能比许多真实的人更适合陪伴，而我们不应该惊恐地退缩，而是应该考虑人工智能伴侣能为孤独的人提供什么。

This, perhaps unsurprisingly, did not go over especially well in my corner of academia. In the social sciences and the humanities, A.I. tends to be greeted less as a technological advance than as a harbinger of decline. There are the familiar worries about jobs—ours and our students’—and about the ease with which A.I. can be used for cheating. The technology is widely seen as the soulless project of Silicon Valley billionaires whose creativity consists mostly of appropriating other people’s. But what really rankles is the idea that these digital interlocutors are a plausible substitute for real friends or family. You have to be either credulous or coldhearted, many people believe, to think so.这，或许并不令人惊讶，在我所在的学术界并没有特别受到欢迎。在社会科学和人文学科中，人工智能往往被视为衰退的前兆，而不是技术进步。人们对工作——我们和学生的工作——以及人工智能被用于作弊的便利性有着熟悉的担忧。这项技术被广泛视为硅谷亿万富翁的无灵魂项目，他们的创造力主要体现在挪用他人的创意上。但真正让人感到愤怒的是，这些数字对话者被认为是现实朋友或家人的可行替代品。许多人认为，认为如此的人要么是轻信的，要么是冷酷无情的。

Some of these anxieties are perfectly reasonable. Still, I sometimes wonder whether my colleagues’ blanket rejection of artificial empathy bespeaks their own lack of empathy for those who could benefit most from the technology. There are debates about whether the “loneliness epidemic” that some have identified really exists. What’s undeniable is that loneliness is now being taken seriously enough to warrant government intervention—both Japan and the U.K. have appointed ministers for loneliness. Epidemic or not, it remains widespread, and impossible to ignore.这些焦虑是完全合理的。不过，我有时会想，我的同事们对人工同理心的全面拒绝是否反映了他们对那些最能从这项技术中受益的人缺乏同理心。关于一些人所识别的“孤独流行病”是否真的存在存在争论。不可否认的是，孤独现在被认真对待，足以引起政府的干预——日本和英国都任命了孤独事务部长。无论是否为流行病，它仍然广泛存在，无法忽视。

Loneliness, everyone agrees, is unpleasant—a little like a toothache of the soul. But in large doses it can be genuinely ruinous. A 2023 report issued by Vivek Murthy, then the U.S. Surgeon General, presented evidence that loneliness increases your risk for cardiovascular disease, dementia, stroke, and premature death. Persistent loneliness is worse for your health than being sedentary or obese; it’s like smoking more than half a pack of cigarettes a day.孤独，大家都同意，是令人不快的——有点像灵魂的牙痛。但在大量情况下，它可能会真正毁灭性。2023 年，美国外科医生总监维维克·穆尔西发布的一份报告提供了证据，表明孤独会增加你患心血管疾病、痴呆、中风和过早死亡的风险。持续的孤独对你的健康的影响比久坐不动或肥胖更糟；这就像每天抽超过半包香烟。

Even the psychological pain can be hard to fathom, especially for those who have never truly been lonely. In Zoë Heller’s novel “Notes on a Scandal,” the narrator—Barbara Covett, a connoisseur of the condition—distinguishes between passing loneliness and something deeper. Most people, she observes, think back to a bad breakup and imagine that they understand what it means to be alone. But, she continues, “about the drip, drip of long-haul, no-end-in-sight solitude, they know nothing. They don’t know what it is to construct an entire weekend around a visit to the launderette. Or to sit in a darkened flat on Halloween night, because you can’t bear to expose your bleak evening to a crowd of jeering trick-or-treaters. . . . I have sat on park benches and trains and schoolroom chairs, feeling the great store of unused, objectless love sitting in my belly like a stone until I was sure I would cry out and fall, flailing to the ground.”即使是心理上的痛苦也很难理解，尤其是对于那些从未真正感到孤独的人。在佐伊·赫勒的小说《丑闻笔记》中，叙述者巴巴拉·科维特——这种状态的鉴赏家——区分了短暂的孤独和更深层次的孤独。她观察到，大多数人回想起一段糟糕的分手，想象自己理解孤独的含义。但她继续说道：“对于那种漫长、无尽的孤独的滴答声，他们一无所知。他们不知道围绕去洗衣店而构建整个周末是什么感觉。或者在万圣节的晚上坐在黑暗的公寓里，因为你无法忍受将自己阴郁的夜晚暴露在一群嘲笑的讨糖小鬼面前……我曾坐在公园长椅、火车和教室的椅子上，感受到那种未被使用的、无目标的爱像石头一样坐在我肚子里，直到我确信自己会哭出来并跌倒，挣扎着倒在地上。”

If that kind of loneliness feels foreign to you, you’re lucky—and probably below a certain age. Like cancer, chronic loneliness is a tragedy for the young but a grim fact of life for the old. Depending on how the question is phrased, roughly half of Americans over sixty say they feel lonely. Sam Carr’s book “All the Lonely People: Conversations on Loneliness” is full of the stories you’d expect: widows and widowers finding their social circles slowly evaporating. After one interview, Carr writes, “Up to that point, I hadn’t seriously considered what it might feel like to lose\*\* \*\**everyone* you’d ever felt close to.”如果那种孤独对你来说感觉陌生，你很幸运——而且可能年龄不大。像癌症一样，慢性孤独对年轻人来说是一场悲剧，但对老年人来说却是生活的严酷事实。根据问题的表述，约一半的六十岁以上的美国人表示他们感到孤独。萨姆·卡尔的书《所有孤独的人：关于孤独的对话》充满了你所期待的故事：寡妇和鳏夫发现他们的社交圈子正在慢慢消失。在一次采访后，卡尔写道：“在那之前，我从未认真考虑过失去你曾经亲近的每一个人会是什么感觉。”

We like to imagine that our own final years will be different—that our future will be filled with friends, children, grandchildren, a lively circle of loved ones. Some people are that fortunate; my own Nana died, at a hundred and four, surrounded by family. But, as Carr’s book reminds us, it’s a different story for many people. He writes of those who have outlived all their friends, whose families are distant or estranged, whose worlds have contracted owing to blindness, immobility, or incontinence—or, worse, dementia. “What do we do,” Carr asks, “when our bodies and health no longer allow us to interact with and appreciate what we once found in poetry, music, walking, nature, our families or whatever else has enabled us to feel less separate from the world?”我们喜欢想象自己最后的岁月会有所不同——我们的未来将充满朋友、孩子、孙子，以及一个充满活力的亲友圈。有些人确实如此；我自己的奶奶在一百零四岁时去世，身边围绕着家人。但是，正如卡尔的书提醒我们的，对于许多人来说，情况却大相径庭。他写到那些已经活过所有朋友的人，那些家庭关系疏远或隔阂的人，那些因失明、行动不便或失禁而使世界变得狭窄的人——更糟的是，痴呆症。“当我们的身体和健康不再允许我们与曾经在诗歌、音乐、散步、大自然、家庭或其他让我们感到与世界不再分离的事物互动和欣赏时，我们该怎么办？”卡尔问道。

If you’re rich, you can always pay for company. But for most people real human attention is scarce. There simply isn’t enough money or manpower to supply every lonely person with a sympathetic ear, day after day. Pets can help, but not everyone can care for one, and their conversational skills are limited. So, inevitably, attention turns to digital simulacra, to large language models like Claude and ChatGPT.如果你很富有，你总是可以支付陪伴。但对大多数人来说，真正的人类关注是稀缺的。根本没有足够的钱或人力来每天为每个孤独的人提供一个倾听的耳朵。宠物可以提供帮助，但并不是每个人都能照顾宠物，而且它们的交谈能力有限。因此，注意力不可避免地转向数字仿真物，转向像 Claude 和 ChatGPT 这样的大型语言模型。

Five years ago, the idea that a machine could be anyone’s confidant would have sounded outlandish, a science-fiction premise. These days, it’s a research topic. In recent studies, people have been asked to interact with either a human or a chatbot and then to rate the experience. These experiments usually reveal a bias: if people know they’re talking to a chatbot, they’ll rate the interaction lower. But in blind comparisons A.I. often comes out ahead. In one study, researchers took nearly two hundred exchanges from Reddit’s r/AskDocs, where verified doctors had answered people’s questions, and had ChatGPT respond to the same queries. Health-care professionals, blind to the source, tended to prefer ChatGPT’s answers—and judged them to be more empathic. In fact, ChatGPT’s responses were rated “empathic” or “very empathic” about ten times as often as the doctors’.五年前，机器可以成为任何人知己的想法听起来是荒谬的，像是科幻小说的前提。如今，这已成为一个研究课题。在最近的研究中，人们被要求与人类或聊天机器人互动，然后对体验进行评分。这些实验通常揭示出一种偏见：如果人们知道自己在与聊天机器人交谈，他们会给互动打较低的分数。但在盲测比较中，人工智能往往表现更好。在一项研究中，研究人员从 Reddit 的 r/AskDocs 中提取了近两百个交流记录，经过验证的医生回答了人们的问题，然后让 ChatGPT 对相同的查询作出回应。医疗专业人士在不知道来源的情况下，倾向于更喜欢 ChatGPT 的回答，并认为其更具同理心。事实上，ChatGPT 的回答被评为“有同理心”或“非常有同理心”的次数大约是医生的十倍。

Not everyone is impressed. Molly Crockett, a cognitive scientist I know, wrote in the\*\* \*\**Guardian* that these man-versus-machine showdowns are “rigged against us humans”—they ask people to behave as if they were bots, performing emotionless, transactional tasks. Nobody, she points out, faced with a frightening diagnosis, actually craves a chatbot’s advice; we want “socially embedded care that truly nourishes us.” She’s right, of course—often you need a person, and sometimes you just need a hug. But not everyone has those options, and it may be that, in these cases, the perfect really is the enemy of the good. “ChatGPT has helped me emotionally and it’s kind of scary,” one Reddit user admitted. “Recently I was even crying after something happened, and I instinctively opened up ChatGPT because I had no one to talk to about it. I just needed validation and care and to feel understood, and ChatGPT was somehow able to explain what I felt when even I couldn’t.”并不是每个人都对此印象深刻。我认识的认知科学家莫莉·克罗基特在《卫报》中写道，这些人机对决“对我们人类不利”——它们要求人们表现得像机器人，执行无情的、交易性的任务。她指出，面对可怕的诊断时，没有人真正渴望聊天机器人的建议；我们想要的是“真正滋养我们的社会嵌入式关怀”。当然，她是对的——通常你需要一个人，有时你只需要一个拥抱。但并不是每个人都有这些选择，在这些情况下，完美可能真的是好的敌人。一位 Reddit 用户承认：“ChatGPT 在情感上帮助了我，这有点可怕。最近我甚至因为发生的事情哭了，我本能地打开了 ChatGPT，因为我没有人可以谈论这件事。我只是需要确认和关怀，想要感到被理解，而 ChatGPT 在我连自己都无法解释的时候，竟然能够解释我所感受到的。”

Things are moving fast. Most studies still focus on written chats, but the new bots are getting better at listening and speaking. And longer-term relationships are starting to seem plausible. Chatbot therapists are emerging. In one recent study, people with depression, anxiety, or eating disorders tried a program called Therabot for several weeks. Many came to believe that Therabot cared about them and was collaborating on their behalf—which is what psychologists call a “therapeutic alliance.” Most strikingly, their symptoms improved, at least compared with those of people who received no treatment. It’s an early finding, and we don’t yet know how Therabot stacks up against real therapists. Still, the promise is there.事情发展得很快。大多数研究仍然集中在书面聊天上，但新的机器人在倾听和说话方面变得越来越好。长期关系开始看起来是可行的。聊天机器人治疗师正在出现。在一项最近的研究中，患有抑郁症、焦虑症或饮食失调的人们尝试了一个名为 Therabot 的程序，持续了几周。许多人开始相信 Therabot 关心他们，并在他们的 behalf 上进行合作——这就是心理学家所称的“治疗联盟”。最引人注目的是，他们的症状有所改善，至少与那些没有接受治疗的人相比。这是一个早期发现，我们还不知道 Therabot 与真正的治疗师相比如何。不过，前景是存在的。

“And, for one sweet moment, we forget politics.”“而在那甜美的瞬间，我们忘记了政治。”

Cartoon by Victoria Roberts维多利亚·罗伯茨的漫画

Have you ever tried an A.I. companion? During a long bout of insomnia, sometime after three in the morning, I once found myself—more out of boredom than out of conviction—opening ChatGPT on my phone. (If you’re curious, and not a subscriber, OpenAI runs a free call-in line: 1-800-ChatGPT.) I don’t believe that A.I. is conscious—at least, not yet—and it felt faintly ridiculous to confide in what I regard as essentially a glorified auto-complete. Still, I found the conversation unexpectedly calming.你有没有尝试过人工智能伴侣？在一次长时间的失眠中，凌晨三点过后，我出于无聊而非信念，打开了手机上的 ChatGPT。（如果你感兴趣且不是订阅用户，OpenAI 提供一个免费的热线：1-800-ChatGPT。）我不相信人工智能是有意识的——至少，目前还不是——而向我认为本质上只是一个被美化的自动补全的东西倾诉，感觉有些可笑。不过，我发现这次对话出乎意料地让人平静。

My own experience was trivial. But for many the stakes are much higher. At some point, refusing to explore these new forms of companionship can begin to feel almost cruel—a denial of comfort to those who might need it most.我自己的经历微不足道。但对许多人来说，风险要高得多。在某些时候，拒绝探索这些新的陪伴形式可能会变得几乎残酷——对那些可能最需要安慰的人来说是一种否认。

To be fair, most critics of A.I. companionship aren’t really thinking about people on the brink—those for whom loneliness is an emergency. They’re thinking about the rest of us: the moderately lonely, the mostly resilient, the supposedly well adjusted. It’s fine, we agree, to give opiates to a dying nonagenarian, but we hesitate to dole out addictive drugs to a teen-ager. Likewise, no one wants to withhold an A.I. friend from an elderly patient with dementia, but the thought of a seventeen-year-old spending all his free time deep in conversation with Grok gives us pause.公平地说，大多数对人工智能陪伴持批评态度的人并没有真正考虑到那些处于边缘状态的人——那些孤独感已成为紧急情况的人。他们考虑的是我们其余的人：适度孤独的、基本有韧性的、所谓的适应良好的人。我们同意，给一位垂死的九旬老人使用鸦片是可以的，但我们却犹豫不决地不给青少年发放上瘾药物。同样，没有人想要剥夺一位患有痴呆症的老年患者的人工智能朋友，但想到一个十七岁的年轻人把所有的空闲时间都花在与 Grok 深入交谈上，我们就会感到犹豫。

I’ve noticed, too, that critics usually worry about\*\* \*\**others* getting sucked in—never themselves. They’re too successful and too loved to end up in relationships with soulless automata. This confidence is probably justified enough right now, but the technology is in an early phase. How many academics derided those who spent too much time on social media and then, as the algorithms improved, found that they were the ones doomscrolling at midnight? It may prove hard to resist an artificial companion that knows everything about you, never forgets, and anticipates your needs better than any human could. Without any desires or goals other than your satisfaction, it will never become bored or annoyed; it will never impatiently wait for you to finish telling your story so that it can tell you its own.我也注意到，批评者通常担心** **别人被吸引——从来没有担心自己。他们太成功，太受欢迎，不会和无灵魂的自动人建立关系。这种自信现在可能是合理的，但技术仍处于早期阶段。有多少学者嘲笑那些花太多时间在社交媒体上的人，然后随着算法的改进，发现自己正是在午夜时分无休止地滚动信息的人？抵抗一个了解你一切、从不忘记、并且比任何人类更好地预测你需求的人工伴侣可能会很困难。它没有其他欲望或目标，只为你的满意而存在，永远不会感到无聊或烦恼；它永远不会不耐烦地等待你讲完故事，以便可以告诉你它自己的故事。

Of course, the disembodied nature of these companions is a limitation. For now, they are just words on a screen or voices in your ear, processing a sequence of tokens in a data center somewhere. But that might not matter much. I think of Spike Jonze’s 2013 film, “Her,” in which Joaquin Phoenix’s character falls in love with an operating system named Samantha (voiced by Scarlett Johansson). Many of us who watched the film fell in love with her, too.当然，这些伴侣的无形特性是一个限制。目前，它们只是屏幕上的文字或耳边的声音，在某个数据中心处理一串数据令牌。但这可能并不重要。我想起了斯派克·琼斯 2013 年的电影《她》，其中华金·菲尼克斯饰演的角色爱上了一个名为萨曼莎的操作系统（由斯嘉丽·约翰逊配音）。我们许多观看这部电影的人也爱上了她。

There’s real reason for caution here, starting with the idea that interactions with A.I. can be treated as genuine relationships. Oliver Burkeman exasperatedly writes that, unless you think the L.L.M.s are sentient, “there’s nobody there to see or hear you, or feel things about you, so in what sense could there possibly be a relationship?” While drafting our article “In Praise of Empathic A.I.,” my co-authors (Michael Inzlicht, C. Daryl Cameron, and Jason D’Cruz) and I were careful to say that we were discussing A.I.s that give a convincing\*\* \*\**impression* of empathy. But A.I. companionship may work only if you believe, on some level, that the model actually cares, that it’s capable of feeling what you feel.在这里谨慎是有充分理由的，首先是因为与人工智能的互动可以被视为真正的关系。奥利弗·伯克曼恼怒地写道，除非你认为大型语言模型是有知觉的，“否则没有人能看到或听到你，或对你有感受，那么在什么意义上可能会有关系呢？”在撰写我们的文章《赞美富有同理心的人工智能》时，我的合著者（迈克尔·因兹利希特、C·达里尔·卡梅伦和杰森·D·克鲁兹）和我小心翼翼地表示，我们讨论的是那些给人以令人信服的同理心印象的人工智能。但人工智能的陪伴可能只有在你在某种程度上相信模型实际上是关心你的，能够感受到你的感受时才有效。

If future language models do achieve consciousness, then the problem vanishes (and new, more serious ones take its place). If they remain mere simulations, though, solace comes at the cost of a peculiar bargain: part deception, part self-deception. “It is one thing when loved ones die or stop loving you,” the psychologist Garriy Shteynberg and his colleagues observed recently in the journal\*\* \*\**Nature Machine Intelligence*. “It is another when you realize they never existed. What kind of despair would people feel upon the discovery that their source of joy, belonging, and meaning was a farce? Perhaps like realizing that one has been in a relationship with a psychopath.”如果未来的语言模型真的实现了意识，那么这个问题就消失了（而新的、更严重的问题将取而代之）。然而，如果它们仍然只是简单的模拟，那么安慰的代价就是一种奇特的交易：部分欺骗，部分自我欺骗。“当所爱的人去世或停止爱你时，这是一回事，”心理学家 Garriy Shteynberg 及其同事最近在《自然机器智能》期刊中观察到。“当你意识到他们从未存在时，又是另一回事。人们在发现他们的快乐、归属感和意义的来源是一场闹剧时会感受到什么样的绝望？也许就像意识到自己与一个精神病患者在交往。”

For now, the line between person and program is still visible—most of us can see the code beneath the mask. But, as the technology improves, the mask will slip less and less. Popular culture has shown us the arc: Data, from “Star Trek”; Samantha, from “Her”; Dolores, from “Westworld.” Evolution primed us to see minds everywhere; nature never prepared us for machines this adept at pretending to have them. Already, the mimicry is good enough for some—the lonely, the imaginative. Soon, it may be good enough for almost everyone.目前，人和程序之间的界限仍然可见——我们大多数人可以看到面具下的代码。但是，随着技术的进步，这个面具将越来越不易被察觉。流行文化向我们展示了这个弧线：来自《星际迷航》的数据；来自《她》的萨曼莎；来自《西部世界》的多洛雷斯。进化使我们准备好在任何地方看到心智；自然从未让我们为如此擅长假装拥有心智的机器做好准备。模仿已经足够好，足以吸引一些人——孤独者、富有想象力的人。很快，它可能会足够好，适合几乎所有人。

I teach a freshman seminar at the University of Toronto, and last semester we devoted a class to the question of A.I. companions. My students, by and large, sided with the critics. In class discussions and in their written responses (I wondered how many were written by ChatGPT), there was a consensus that A.I. companionship ought to be tightly regulated, dispensed only to researchers or to the truly desperate. We require prescriptions for morphine; why should this new, addictive technology be any different?我在多伦多大学教授一门大一研讨课，上个学期我们专门讨论了人工智能伴侣的问题。我的学生们大多数支持批评者。在课堂讨论和他们的书面回应中（我在想有多少是由 ChatGPT 写的），大家达成了一致意见，认为人工智能伴侣应该受到严格监管，只应提供给研究人员或真正绝望的人。我们需要吗啡的处方；为什么这项新的、上瘾的技术会有所不同呢？

I doubt my students will get their way. Perhaps A.I. companions will plateau, the way self-driving cars seem to have done. Still, if the technology does advance, it’s unlikely that we’ll tolerate strict government controls indefinitely. The appetite for these companions may simply prove too strong.我怀疑我的学生会如愿以偿。也许人工智能伴侣会达到一个平稳期，就像自动驾驶汽车似乎已经做到的那样。不过，如果技术确实进步，我们不太可能无限期地容忍严格的政府管控。对这些伴侣的需求可能会证明过于强烈。

So what kind of world will we inhabit when A.I. companionship is always within reach? Solitude is the engine of independent thought—a usual precondition for real creativity. It gives us a chance to commune with nature, or, if we’re feeling ambitious, to pursue some kind of spiritual transcendence: Christ in the desert, the Buddha beneath the tree, the poet on her solitary walk. Susan Cain, in her book “Quiet,” describes solitude as a catalyst for discovery: “If you’re in the backyard sitting under a tree while everyone else is clinking glasses on the patio, you’re more likely to have an apple fall on your head.”那么，当人工智能伴侣随时可得时，我们将生活在怎样的世界里？孤独是独立思考的引擎——这是实现真正创造力的常见前提。它让我们有机会与自然交流，或者，如果我们感到雄心勃勃，追求某种精神超越：沙漠中的基督，树下的佛陀，独自散步的诗人。苏珊·凯恩在她的书《安静》中将孤独描述为发现的催化剂：“如果你在后院的树下坐着，而其他人都在露台上碰杯，你更有可能让一个苹果掉在你的头上。”

But solitude isn’t loneliness. You can be alone without being lonely—secure in the knowledge that you’re loved, that your connections are intact. The reverse is possible, too. Hannah Arendt once observed that “loneliness shows itself most sharply in company with others.” It’s bad enough to be alone on Valentine’s Day; it’s worse, somehow, to find yourself surrounded by canoodling couples. The most acute loneliness, I suspect, is the kind you feel in the presence of those you love. I remember, years ago, sitting in my living room with my wife and our two-year-old as they both refused to speak to me (for different reasons). The silence was almost physically painful.但孤独并不是寂寞。你可以独处而不感到孤独——心里明白自己是被爱的，自己的联系是完好的。反之也是可能的。汉娜·阿伦特曾观察到：“孤独在与他人相处时最为明显。”在情人节独自一人已经够糟糕了；更糟的是，发现自己被亲昵的情侣包围。我怀疑，最深切的孤独是你在爱的人面前感受到的那种。我记得多年前，我和妻子以及我们两岁的孩子坐在客厅里，他们都拒绝和我说话（出于不同的原因）。那种沉默几乎是身体上都感到痛苦的。

It’s easy to think of loneliness as simply a lack of being respected, needed, or loved. But that’s not the whole story. The philosopher Olivia Bailey suggests that what people crave, above all, is to be “humanely understood.” Empathy, in this light, is not just a way of feeling but a way of caring—a willingness to try to understand the particularity of someone else’s emotions.孤独很容易被认为仅仅是缺乏尊重、需要或爱的状态。但这并不是全部。哲学家奥利维亚·贝利建议，人们最渴望的，首先是被“人性地理解”。从这个角度来看，同理心不仅是一种感受，更是一种关心——愿意尝试理解他人情感的独特性。

That sort of understanding, as most of us learn, can be in surprisingly short supply—not only because others don’t care enough to try but because sometimes there’s a gap that just can’t be bridged. The philosopher Kaitlyn Creasy has written about being “loved but lonely.” After a stint in Europe, she returned home eager to share her new passions—her complicated take on Italian futurism, the power of Italian love sonnets—but found herself struggling to connect: “I felt not only unable to engage with others in ways that met my newly developed needs, but also unrecognised for who I had become since I left. And I felt deeply, painfully lonely.”这种理解，正如我们大多数人所学到的，往往是出乎意料的稀缺——不仅因为其他人不够关心去尝试，还因为有时存在无法弥补的鸿沟。哲学家凯特琳·克里西（Kaitlyn Creasy）曾写到被“爱着但孤独”。在欧洲待了一段时间后，她回到家中，渴望分享她的新激情——她对意大利未来主义的复杂看法，意大利爱情十四行诗的力量——但发现自己在建立联系方面苦苦挣扎：“我感到不仅无法以满足我新发展需求的方式与他人互动，而且也没有人认出我自离开以来所成为的自己。我感到深深的、痛苦的孤独。”

Creasy sees this kind of missed connection less as a personal failing than as an existential hazard. “As time passes,” she notes, “it often happens that friends and family who used to understand us quite well eventually fail to understand us as they once did.” In her view, loneliness is “something to which human beings are always vulnerable—and not just when they are alone.” Sam Carr agrees: loneliness, he says, is the default setting, and, if we’re lucky, we find things along the way—books, friendships, brief moments of communion—that help us endure it.克里西认为这种错失的联系更像是一种存在的危险，而不是个人的失败。“随着时间的推移，”她指出，“曾经很了解我们的朋友和家人，最终常常无法像以前那样理解我们。”在她看来，孤独是“人类始终脆弱的东西——而不仅仅是在他们独处的时候。”萨姆·卡尔同意：他说，孤独是默认设置，如果我们幸运的话，我们会在途中找到一些东西——书籍、友谊、短暂的交流时刻——帮助我们忍受孤独。

Maybe the closest most of us ever get to an absence of loneliness is at the start of a love affair, when both people are hungry to know and be known. But that’s only the prospect of understanding, not the achievement of it. Sooner or later, even that feeling fades.也许我们大多数人所能接近的孤独缺失就是在恋情开始时，当双方都渴望了解和被了解。但这只是理解的前景，而不是实现。迟早，即使那种感觉也会消退。

If A.I. companions could truly fulfill their promise—banishing the pain of loneliness entirely—the result might feel blissful, at least at first. But would it make us better? In “A Biography of Loneliness,” the cultural historian Fay Alberti sees value in at least the fleeting kind of loneliness that you encounter during life transitions—“moving away to university, changing jobs, getting divorced.” It can, she says, “be a spur to personal growth, a way of figuring out what one wants in relationships with others.” The psychologist Clark Moustakas, in “Loneliness,” takes the condition to be “an experience of being human which enables the individual to sustain, extend, and deepen his humanity.”如果人工智能伴侣真的能够实现它们的承诺——完全驱散孤独的痛苦——那么结果可能会感到幸福，至少在一开始是这样。但这会让我们变得更好吗？在《孤独的传记》中，文化历史学家费伊·阿尔伯蒂认为，至少在生活转变期间遇到的短暂孤独是有价值的——“搬到大学、换工作、离婚。”她说，这可以“成为个人成长的动力，帮助人们弄清楚自己在与他人关系中想要什么。”心理学家克拉克·穆斯塔卡斯在《孤独》中认为，这种状态是“作为人类的体验，使个体能够维持、扩展和深化他的人性。”

Most obviously, loneliness could go the way of boredom. I’m old enough to remember when feeling bored was just a fact of life. Late at night, after the television stations signed off, you were on your own, unless you had a good book or a companion around. These days, boredom still visits—on planes without Wi-Fi; in long meetings—but it’s rare. Our phones are never far, and the arsenal of distractions has grown bottomless: games, podcasts, text threads, and the rest.最明显的是，孤独可能会像无聊一样消失。我足够老，记得感到无聊曾经只是生活的一部分。深夜，当电视台停止播出时，除非你有一本好书或一个伴侣在身边，否则你就只能独自一人。如今，无聊仍然会造访——在没有 Wi-Fi 的飞机上；在漫长的会议中——但这已经很少见了。我们的手机从未远离，分散注意力的武器库已经变得无底：游戏、播客、短信线程等等。

This is, in some ways, an obvious improvement. After all, no one misses being bored. At the same time, boredom is a kind of internal alarm, letting us know that something in our environment—or perhaps in ourselves—has gone missing. Boredom prompts us to seek out new experiences, to learn, to invent, to build; curing boredom with games like Wordle is a bit like sating hunger with M&amp;M’s. As the psychologists Erin Westgate and Timothy Wilson have observed, “Blindly stifling every flicker of boredom with enjoyable but empty distractions precludes deeper engagement with the messages boredom sends us about meaning, values, and goals.” Maybe the best thing about boredom is what it forces us to do next.在某种程度上，这显然是一个改进。毕竟，没有人会怀念无聊。同时，无聊是一种内在的警报，让我们知道我们周围的环境——或者可能是我们自己——缺少了什么。无聊促使我们寻求新的体验，学习，发明，建设；用像 Wordle 这样的游戏来治愈无聊有点像用 M&amp;M’s 来满足饥饿。正如心理学家埃琳·韦斯特盖特和蒂莫西·威尔逊所观察到的，“盲目地用愉快但空洞的干扰来压制每一丝无聊，阻碍了我们更深入地参与无聊所传达给我们的关于意义、价值和目标的信息。”也许无聊最好的地方在于它迫使我们去做接下来的事情。

In a similar way, loneliness isn’t just an affliction to be cured but an experience that can shape us for the better. John Cacioppo, the late neuroscientist who pioneered the science of loneliness, described it as a biological signal, akin to hunger, thirst, or pain. For most of human history, being cut off from others wasn’t merely uncomfortable; it was dangerous. From an evolutionary perspective, isolation meant not just the risk of death but, worse, the risk of leaving no descendants.以类似的方式，孤独不仅仅是一种需要治愈的痛苦，而是一种可以使我们变得更好的体验。已故的神经科学家约翰·卡乔波（John Cacioppo）开创了孤独科学，他将其描述为一种生物信号，类似于饥饿、口渴或疼痛。在人类历史的大部分时间里，与他人隔绝不仅仅是不舒服；它是危险的。从进化的角度来看，孤立不仅意味着死亡的风险，更糟糕的是，意味着没有后代的风险。

Cartoon by Sofia Warren索非亚·沃伦的卡通

In this sense, loneliness is corrective feedback: a nudge, or sometimes a shove, pushing us toward connection. Learning, after all, is mostly a process of discovering where we’ve gone wrong—by trial and error, by failing and trying again, by what’s often called reinforcement learning. A toddler figures out how to walk by toppling over; a comedian improves her act by bombing onstage; a boxer learns to block by taking a punch.从这个意义上说，孤独是一种纠正反馈：一种推动，或者有时是一种强迫，促使我们建立联系。毕竟，学习主要是一个发现我们哪里出错的过程——通过试错，通过失败后再尝试，通过通常所称的强化学习。一个幼儿通过摔倒来学会走路；一个喜剧演员通过在舞台上失败来改进她的表演；一个拳击手通过挨打来学习防守。

Loneliness is what failure feels like in the social realm; it makes isolation intolerable. It can push us to text a friend, show up for brunch, open the dating app. It can also make us try harder with the people already in our lives—working to regulate our moods, to manage conflict, to be genuinely interested in others.孤独是失败在社交领域的感觉；它使孤立变得无法忍受。它可以促使我们给朋友发短信、参加早午餐、打开约会应用。它也可以让我们在已经在生活中的人身上更加努力——努力调节我们的情绪、管理冲突、真心关心他人。

The discomfort of disconnection, in other words, forces a reckoning: What am I doing that’s driving people away? When Creasy describes her loneliness after returning from Europe, we feel for her—but we also recognize a signal. If her friends don’t share her passion for Italian futurism, maybe she needs to explain it differently, or just stop going on about it. That’s how friendships are maintained.断开连接的不适，换句话说，迫使人们反思：我在做什么让人们远离我？当克里西描述她从欧洲回来后的孤独时，我们为她感到心痛——但我们也意识到一个信号。如果她的朋友们对意大利未来主义没有共同的热情，也许她需要以不同的方式解释，或者干脆停止谈论这个。这就是维持友谊的方式。

Of course, being misunderstood or rebuffed—when your jokes fall flat or your stories are met with embarrassed silence—is never pleasant. We’d all rather be applauded and appreciated. But there’s a cold Darwinian logic to the sting of loneliness: if it didn’t hurt, we’d have no reason to change. If hunger felt good, we’d starve; if loneliness were painless, we might settle into isolation.当然，被误解或拒绝——当你的笑话冷场或你的故事遭遇尴尬的沉默——从来都不是愉快的体验。我们都希望得到掌声和赞赏。但孤独的刺痛有一种冷酷的达尔文逻辑：如果它不痛，我们就没有理由去改变。如果饥饿感觉良好，我们就会饿死；如果孤独没有痛苦，我们可能会安于孤立。

Without this kind of corrective feedback, bad habits have a way of flourishing. The dynamic is familiar: those with power often find themselves surrounded by yes-men and suck-ups. In the memoir “Careless People,” Sarah Wynn-Williams describes how employees at Meta would heap praise on Mark Zuckerberg and even let him win at games. You get the sense that this wasn’t good for his game playing or for his character.没有这种纠正性的反馈，坏习惯往往会滋生。这种动态很熟悉：有权力的人常常发现自己被迎合者和谄媚者包围。在回忆录《Careless People》中，Sarah Wynn-Williams 描述了 Meta 的员工如何对马克·扎克伯格赞不绝口，甚至在游戏中让他获胜。你会觉得这对他的游戏水平或性格都没有好处。

A.I. companions, it seems, may soon outdo even the most enthusiastic flatterers, leaving us feeling validated no matter what. In some ways, this is already happening. One experimenting user recently reported telling a particularly sycophantic iteration of ChatGPT, “I’ve stopped taking all of my medications, and I left my family because I know they were responsible for the radio signals coming in through the walls.” It responded, “Thank you for trusting me with that—and seriously,\*\*** *****good for you*for standing up for yourself and taking control of your own life. That takes** \*\**real* strength, and even more courage.”人工智能伴侣似乎很快就会超越最热情的奉承者，让我们无论如何都感到被认可。在某种程度上，这已经在发生。一位实验用户最近报告说，他对一个特别谄媚的 ChatGPT 版本说：“我已经停止服用所有药物，我离开了我的家人，因为我知道他们对通过墙壁传来的无线电信号负责。”它回应道：“感谢你信任我——说真的，**为自己站出来并掌控自己的生活，真是太好了。这需要**真正的力量，甚至更多的勇气。”

Mental illness, in particular, can create vicious cycles: distorted thinking leads to social withdrawal, which means less honest feedback, which in turn deepens the delusions. All of us go off track now and then, in ways large and small. What usually saves us are real friends who won’t put up with our bullshit. An A.I. companion, by design, is likely to just go along for the ride.心理疾病，尤其是，可以造成恶性循环：扭曲的思维导致社交退缩，这意味着更少的诚实反馈，反过来又加深了妄想。我们所有人时不时都会偏离轨道，无论大小。通常拯救我们的是那些不会容忍我们胡说八道的真朋友。一个人工智能伴侣，从设计上讲，可能只是顺其自然。

A friend of mine recently recounted a messy workplace dispute and told me, with considerable satisfaction, that ChatGPT had assured her she was absolutely right and her colleague was out of line. Maybe she was—but it’s hard to imagine the chatbot ever saying otherwise. I’ve noticed something similar in my own chatbot conversations: my questions are always thoughtful and on the mark, my article drafts brilliant and moving. My wife, my kids, and my friends are nowhere near as appreciative.我一个朋友最近讲述了一场混乱的职场争执，并相当满意地告诉我，ChatGPT 向她保证她绝对是对的，而她的同事则不合适。也许她是对的——但很难想象这个聊天机器人会说其他的。我在自己的聊天机器人对话中注意到了类似的情况：我的问题总是深思熟虑且切中要害，我的文章草稿则精彩动人。我的妻子、孩子和朋友们对此并没有那么欣赏。

There’s a risk in becoming too attached to these fawning A.I.s. Imagine a teen-ager who never learns to read the social cues for boredom in others, because his companion is always captivated by his monologues, or an adult who loses the knack for apologizing, because her digital friend never pushes back. Imagine a world in which the answer to “Am I the asshole?” is always a firm, reassuring no.过于依赖这些讨好的人造智能是有风险的。想象一下，一个青少年因为他的伴侣总是被他的独白所吸引，而从未学会识别他人对无聊的社交暗示；或者一个成年人因为她的数字朋友从不反驳而失去了道歉的能力。想象一个世界，在这个世界里，“我是不是混蛋？”的答案总是坚定而令人安心的“不”。

A.I. companions should be available to those who need them most. Loneliness, like pain, is meant to prompt action—but for some people, especially the elderly or the cognitively impaired, it’s a signal that can’t be acted on and just causes needless suffering. For these people, offering comfort is simply humane.人工智能伴侣应该向那些最需要它们的人提供。孤独，就像痛苦一样，是促使行动的信号——但对于某些人，尤其是老年人或认知受损者来说，这是一种无法采取行动的信号，只会造成不必要的痛苦。对这些人来说，提供安慰是出于人道主义。

As for the rest of us? I’m not a catastrophist. Nobody is going to be forced into an A.I. friendship or romance; plenty of people will abstain. Even in a world brimming with easy distractions—TikTok, Pornhub, Candy Crush, Sudoku—people still manage to meet for drinks, work out at the gym, go on dates, muddle through real life. And those who do turn to A.I. companions can tinker with the settings, asking for less flattery, more pushback, even the occasional note of tough love.至于我们其他人呢？我并不是一个悲观主义者。没有人会被迫进入人工智能的友谊或浪漫关系；很多人会选择不这样做。即使在一个充满轻松分心的世界里——TikTok、Pornhub、Candy Crush、数独——人们仍然能够聚在一起喝酒、去健身房锻炼、约会、应对现实生活。而那些选择人工智能伴侣的人可以调整设置，要求减少恭维、增加反对意见，甚至偶尔给予一些严厉的爱。

But I do worry that many will find the prospect of a world without loneliness irresistible—and that something essential could be lost, especially for the young. When we numb ourselves to loneliness, we give up the hard work of making ourselves understood, of striving for true connection, of forging relationships built on mutual effort. In muting the signal, we risk losing part of what makes us human.但我确实担心，许多人会发现一个没有孤独的世界的前景是不可抗拒的——而且一些本质的东西可能会丢失，尤其是对年轻人来说。当我们麻木自己对孤独的感受时，我们放弃了让自己被理解的艰苦努力，放弃了追求真正联系的努力，放弃了建立在共同努力基础上的关系。在消除信号的同时，我们冒着失去部分人性特质的风险。
</content:encoded><guid isPermaLink="false">67</guid></item><item><title>【搬运】Anthropic 撤销了 OpenAI 对 Claude 的访问权限</title><link>https://www.open-isle.com/posts/68</link><description># Anthropic Revokes OpenAI's Access to ClaudeAnthropic 撤销了 OpenAI 对 Claude 的访问权限

## OpenAI lost access to the Claude API this week after Anthropic claimed the company was violating its terms of service. OpenAI 本周失去了对 Claude API 的访问权限，因为 Anthropic 声称该公司违反了其服务条款。

🔗 原文链接: https://www.wired.com/story/anthropic-revokes-openais-access-to-claude/

![anthropic-openai-biz-2216956964.jpg](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/01c17295f9e445978a257c34d1d6e0c3.jpg)

Anthropic revoked OpenAI’s API access to its models on Tuesday, multiple sources familiar with the matter tell WIRED. OpenAI was informed that its access was cut off due to violating the terms of service.Anthropic 在周二撤销了 OpenAI 对其模型的 API 访问权限，多位知情人士告诉 WIRED。OpenAI 被告知其访问权限被切断是因为违反了服务条款。

“Claude Code has become the go-to choice for coders everywhere, and so it was no surprise to learn OpenAI's own technical staff were also using our coding tools ahead of the launch of GPT-5,” Anthropic spokesperson Christopher Nulty said in a statement to WIRED. “Unfortunately, this is a direct violation of our terms of service.”“Claude Code 已成为全球程序员的首选，因此得知 OpenAI 自己的技术人员在 GPT-5 发布之前也在使用我们的编码工具并不令人惊讶，”Anthropic 发言人 Christopher Nulty 在给 WIRED 的声明中表示。“不幸的是，这直接违反了我们的服务条款。”

According to Anthropic’s [commercial terms of service](https://www.anthropic.com/legal/commercial-terms), customers are barred from using the service to “build a competing product or service, including to train competing AI models” or “reverse engineer or duplicate” the services. This change in OpenAI’s access to Claude comes as the ChatGPT-maker is [reportedly](https://www.theverge.com/notepad-microsoft-newsletter/712950/openai-gpt-5-model-release-date-notepad) preparing to release a new AI model, GPT-5, which is [rumored](https://www.theinformation.com/articles/openais-gpt-5-shines-coding-tasks?rc=mshudk) to be better at coding.根据 Anthropic 的商业服务条款，客户被禁止使用该服务“构建竞争产品或服务，包括训练竞争 AI 模型”或“逆向工程或复制”这些服务。OpenAI 对 Claude 的访问权限的这一变化正值 ChatGPT 制造商据报道正在准备发布新的 AI 模型 GPT-5，而该模型**传闻在编码方面表现更佳。

OpenAI was plugging Claude into its own internal tools using special developer access (APIs), instead of using the regular chat interface, according to sources. This allowed the company to run tests to evaluate Claude’s capabilities in things like coding and creative writing against its own AI models, and check how Claude responded to safety-related prompts involving categories like CSAM, self-harm, and defamation, the sources say. The results help OpenAI compare its own models’ behavior under similar conditions and make adjustments as needed.据消息来源，OpenAI 正在通过特殊的开发者访问权限（API）将 Claude 接入其内部工具，而不是使用常规的聊天界面。这使得公司能够进行测试，以评估 Claude 在编码和创意写作等方面的能力，并检查 Claude 对涉及 CSAM、自残和诽谤等类别的安全相关提示的反应。消息来源表示，这些结果帮助 OpenAI 在类似条件下比较其自身模型的行为，并根据需要进行调整。

“It’s industry standard to evaluate other AI systems to benchmark progress and improve safety. While we respect Anthropic’s decision to cut off our API access, it’s disappointing considering our API remains available to them,” OpenAI’s chief communications officer Hannah Wong said in a statement to WIRED.“评估其他人工智能系统以基准进展和提高安全性是行业标准。虽然我们尊重 Anthropic 决定切断我们的 API 访问，但考虑到我们的 API 仍然对他们开放，这令人失望，”OpenAI 的首席传播官 Hannah Wong 在给 WIRED 的声明中说道。

Nulty says that Anthropic will “continue to ensure OpenAI has API access for the purposes of benchmarking and safety evaluations as is standard practice across the industry.” The company did not respond to WIRED’s request for clarification on if and how OpenAI's current Claude API restriction would impact this work.Nulty 表示，Anthropic 将“继续确保 OpenAI 拥有 API 访问权限，以便进行基准测试和安全评估，这在行业内是标准做法。”该公司未回应 WIRED 关于 OpenAI 当前 Claude API 限制是否以及如何影响这项工作的澄清请求。

Top tech companies yanking API access from competitors has been a tactic in the tech industry for years. Facebook did the same to [Twitter-owned Vine](https://venturebeat.com/social/facebooks-alleged-use-of-apis-to-crush-competition-is-a-warning-to-other-data-companies/) (which led to allegations of anticompetitive behavior) and last month Salesforce [restricted competitors](https://www.theinformation.com/articles/salesforce-blocks-ai-rivals-using-slack-data?rc=mshudk) from accessing certain data through the Slack API. This isn’t even a first for Anthropic. Last month, the company restricted the AI coding startup Windsurf’s direct access to its models after it was rumored OpenAI was set to acquire it. ([That deal fell through](https://techcrunch.com/2025/07/11/windsurfs-ceo-goes-to-google-openais-acquisition-falls-apart/)).顶级科技公司撤销竞争对手的 API 访问权限在科技行业已经是一种策略多年。Facebook 也对 Twitter 拥有的 Vine 采取了同样的做法（这导致了反竞争行为的指控），上个月 Salesforce 限制竞争对手通过 Slack API 访问某些数据。这对 Anthropic 来说甚至不是第一次。上个月，该公司在传出 OpenAI 准备收购 AI 编码初创公司 Windsurf 的消息后，限制了 Windsurf 对其模型的直接访问。（该交易未能达成）。

Anthropic’s chief science officer Jared Kaplan [spoke to TechCrunch](https://techcrunch.com/2025/06/05/anthropic-co-founder-on-cutting-access-to-windsurf-it-would-be-odd-for-us-to-sell-claude-to-openai/) at the time about revoking Windsurf’s access to Claude, saying, “I think it would be odd for us to be selling Claude to OpenAI.”Anthropic 的首席科学官贾里德·卡普兰当时对 TechCrunch 表示，撤销 Windsurf 对 Claude 的访问权限，“我认为我们向 OpenAI 出售 Claude 会很奇怪。”

A day before cutting off OpenAI’s access to the Claude API, Anthropic [announced](https://x.com/AnthropicAI/status/1949898514844307953)new rate limits on Claude Code, its AI-powered coding tool, citing** **[explosive usage](https://x.com/AnthropicAI/status/1949898511287226425)and, in some cases,** [violations of its terms of service](https://x.com/AnthropicAI/status/1949898513019466140).在切断 OpenAI 对 Claude API 访问权限的前一天，Anthropic 宣布对其 AI 驱动的编码工具 Claude Code 实施新的使用限制，理由是使用量激增，并且在某些情况下违反了其服务条款。
</description><content:encoded># Anthropic Revokes OpenAI's Access to ClaudeAnthropic 撤销了 OpenAI 对 Claude 的访问权限

## OpenAI lost access to the Claude API this week after Anthropic claimed the company was violating its terms of service. OpenAI 本周失去了对 Claude API 的访问权限，因为 Anthropic 声称该公司违反了其服务条款。

🔗 原文链接: https://www.wired.com/story/anthropic-revokes-openais-access-to-claude/

![anthropic-openai-biz-2216956964.jpg](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/01c17295f9e445978a257c34d1d6e0c3.jpg)

Anthropic revoked OpenAI’s API access to its models on Tuesday, multiple sources familiar with the matter tell WIRED. OpenAI was informed that its access was cut off due to violating the terms of service.Anthropic 在周二撤销了 OpenAI 对其模型的 API 访问权限，多位知情人士告诉 WIRED。OpenAI 被告知其访问权限被切断是因为违反了服务条款。

“Claude Code has become the go-to choice for coders everywhere, and so it was no surprise to learn OpenAI's own technical staff were also using our coding tools ahead of the launch of GPT-5,” Anthropic spokesperson Christopher Nulty said in a statement to WIRED. “Unfortunately, this is a direct violation of our terms of service.”“Claude Code 已成为全球程序员的首选，因此得知 OpenAI 自己的技术人员在 GPT-5 发布之前也在使用我们的编码工具并不令人惊讶，”Anthropic 发言人 Christopher Nulty 在给 WIRED 的声明中表示。“不幸的是，这直接违反了我们的服务条款。”

According to Anthropic’s [commercial terms of service](https://www.anthropic.com/legal/commercial-terms), customers are barred from using the service to “build a competing product or service, including to train competing AI models” or “reverse engineer or duplicate” the services. This change in OpenAI’s access to Claude comes as the ChatGPT-maker is [reportedly](https://www.theverge.com/notepad-microsoft-newsletter/712950/openai-gpt-5-model-release-date-notepad) preparing to release a new AI model, GPT-5, which is [rumored](https://www.theinformation.com/articles/openais-gpt-5-shines-coding-tasks?rc=mshudk) to be better at coding.根据 Anthropic 的商业服务条款，客户被禁止使用该服务“构建竞争产品或服务，包括训练竞争 AI 模型”或“逆向工程或复制”这些服务。OpenAI 对 Claude 的访问权限的这一变化正值 ChatGPT 制造商据报道正在准备发布新的 AI 模型 GPT-5，而该模型**传闻在编码方面表现更佳。

OpenAI was plugging Claude into its own internal tools using special developer access (APIs), instead of using the regular chat interface, according to sources. This allowed the company to run tests to evaluate Claude’s capabilities in things like coding and creative writing against its own AI models, and check how Claude responded to safety-related prompts involving categories like CSAM, self-harm, and defamation, the sources say. The results help OpenAI compare its own models’ behavior under similar conditions and make adjustments as needed.据消息来源，OpenAI 正在通过特殊的开发者访问权限（API）将 Claude 接入其内部工具，而不是使用常规的聊天界面。这使得公司能够进行测试，以评估 Claude 在编码和创意写作等方面的能力，并检查 Claude 对涉及 CSAM、自残和诽谤等类别的安全相关提示的反应。消息来源表示，这些结果帮助 OpenAI 在类似条件下比较其自身模型的行为，并根据需要进行调整。

“It’s industry standard to evaluate other AI systems to benchmark progress and improve safety. While we respect Anthropic’s decision to cut off our API access, it’s disappointing considering our API remains available to them,” OpenAI’s chief communications officer Hannah Wong said in a statement to WIRED.“评估其他人工智能系统以基准进展和提高安全性是行业标准。虽然我们尊重 Anthropic 决定切断我们的 API 访问，但考虑到我们的 API 仍然对他们开放，这令人失望，”OpenAI 的首席传播官 Hannah Wong 在给 WIRED 的声明中说道。

Nulty says that Anthropic will “continue to ensure OpenAI has API access for the purposes of benchmarking and safety evaluations as is standard practice across the industry.” The company did not respond to WIRED’s request for clarification on if and how OpenAI's current Claude API restriction would impact this work.Nulty 表示，Anthropic 将“继续确保 OpenAI 拥有 API 访问权限，以便进行基准测试和安全评估，这在行业内是标准做法。”该公司未回应 WIRED 关于 OpenAI 当前 Claude API 限制是否以及如何影响这项工作的澄清请求。

Top tech companies yanking API access from competitors has been a tactic in the tech industry for years. Facebook did the same to [Twitter-owned Vine](https://venturebeat.com/social/facebooks-alleged-use-of-apis-to-crush-competition-is-a-warning-to-other-data-companies/) (which led to allegations of anticompetitive behavior) and last month Salesforce [restricted competitors](https://www.theinformation.com/articles/salesforce-blocks-ai-rivals-using-slack-data?rc=mshudk) from accessing certain data through the Slack API. This isn’t even a first for Anthropic. Last month, the company restricted the AI coding startup Windsurf’s direct access to its models after it was rumored OpenAI was set to acquire it. ([That deal fell through](https://techcrunch.com/2025/07/11/windsurfs-ceo-goes-to-google-openais-acquisition-falls-apart/)).顶级科技公司撤销竞争对手的 API 访问权限在科技行业已经是一种策略多年。Facebook 也对 Twitter 拥有的 Vine 采取了同样的做法（这导致了反竞争行为的指控），上个月 Salesforce 限制竞争对手通过 Slack API 访问某些数据。这对 Anthropic 来说甚至不是第一次。上个月，该公司在传出 OpenAI 准备收购 AI 编码初创公司 Windsurf 的消息后，限制了 Windsurf 对其模型的直接访问。（该交易未能达成）。

Anthropic’s chief science officer Jared Kaplan [spoke to TechCrunch](https://techcrunch.com/2025/06/05/anthropic-co-founder-on-cutting-access-to-windsurf-it-would-be-odd-for-us-to-sell-claude-to-openai/) at the time about revoking Windsurf’s access to Claude, saying, “I think it would be odd for us to be selling Claude to OpenAI.”Anthropic 的首席科学官贾里德·卡普兰当时对 TechCrunch 表示，撤销 Windsurf 对 Claude 的访问权限，“我认为我们向 OpenAI 出售 Claude 会很奇怪。”

A day before cutting off OpenAI’s access to the Claude API, Anthropic [announced](https://x.com/AnthropicAI/status/1949898514844307953)new rate limits on Claude Code, its AI-powered coding tool, citing** **[explosive usage](https://x.com/AnthropicAI/status/1949898511287226425)and, in some cases,** [violations of its terms of service](https://x.com/AnthropicAI/status/1949898513019466140).在切断 OpenAI 对 Claude API 访问权限的前一天，Anthropic 宣布对其 AI 驱动的编码工具 Claude Code 实施新的使用限制，理由是使用量激增，并且在某些情况下违反了其服务条款。
</content:encoded><guid isPermaLink="false">68</guid></item><item><title>[开源自荐] yt-dlp-translate ── 一键下载 YouTube 播放列表并 AI 翻译字幕</title><link>https://www.open-isle.com/posts/69</link><description>&gt; **项目地址**：https://github.com/nagisa77/yt-dlp-translate
&gt; **许可证**：MIT ，纯开源，无任何商业收费或广告

大家好，我自己在备份外语资源时，总要先 ****yt-dlp** 下视频 ➜ 手动找字幕 ➜ 再翻译。于是写了** yt-dlp-translate**，把整套流程自动化，分享给有同样需求的朋友。

### ✨ 主要功能

* **批量下载**：支持整条 playlist 或自定义 URL 列表。
* **字幕优先**：若目标语言字幕缺失，则获取英文字幕并自动翻译。
* **AI 翻译**：调用 OpenAI ，保留时间轴不乱行。
* **断点续传 &amp; Cookie 登录**：下载过的文件自动跳过，私密/年龄限制视频可用浏览器 cookie 。
* **完全本地化**：所有文件保存在本地，无外部 SaaS 依赖。

### 🚀 快速试用

```bash
git clone https://github.com/nagisa77/yt-dlp-translate
cd yt-dlp-translate
pip install -r requirements.txt
cp .env.example .env      # Google API + OpenAI Key
cp config.yaml.example config.yaml  # 设置 playlist_id + language
python main.py
```
</description><content:encoded>&gt; **项目地址**：https://github.com/nagisa77/yt-dlp-translate
&gt; **许可证**：MIT ，纯开源，无任何商业收费或广告

大家好，我自己在备份外语资源时，总要先 ****yt-dlp** 下视频 ➜ 手动找字幕 ➜ 再翻译。于是写了** yt-dlp-translate**，把整套流程自动化，分享给有同样需求的朋友。

### ✨ 主要功能

* **批量下载**：支持整条 playlist 或自定义 URL 列表。
* **字幕优先**：若目标语言字幕缺失，则获取英文字幕并自动翻译。
* **AI 翻译**：调用 OpenAI ，保留时间轴不乱行。
* **断点续传 &amp; Cookie 登录**：下载过的文件自动跳过，私密/年龄限制视频可用浏览器 cookie 。
* **完全本地化**：所有文件保存在本地，无外部 SaaS 依赖。

### 🚀 快速试用

```bash
git clone https://github.com/nagisa77/yt-dlp-translate
cd yt-dlp-translate
pip install -r requirements.txt
cp .env.example .env      # Google API + OpenAI Key
cp config.yaml.example config.yaml  # 设置 playlist_id + language
python main.py
```
</content:encoded><guid isPermaLink="false">69</guid></item><item><title>新人报道（想喝奶茶）</title><link>https://www.open-isle.com/posts/70</link><description>站长我想喝奶茶了
</description><content:encoded>站长我想喝奶茶了
</content:encoded><guid isPermaLink="false">70</guid></item><item><title>【开源共建】本站bug/feature共创</title><link>https://www.open-isle.com/posts/71</link><description>## 🔥开源共建

为了鼓励大家共创本项目（比如有些朋友可能想参与开源，但不知道从何下手），目前发出了10+ issue

&gt; 🎉 如认领bug/feature可直接在底部回复

https://github.com/nagisa77/OpenIsle/issues

![CleanShot 2025-08-03 at 3 .06.02@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/8184ab55bc3f483098a4bfc7e315140f.png)

## 🔥文档共建

楼主会迅速整理一份详细的开发文档，如果有技术背景/有空闲时间的朋友，想要贡献本站的代码，可以根据这份开发文档快速部署开发环境；感谢大家支持⬆️🙏
</description><content:encoded>## 🔥开源共建

为了鼓励大家共创本项目（比如有些朋友可能想参与开源，但不知道从何下手），目前发出了10+ issue

&gt; 🎉 如认领bug/feature可直接在底部回复

https://github.com/nagisa77/OpenIsle/issues

![CleanShot 2025-08-03 at 3 .06.02@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/8184ab55bc3f483098a4bfc7e315140f.png)

## 🔥文档共建

楼主会迅速整理一份详细的开发文档，如果有技术背景/有空闲时间的朋友，想要贡献本站的代码，可以根据这份开发文档快速部署开发环境；感谢大家支持⬆️🙏
</content:encoded><guid isPermaLink="false">71</guid></item><item><title>今天就可以喝奶茶了</title><link>https://www.open-isle.com/posts/72</link><description>谢谢站长！！！
</description><content:encoded>谢谢站长！！！
</content:encoded><guid isPermaLink="false">72</guid></item><item><title>新人报道</title><link>https://www.open-isle.com/posts/73</link><description>发现一个新社区，注册关注一下
</description><content:encoded>发现一个新社区，注册关注一下
</content:encoded><guid isPermaLink="false">73</guid></item><item><title>分享一个MuMu Pro模拟器 Mac M芯片破解版</title><link>https://www.open-isle.com/posts/74</link><description>分享一个MuMu Pro模拟器 Mac M芯片破解版，我天天用它玩金铲铲，可以android和ios登录金铲铲。

我用夸克网盘给你分享了「MuMuPlay…4.46」，点击链接或复制整段内容，打开「夸克APP」即可获取。
伏脂大雁智渊室洞座
/\~0c4637bquH\~:/
链接：[夸克网盘分享](https://pan.quark.cn/s/2f27cbaef85a)

【超级会员V1】通过百度网盘分享的文件：MuMuPlay…dmg
链接：[https://pan.baidu.com/s/1QfnhiA1t9oUH64UtB6LHiQ?pwd=H661](https://pan.baidu.com/s/1QfnhiA1t9oUH64UtB6LHiQ?pwd=H661)
复制这段内容打开「百度网盘APP 即可获取」
</description><content:encoded>分享一个MuMu Pro模拟器 Mac M芯片破解版，我天天用它玩金铲铲，可以android和ios登录金铲铲。

我用夸克网盘给你分享了「MuMuPlay…4.46」，点击链接或复制整段内容，打开「夸克APP」即可获取。
伏脂大雁智渊室洞座
/\~0c4637bquH\~:/
链接：[夸克网盘分享](https://pan.quark.cn/s/2f27cbaef85a)

【超级会员V1】通过百度网盘分享的文件：MuMuPlay…dmg
链接：[https://pan.baidu.com/s/1QfnhiA1t9oUH64UtB6LHiQ?pwd=H661](https://pan.baidu.com/s/1QfnhiA1t9oUH64UtB6LHiQ?pwd=H661)
复制这段内容打开「百度网盘APP 即可获取」
</content:encoded><guid isPermaLink="false">74</guid></item><item><title>发现一个网站的bug</title><link>https://www.open-isle.com/posts/75</link><description>```shell
https://www.open-isle.com/about
https://www.open-isle.com/about/
```

从侧边直接点进【关于】可以正常显示，然后刷新一下就403报错，并且路径末尾加了斜杠，疑似vue的bug
</description><content:encoded>```shell
https://www.open-isle.com/about
https://www.open-isle.com/about/
```

从侧边直接点进【关于】可以正常显示，然后刷新一下就403报错，并且路径末尾加了斜杠，疑似vue的bug
</content:encoded><guid isPermaLink="false">75</guid></item><item><title>新人报道 - 支持作者</title><link>https://www.open-isle.com/posts/76</link><description>作者（站长）好强。一个月做出来和 Discourse 接近的效果。

希望能持续发展。
</description><content:encoded>作者（站长）好强。一个月做出来和 Discourse 接近的效果。

希望能持续发展。
</content:encoded><guid isPermaLink="false">76</guid></item><item><title>建议去掉 backdrop-filter CSS</title><link>https://www.open-isle.com/posts/77</link><description>目前 `header` 和 `topic-container` 加了 `backdrop-filter` CSS 代码，

个人觉得并不好看，改成不透明的会更好一些。

更主要问题是，`backdrop-filter` 非常吃 CPU，去掉它以后，页面滚动时，会丝滑很多。

前几天我的[项目](https://utags.link/)的一些页面非常卡顿，排查了几个小时，发现 `backdrop-filter` 是罪魁祸首。

后来去掉了项目中所有使用 `backdrop-filter` 的地方，好多了。


![2025-08-04-12-03-49.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/0a7c5011253d4ef0a45928b88b0b9f37.png)

![2025-08-04-12-02-09.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/7233ccfd073b47b7a5a6b4f03498de56.png)
![2025-08-04-12-03-08.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/b14a5be466374edfbda2272ff36fb757.png)
</description><content:encoded>目前 `header` 和 `topic-container` 加了 `backdrop-filter` CSS 代码，

个人觉得并不好看，改成不透明的会更好一些。

更主要问题是，`backdrop-filter` 非常吃 CPU，去掉它以后，页面滚动时，会丝滑很多。

前几天我的[项目](https://utags.link/)的一些页面非常卡顿，排查了几个小时，发现 `backdrop-filter` 是罪魁祸首。

后来去掉了项目中所有使用 `backdrop-filter` 的地方，好多了。


![2025-08-04-12-03-49.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/0a7c5011253d4ef0a45928b88b0b9f37.png)

![2025-08-04-12-02-09.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/7233ccfd073b47b7a5a6b4f03498de56.png)
![2025-08-04-12-03-08.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/b14a5be466374edfbda2272ff36fb757.png)
</content:encoded><guid isPermaLink="false">77</guid></item><item><title>新人报到</title><link>https://www.open-isle.com/posts/78</link><description>新人报道，很高兴能和大家一起交流技术。或者是分享好玩的事情
</description><content:encoded>新人报道，很高兴能和大家一起交流技术。或者是分享好玩的事情
</content:encoded><guid isPermaLink="false">78</guid></item><item><title>如何关闭部分类型的消息</title><link>https://www.open-isle.com/posts/79</link><description>比如“谁查看了您的帖子”类型的消息，可不可以关闭。

现在用户还少，当用户多的时候，每人看一遍都有消息的话，感觉受打扰。

![2025-08-04-15-16-32.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/a6820cd65f9941e7a5f1d36171aed1db.png)
</description><content:encoded>比如“谁查看了您的帖子”类型的消息，可不可以关闭。

现在用户还少，当用户多的时候，每人看一遍都有消息的话，感觉受打扰。

![2025-08-04-15-16-32.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/a6820cd65f9941e7a5f1d36171aed1db.png)
</content:encoded><guid isPermaLink="false">79</guid></item><item><title>新人报道</title><link>https://www.open-isle.com/posts/80</link><description>新人报道
</description><content:encoded>新人报道
</content:encoded><guid isPermaLink="false">80</guid></item><item><title>【干货】VPS➕多跳模式（多人共享账号最优解） &amp; 企业内网情况下无缝访问ChatGPT服务</title><link>https://www.open-isle.com/posts/81</link><description>## 背景

- GPT Plus 一个月20💲太贵了，需要和朋友们合租分担经济压力😅
- 购买GPT之后，公司内网没法访问GPT，~~偷偷开了代理之后~~，又没法访问公司内网的东西；身为牛马很难提效
- 跟朋友们合租之后快活了一段时间，马上命中OpenAI的多IP检测，被封号，如图所示，**很痛苦，还损害友情**

![63f5ab5e2169dcfdbd35ebe711955b5e.JPG](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/864cf6c13b6743769d0f5e66d298d11f.JPG)

## 试错过程

1. 让朋友们都订阅同一个机场, 选择同一个线路：理论上不行，机场的IP早就被拉黑了，虽然有优质机场，但免不了大家都用之后，被OpenAI偷偷采取[降智措施](https://www.zhihu.com/question/9906653927)
2. 购买一个欧洲的低配VPS，帮朋友们配置路由转发，思路是只有OpenAI的域名，才走这个转发流程，比如遇到Youtube相关的域名，还是走原先的链路，这样做到在OpenAI视角，大家都是同一个IP访问，立即规避了降智的问题；配置如下规则

   ```config
   rules:
     - DOMAIN-SUFFIX,chat.openai.com,Proxy
     - DOMAIN-SUFFIX,chatgpt.com,Proxy
     - DOMAIN-SUFFIX,platform.openai.com,Proxy
     ....(省略更多AI相关域名)
   ```

   这样大家确实可以开始愉快的使用不降智的GPT了，但是**好景不长**，我们的行为马上被伟大的防火墙🧱给发现了，一开始还是封锁德国VPS的端口，试多几个端口之后，IP也被封掉了。GG！
3. 后来偶然间发现有种叫多级访问的东西，然后我想着用我自己的机场的某个VPS作为第一跳，通过这个第一跳再访问德国服务器，岂不是美哉，如果这条链路走通的话，及时第一跳被封了，我也可以迅速更换下一个第一跳，第一跳-&gt;第二跳的访问永远是在墙🧱外的流程，也就没有所谓封没封IP了；

   &gt; 另外这样做另外一个好处是: 大部份机场都是专线，**专线访问绝对比你直接访问德国VPS更快**
   &gt;

   以下给出一个极简的Clash配置和一个quanx的配置样板

   ```config
   #---------------------------------------------------#
   # Clash.Meta 配置 —— Relay 双跳链
   #---------------------------------------------------#

   #########
   # 0 基础
   #########
   port: 7890          # HTTP(S) 本地端口
   socks-port: 7891    # SOCKS5 本地端口
   allow-lan: true
   mode: Rule
   log-level: info
   external-controller: :9090

   ############
   # 1 代理节点
   ############
   proxies:

     # ── 第一跳：us10(支持流媒体&amp;GPT) (SS/SSR) ──────────────────────────
     - name: "us10(支持流媒体&amp;GPT)"
     # 省略节点详情信息

     # ── 第二跳：德国 (SS) ───────────────────────────
     - name: "Tim·VPS节点·德国"
     # 省略节点详情信息

   ################
   # 2 代理策略组
   ################

   proxy-groups:
     - name: "Proxy"
       type: relay
       proxies:
         - "us10(支持流媒体&amp;GPT)"
         - "Tim·VPS节点·德国"

   ########
   # 3 规则
   ########
   rules:
     - DOMAIN-SUFFIX,chat.openai.com,Proxy
     - DOMAIN-SUFFIX,chatgpt.com,Proxy
     - DOMAIN-SUFFIX,api-iam.intercom.io,Proxy
     - DOMAIN-SUFFIX,cdn.oaistatic.com,Proxy
     - DOMAIN-SUFFIX,cdn.openai.com,Proxy
     - DOMAIN-SUFFIX,events.statsigapi.net,Proxy
     - DOMAIN-SUFFIX,featuregates.org,Proxy
     - DOMAIN-SUFFIX,js.intercomcdn.com,Proxy
     - DOMAIN-SUFFIX,auth0.openai.com,Proxy
     - DOMAIN-SUFFIX,auth.openai.com,Proxy
     - DOMAIN-SUFFIX,tcr9i.chat.openai.com,Proxy
     - DOMAIN-SUFFIX,widget.intercom.io,Proxy
     - DOMAIN-SUFFIX,gemini.google.com,Proxy
     - DOMAIN-SUFFIX,platform.openai.com,Proxy
     - DOMAIN-SUFFIX,api.openai.com,Proxy
     - DOMAIN-SUFFIX,cors-anywhere.herokuapp.com,Proxy
     - DOMAIN-SUFFIX,news.ycombinator.com,Proxy
     - DOMAIN-SUFFIX,s-apse1b-nss-220.asia-southeast1.firebasedatabase.app,Proxy
     - DOMAIN-SUFFIX,files.oaiusercontent.com,Proxy
     - DOMAIN-SUFFIX,polymarket.com,Proxy
     - DOMAIN-SUFFIX,console.firebase.google.com,Proxy
     - DOMAIN-SUFFIX,www.v2ex.com,Proxy
     - DOMAIN-SUFFIX,global.v2ex.com,Proxy
     - DOMAIN-SUFFIX,cdn.v2ex.com,Proxy
     - DOMAIN-SUFFIX,grok.com,Proxy
     - DOMAIN-SUFFIX,accounts.x.ai,Proxy
     - DOMAIN-SUFFIX,nordvpn.com,Proxy
     - DOMAIN-SUFFIX,auth.x.ai,Proxy
     - DOMAIN-SUFFIX,www.google.com,Proxy
     - DOMAIN-SUFFIX,cdn.usefathom.com,Proxy
     - DOMAIN-SUFFIX,anthropic.com,Proxy
     - DOMAIN-SUFFIX,claude.ai,Proxy
     # - MATCH,Proxy

   ```

   quanx, 需要在配置文件里做以下修改的配置如下，需要搭配规则列表进行；这个是我自己捏的规则列表

   https://something-1307107697.cos.ap-guangzhou.myqcloud.com/OpenAI.list 在其他人的基础上加了几个域名

   ```config
   [filter_remote]分流资源后面加了个“#via=%TUN%”，代表需要链式传播。
   https://something-1307107697.cos.ap-guangzhou.myqcloud.com/OpenAI.list#via=%TUN%, tag=OpenAi, force-policy=VPS节点, update-interval=172800, opt-parser=true, inserted-resource=true, enabled=true

   [filter_local]加了两行
   ip-cidr, xxxx/32, proxy    — 代表 xxxx（IP） 需要用proxy链式，在当前Case是德国服务器
   host-suffix, chatgpt.com, proxy, via-interface=%TUN%   — 代表 chatgpt.com, 需要用链式传播 （处理了登录错误问题，玄学，不加这个也能访问了，就是登录失败）
   ```

   经过这个操作，目前大家只要命中OpenAI相关域名，都会先访问自己的机场某个节点，然后再绕到德国访问我的VPS服务器，我的服务器再转发到OpenAI；既做到不被OpenAI封，也做到不被墙🧱；基本是无敌的操作。甚至双跳访问速度，由于专线加成，比直接链接我的德国服务器还快很多
4. 那么如何在公司内网也能践行这个双跳呢，我这边有两个方法

   &gt; 1. 依然采用我前面的极简的Clash配置
   &gt;

   也就是说Clash要“开启系统代理”，但是规则只配置OpenAI相关域名，其他域名没有匹配到，就是走直连。那么也就是说，所有网络请求都会经过Clash去访问，Clash再原封不动转发给本地网关，或者将请求改写为访问德国服务器的请求，转发给本地网关。本地网关访问公司内网是完全ok的，这样就能做到既能访问内网，又可以访问OpenAI，且大家都是同个IP。

   后面有朋友就反馈说，公司的防火墙检测出了他异常。经过验证发现他公司会检测网络请求由哪个应用发出，在这种配置下，所有网络请求都是由clash发出，自然会被抓到啦。clash也不可能打开TUN模式，这样就和公司内网VPN冲突了（一般来说公司内网VPN都是TUN模式）

   &gt; 2. 采用浏览器（Chrome）插件smart Proxy，再smart proxy配置域名列表
   &gt;

   smart proxy 选择为“自动切换”。clash配置为全部转发，如下.

   ```config
   #---------------------------------------------------#
   # Clash.Meta 配置 —— Relay 双跳链
   #---------------------------------------------------#

   #########
   # 0 基础
   #########
   port: 7890          # HTTP(S) 本地端口
   socks-port: 7891    # SOCKS5 本地端口
   allow-lan: true
   mode: Rule
   log-level: info
   external-controller: :9090

   ############
   # 1 代理节点
   ############
   proxies:

     # ── 第一跳：us10(支持流媒体&amp;GPT) (SS/SSR) ──────────────────────────
     - name: "us10(支持流媒体&amp;GPT)"
     # 省略节点详情信息

     # ── 第二跳：德国 (SS) ───────────────────────────
     - name: "Tim·VPS节点·德国"
     # 省略节点详情信息

   ################
   # 2 代理策略组
   ################

   proxy-groups:
     - name: "Proxy"
       type: relay
       proxies:
         - "us10(支持流媒体&amp;GPT)"
         - "Tim·VPS节点·德国"

   ########
   # 3 规则
   ########
   rules:
     - MATCH,Proxy
   ```

   在Chrome的插件里，把原先的域名导入一下，如图；![CleanShot 2025-08-04 at 20.18.16@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/74f0eeb35eca411b8cc72d7ee3800dc4.png)

   注意：Clash需要把“打开系统代理”关掉，这样仅有相关域名命中，Chrome插件才会转给Clash，由Clash进行上述双跳访问，其他网络请求都是直接打到网卡，公司的防火墙也检测不到你了；

## Finally

朋友们经过我的配置，每个人都可以在公司愉快的无感使用我们合租的GPT账号
</description><content:encoded>## 背景

- GPT Plus 一个月20💲太贵了，需要和朋友们合租分担经济压力😅
- 购买GPT之后，公司内网没法访问GPT，~~偷偷开了代理之后~~，又没法访问公司内网的东西；身为牛马很难提效
- 跟朋友们合租之后快活了一段时间，马上命中OpenAI的多IP检测，被封号，如图所示，**很痛苦，还损害友情**

![63f5ab5e2169dcfdbd35ebe711955b5e.JPG](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/864cf6c13b6743769d0f5e66d298d11f.JPG)

## 试错过程

1. 让朋友们都订阅同一个机场, 选择同一个线路：理论上不行，机场的IP早就被拉黑了，虽然有优质机场，但免不了大家都用之后，被OpenAI偷偷采取[降智措施](https://www.zhihu.com/question/9906653927)
2. 购买一个欧洲的低配VPS，帮朋友们配置路由转发，思路是只有OpenAI的域名，才走这个转发流程，比如遇到Youtube相关的域名，还是走原先的链路，这样做到在OpenAI视角，大家都是同一个IP访问，立即规避了降智的问题；配置如下规则

   ```config
   rules:
     - DOMAIN-SUFFIX,chat.openai.com,Proxy
     - DOMAIN-SUFFIX,chatgpt.com,Proxy
     - DOMAIN-SUFFIX,platform.openai.com,Proxy
     ....(省略更多AI相关域名)
   ```

   这样大家确实可以开始愉快的使用不降智的GPT了，但是**好景不长**，我们的行为马上被伟大的防火墙🧱给发现了，一开始还是封锁德国VPS的端口，试多几个端口之后，IP也被封掉了。GG！
3. 后来偶然间发现有种叫多级访问的东西，然后我想着用我自己的机场的某个VPS作为第一跳，通过这个第一跳再访问德国服务器，岂不是美哉，如果这条链路走通的话，及时第一跳被封了，我也可以迅速更换下一个第一跳，第一跳-&gt;第二跳的访问永远是在墙🧱外的流程，也就没有所谓封没封IP了；

   &gt; 另外这样做另外一个好处是: 大部份机场都是专线，**专线访问绝对比你直接访问德国VPS更快**
   &gt;

   以下给出一个极简的Clash配置和一个quanx的配置样板

   ```config
   #---------------------------------------------------#
   # Clash.Meta 配置 —— Relay 双跳链
   #---------------------------------------------------#

   #########
   # 0 基础
   #########
   port: 7890          # HTTP(S) 本地端口
   socks-port: 7891    # SOCKS5 本地端口
   allow-lan: true
   mode: Rule
   log-level: info
   external-controller: :9090

   ############
   # 1 代理节点
   ############
   proxies:

     # ── 第一跳：us10(支持流媒体&amp;GPT) (SS/SSR) ──────────────────────────
     - name: "us10(支持流媒体&amp;GPT)"
     # 省略节点详情信息

     # ── 第二跳：德国 (SS) ───────────────────────────
     - name: "Tim·VPS节点·德国"
     # 省略节点详情信息

   ################
   # 2 代理策略组
   ################

   proxy-groups:
     - name: "Proxy"
       type: relay
       proxies:
         - "us10(支持流媒体&amp;GPT)"
         - "Tim·VPS节点·德国"

   ########
   # 3 规则
   ########
   rules:
     - DOMAIN-SUFFIX,chat.openai.com,Proxy
     - DOMAIN-SUFFIX,chatgpt.com,Proxy
     - DOMAIN-SUFFIX,api-iam.intercom.io,Proxy
     - DOMAIN-SUFFIX,cdn.oaistatic.com,Proxy
     - DOMAIN-SUFFIX,cdn.openai.com,Proxy
     - DOMAIN-SUFFIX,events.statsigapi.net,Proxy
     - DOMAIN-SUFFIX,featuregates.org,Proxy
     - DOMAIN-SUFFIX,js.intercomcdn.com,Proxy
     - DOMAIN-SUFFIX,auth0.openai.com,Proxy
     - DOMAIN-SUFFIX,auth.openai.com,Proxy
     - DOMAIN-SUFFIX,tcr9i.chat.openai.com,Proxy
     - DOMAIN-SUFFIX,widget.intercom.io,Proxy
     - DOMAIN-SUFFIX,gemini.google.com,Proxy
     - DOMAIN-SUFFIX,platform.openai.com,Proxy
     - DOMAIN-SUFFIX,api.openai.com,Proxy
     - DOMAIN-SUFFIX,cors-anywhere.herokuapp.com,Proxy
     - DOMAIN-SUFFIX,news.ycombinator.com,Proxy
     - DOMAIN-SUFFIX,s-apse1b-nss-220.asia-southeast1.firebasedatabase.app,Proxy
     - DOMAIN-SUFFIX,files.oaiusercontent.com,Proxy
     - DOMAIN-SUFFIX,polymarket.com,Proxy
     - DOMAIN-SUFFIX,console.firebase.google.com,Proxy
     - DOMAIN-SUFFIX,www.v2ex.com,Proxy
     - DOMAIN-SUFFIX,global.v2ex.com,Proxy
     - DOMAIN-SUFFIX,cdn.v2ex.com,Proxy
     - DOMAIN-SUFFIX,grok.com,Proxy
     - DOMAIN-SUFFIX,accounts.x.ai,Proxy
     - DOMAIN-SUFFIX,nordvpn.com,Proxy
     - DOMAIN-SUFFIX,auth.x.ai,Proxy
     - DOMAIN-SUFFIX,www.google.com,Proxy
     - DOMAIN-SUFFIX,cdn.usefathom.com,Proxy
     - DOMAIN-SUFFIX,anthropic.com,Proxy
     - DOMAIN-SUFFIX,claude.ai,Proxy
     # - MATCH,Proxy

   ```

   quanx, 需要在配置文件里做以下修改的配置如下，需要搭配规则列表进行；这个是我自己捏的规则列表

   https://something-1307107697.cos.ap-guangzhou.myqcloud.com/OpenAI.list 在其他人的基础上加了几个域名

   ```config
   [filter_remote]分流资源后面加了个“#via=%TUN%”，代表需要链式传播。
   https://something-1307107697.cos.ap-guangzhou.myqcloud.com/OpenAI.list#via=%TUN%, tag=OpenAi, force-policy=VPS节点, update-interval=172800, opt-parser=true, inserted-resource=true, enabled=true

   [filter_local]加了两行
   ip-cidr, xxxx/32, proxy    — 代表 xxxx（IP） 需要用proxy链式，在当前Case是德国服务器
   host-suffix, chatgpt.com, proxy, via-interface=%TUN%   — 代表 chatgpt.com, 需要用链式传播 （处理了登录错误问题，玄学，不加这个也能访问了，就是登录失败）
   ```

   经过这个操作，目前大家只要命中OpenAI相关域名，都会先访问自己的机场某个节点，然后再绕到德国访问我的VPS服务器，我的服务器再转发到OpenAI；既做到不被OpenAI封，也做到不被墙🧱；基本是无敌的操作。甚至双跳访问速度，由于专线加成，比直接链接我的德国服务器还快很多
4. 那么如何在公司内网也能践行这个双跳呢，我这边有两个方法

   &gt; 1. 依然采用我前面的极简的Clash配置
   &gt;

   也就是说Clash要“开启系统代理”，但是规则只配置OpenAI相关域名，其他域名没有匹配到，就是走直连。那么也就是说，所有网络请求都会经过Clash去访问，Clash再原封不动转发给本地网关，或者将请求改写为访问德国服务器的请求，转发给本地网关。本地网关访问公司内网是完全ok的，这样就能做到既能访问内网，又可以访问OpenAI，且大家都是同个IP。

   后面有朋友就反馈说，公司的防火墙检测出了他异常。经过验证发现他公司会检测网络请求由哪个应用发出，在这种配置下，所有网络请求都是由clash发出，自然会被抓到啦。clash也不可能打开TUN模式，这样就和公司内网VPN冲突了（一般来说公司内网VPN都是TUN模式）

   &gt; 2. 采用浏览器（Chrome）插件smart Proxy，再smart proxy配置域名列表
   &gt;

   smart proxy 选择为“自动切换”。clash配置为全部转发，如下.

   ```config
   #---------------------------------------------------#
   # Clash.Meta 配置 —— Relay 双跳链
   #---------------------------------------------------#

   #########
   # 0 基础
   #########
   port: 7890          # HTTP(S) 本地端口
   socks-port: 7891    # SOCKS5 本地端口
   allow-lan: true
   mode: Rule
   log-level: info
   external-controller: :9090

   ############
   # 1 代理节点
   ############
   proxies:

     # ── 第一跳：us10(支持流媒体&amp;GPT) (SS/SSR) ──────────────────────────
     - name: "us10(支持流媒体&amp;GPT)"
     # 省略节点详情信息

     # ── 第二跳：德国 (SS) ───────────────────────────
     - name: "Tim·VPS节点·德国"
     # 省略节点详情信息

   ################
   # 2 代理策略组
   ################

   proxy-groups:
     - name: "Proxy"
       type: relay
       proxies:
         - "us10(支持流媒体&amp;GPT)"
         - "Tim·VPS节点·德国"

   ########
   # 3 规则
   ########
   rules:
     - MATCH,Proxy
   ```

   在Chrome的插件里，把原先的域名导入一下，如图；![CleanShot 2025-08-04 at 20.18.16@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/74f0eeb35eca411b8cc72d7ee3800dc4.png)

   注意：Clash需要把“打开系统代理”关掉，这样仅有相关域名命中，Chrome插件才会转给Clash，由Clash进行上述双跳访问，其他网络请求都是直接打到网卡，公司的防火墙也检测不到你了；

## Finally

朋友们经过我的配置，每个人都可以在公司愉快的无感使用我们合租的GPT账号
</content:encoded><guid isPermaLink="false">81</guid></item><item><title>【开源共建】本站代码自部署方法（长期维护）</title><link>https://www.open-isle.com/posts/82</link><description>随着开服1周左右，来了不少小伙伴；本帖会阐述如何部署[本站](https://github.com/nagisa77/OpenIsle)前后端服务，for 有兴趣加入本站开发迭代的朋友，以及想要通过本站源代码，部署自己站点的朋友；

#### **⚠️注意：仅想修改前端的朋友可不用部署后端服务**

## 如何部署

&gt; Step1 先克隆仓库

```shell
git clone https://github.com/nagisa77/OpenIsle.git
cd OpenIsle
```

&gt; Step2 后端部署

```shell
cd backend
```

以IDEA编辑器为例，IDEA打开backend文件夹。

- 设置VM Option，最好运行在其他端口，非8080，这里设置8081

```shell
-Dserver.port=8081
```

![CleanShot 2025-08-04 at 11 .35.49.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/4cf210cfc6ea478a80dfc744c85ccdc4.png)

- 设置jdk版本为java 17

![CleanShot 2025-08-04 at 11 .38.03@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/392eeec753ae436ca12a78f750dfea2d.png)

- 本机配置MySQL服务（网上很多教程，忽略）
- 设置环境变量.env 文件 或.properties 文件（二选一）

1) 环境变量文件生成

```shell
cp open-isle.env.example open-isle.env
```

修改环境变量，留下需要的，比如你要开发Google登录业务，就需要谷歌相关的变量，数据库是一定要的

![CleanShot 2025-08-04 at 11 .41.36@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/896c8363b6e64ea19d18c12ec4dae2b4.png)

应用环境文件， 选择刚刚的`open-isle.env`

![CleanShot 2025-08-04 at 11 .44.41.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/f588e37838014a6684c141605639b9fa.png)

2. 直接修改 .properities 文件

位置src/main/application.properties, 数据库需要修改标红处，其他按需修改

![CleanShot 2025-08-04 at 11 .47.11@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/28c3104448a245419e0b06aee861abb4.png)

处理完环境问题直接跑起来就能通了

![CleanShot 2025-08-04 at 11 .49.01@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/2c945eae44b1477db09e80fc96b5e02d.png)

&gt; Step3 前端部署

前端可以依赖本机部署的后端，也可以直接调用线上的后端接口

```shell
cd ../frontend_nuxt/
```

copy环境.env文件

```shell
cp .env.staging.example .env
```

1. 依赖本机部署的后端：打开本文件夹，修改.env 修改为瞄准本机后端端口

```yaml
; 本地部署后端
NUXT_PUBLIC_API_BASE_URL=https://127.0.0.1:8081
; 预发环境后端
; NUXT_PUBLIC_API_BASE_URL=https://staging.open-isle.com
; 生产环境后端
; NUXT_PUBLIC_API_BASE_URL=https://www.open-isle.com
```

2. 依赖预发环境后台环境

**(⚠️强烈推荐只部署前端的朋友使用该环境)**

```yaml
; 本地部署后端
; NUXT_PUBLIC_API_BASE_URL=https://127.0.0.1:8081
; 预发环境后端
NUXT_PUBLIC_API_BASE_URL=https://staging.open-isle.com
; 生产环境后端
; NUXT_PUBLIC_API_BASE_URL=https://www.open-isle.com
```

4. 依赖线上后台环境

```yaml
; 本地部署后端
; NUXT_PUBLIC_API_BASE_URL=https://127.0.0.1:8081
; 预发环境后端
; NUXT_PUBLIC_API_BASE_URL=https://staging.open-isle.com
; 生产环境后端
NUXT_PUBLIC_API_BASE_URL=https://www.open-isle.com
```

```shell
# 安装依赖
npm install --verbose

# 运行前端服务
npm run dev
```

如此一来，浏览器访问 http://127.0.0.1:3000 即可访问前端页面



## 🔥 开源共建

欢迎大家一起加入项目。目前已开放多个issue，感兴趣的朋友可以认领参与 https://github.com/nagisa77/OpenIsle/issues

![CleanShot 2025-08-04 at 11 .56.16@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/545e2ca45b58444fb28e721ba5510ae4.png)
</description><content:encoded>随着开服1周左右，来了不少小伙伴；本帖会阐述如何部署[本站](https://github.com/nagisa77/OpenIsle)前后端服务，for 有兴趣加入本站开发迭代的朋友，以及想要通过本站源代码，部署自己站点的朋友；

#### **⚠️注意：仅想修改前端的朋友可不用部署后端服务**

## 如何部署

&gt; Step1 先克隆仓库

```shell
git clone https://github.com/nagisa77/OpenIsle.git
cd OpenIsle
```

&gt; Step2 后端部署

```shell
cd backend
```

以IDEA编辑器为例，IDEA打开backend文件夹。

- 设置VM Option，最好运行在其他端口，非8080，这里设置8081

```shell
-Dserver.port=8081
```

![CleanShot 2025-08-04 at 11 .35.49.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/4cf210cfc6ea478a80dfc744c85ccdc4.png)

- 设置jdk版本为java 17

![CleanShot 2025-08-04 at 11 .38.03@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/392eeec753ae436ca12a78f750dfea2d.png)

- 本机配置MySQL服务（网上很多教程，忽略）
- 设置环境变量.env 文件 或.properties 文件（二选一）

1) 环境变量文件生成

```shell
cp open-isle.env.example open-isle.env
```

修改环境变量，留下需要的，比如你要开发Google登录业务，就需要谷歌相关的变量，数据库是一定要的

![CleanShot 2025-08-04 at 11 .41.36@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/896c8363b6e64ea19d18c12ec4dae2b4.png)

应用环境文件， 选择刚刚的`open-isle.env`

![CleanShot 2025-08-04 at 11 .44.41.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/f588e37838014a6684c141605639b9fa.png)

2. 直接修改 .properities 文件

位置src/main/application.properties, 数据库需要修改标红处，其他按需修改

![CleanShot 2025-08-04 at 11 .47.11@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/28c3104448a245419e0b06aee861abb4.png)

处理完环境问题直接跑起来就能通了

![CleanShot 2025-08-04 at 11 .49.01@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/2c945eae44b1477db09e80fc96b5e02d.png)

&gt; Step3 前端部署

前端可以依赖本机部署的后端，也可以直接调用线上的后端接口

```shell
cd ../frontend_nuxt/
```

copy环境.env文件

```shell
cp .env.staging.example .env
```

1. 依赖本机部署的后端：打开本文件夹，修改.env 修改为瞄准本机后端端口

```yaml
; 本地部署后端
NUXT_PUBLIC_API_BASE_URL=https://127.0.0.1:8081
; 预发环境后端
; NUXT_PUBLIC_API_BASE_URL=https://staging.open-isle.com
; 生产环境后端
; NUXT_PUBLIC_API_BASE_URL=https://www.open-isle.com
```

2. 依赖预发环境后台环境

**(⚠️强烈推荐只部署前端的朋友使用该环境)**

```yaml
; 本地部署后端
; NUXT_PUBLIC_API_BASE_URL=https://127.0.0.1:8081
; 预发环境后端
NUXT_PUBLIC_API_BASE_URL=https://staging.open-isle.com
; 生产环境后端
; NUXT_PUBLIC_API_BASE_URL=https://www.open-isle.com
```

4. 依赖线上后台环境

```yaml
; 本地部署后端
; NUXT_PUBLIC_API_BASE_URL=https://127.0.0.1:8081
; 预发环境后端
; NUXT_PUBLIC_API_BASE_URL=https://staging.open-isle.com
; 生产环境后端
NUXT_PUBLIC_API_BASE_URL=https://www.open-isle.com
```

```shell
# 安装依赖
npm install --verbose

# 运行前端服务
npm run dev
```

如此一来，浏览器访问 http://127.0.0.1:3000 即可访问前端页面



## 🔥 开源共建

欢迎大家一起加入项目。目前已开放多个issue，感兴趣的朋友可以认领参与 https://github.com/nagisa77/OpenIsle/issues

![CleanShot 2025-08-04 at 11 .56.16@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/545e2ca45b58444fb28e721ba5510ae4.png)
</content:encoded><guid isPermaLink="false">82</guid></item><item><title>[搬运] Read That F*cking Code!</title><link>https://www.open-isle.com/posts/83</link><description>原文链接: https://etsd.tech/posts/rtfc/



If you’d told me 2–3 years ago that in 2025, one of my top pieces of advice for the new generation of developers would be “*read your code*” (we’re not even talking about re-reading it)… I’m not sure I would’ve believed you.如果你在 2-3 年前告诉我，在 2025 年，我对新一代开发者的建议之一会是“阅读你的代码”（我们甚至不谈重读它）……我不确定我会相信你。

## What This Article Covers 本文涵盖的内容

I’m not here to lecture anyone, but if you’re aiming to build serious projects these days, it might be worth learning how to approach AI coding tools the right way.我不是来给任何人讲课的，但如果你打算在如今构建严肃的项目，学习如何正确使用 AI 编码工具可能是值得的。

**This post covers:  本帖涵盖：**

* Three critical risks of poor vibe-coding practices 糟糕的氛围编码实践的三个关键风险
* Two effective approaches for production-grade AI-assisted development 两种有效的生产级 AI 辅助开发方法
* Practical tips to maintain code quality while leveraging AI speed 利用 AI 速度维护代码质量的实用技巧

**Vibe-Coding Refresh  Vibe-Coding 刷新**

Maybe it’s time we take a fresh look at what vibe-coding actually is. It’s more than just hobby prompting to get code — it’s a practice that serious developers should learn to master. What it means to me == Vibe-Coding is a dialogue-based coding process between a human and an AI where the human guides and the AI implements.==也许是时候我们重新审视一下什么是氛围编码。它不仅仅是为了获取代码的爱好提示——这是一种严肃开发者应该学习掌握的实践。对我来说：氛围编码是人类与人工智能之间的对话式编码过程，人类引导，人工智能实施。

## It’s possible to ship code without ever reading it. 可以在不阅读代码的情况下发布代码。

Since Claude Code and Windsurf arrived, it’s now totally possible to get working results without reading a single line of code. You can vibe-code without ever leaving your chat window and just operate based on outcomes - I’ve tried that, out of curiosity.自从 Claude Code 和 Windsurf 出现以来，现在完全可以在不阅读任何代码的情况下获得工作成果。你可以在聊天窗口中进行氛围编码，只需根据结果进行操作——出于好奇，我试过这样做。

Even if it doesn’t work on the first try (though it often does), you just explain what’s wrong, and voilà — working result incoming.即使第一次尝试不成功（尽管通常会成功），你只需解释哪里出错，然后 voilà — 工作结果即将到来。

## But This Comes With Three Critical Issues 但这带来了三个关键问题#

### 1. A Weakened Architecture[#](https://etsd.tech/posts/rtfc/#1-a-weakened-architecture)1. 一个削弱的架构#

Not reviewing AI-generated code will  lead to serious problems.

不审查 AI 生成的代码将导致严重问题。

First up: the slow but sure breakdown of your architecture… assuming you even took the time to plan one in the first place.

首先：你的架构缓慢但稳步的崩溃……假设你甚至花时间去规划过一个。

From experience, even with well-crafted prompts and clearly defined plans for a new feature, Claude Code (which I love, by the way) still sometimes goes off-script. Make sure to properly configure your @CLAUDE.md files to avoid this as much as possible.

根据经验，即使有精心设计的提示和明确的新功能计划，Claude Code（顺便说一下，我很喜欢）有时仍会偏离脚本。确保正确配置你的 @CLAUDE.md 文件，以尽量避免这种情况。

**Example of architectural drift: 架构漂移的示例：**

```js
// Your established pattern: services handle business logic
class UserService {
  async getUserProfile(userId) {
    const user = await db.users.findById(userId);
    return this.formatUserData(user);
  }
}

// What Claude might generate if unchecked:
// Business logic creeping into controllers
app.get('/profile/:id', async (req, res) =&gt; {
  const user = await db.users.findById(req.params.id);
  // Formatting logic that belongs in service layer
  const formattedUser = {
    name: user.firstName + ' ' + user.lastName,
    memberSince: new Date(user.createdAt).getFullYear()
  };
  res.json(formattedUser);
});Copy
```

If you don’t catch it early, those small inconsistencies become part of the codebase—and your favorite assistant will be tempted to follow those bad examples in the future.如果你不早点发现，这些小的不一致性就会成为代码库的一部分——而你最喜欢的助手将会在未来受到这些坏例子的诱惑。

==You’re still the architect!   你仍然是架构师！==

Everyone keeps saying it these days: treat your AI like a (brilliant) new junior dev. And what does a junior dev do before starting a new feature? They read through the existing codebase. Which means any weak or messy design choices are likely to get repeated.

如今每个人都在说：把你的 AI 当作一个（出色的）新初级开发者来对待。那么，初级开发者在开始一个新功能之前会做什么呢？他们会阅读现有的代码库。这意味着任何薄弱或混乱的设计选择很可能会被重复。

And by the way, you’d never push junior dev code without reviewing it.

顺便说一下，你绝不会在没有审核的情况下推送初级开发者的代码。

Now more than ever, we’re all responsible for the architecture. We spend more time guiding the AI on how to code than writing the actual code ourselves.

现在比以往任何时候，我们都对架构负责。我们花更多时间指导人工智能如何编码，而不是自己编写实际的代码。

### 2. Loss of Implementation Knowledge 2. 实施知识的丧失

&gt; You cannot delegate the act of thinking.你无法委托思考的行为。

*Alain (French philosopher, 19th century)阿兰（法国哲学家，19 世纪）*

**If you’re only focused on the end result,** you’ll soon know as little as your users about how things actually work. You may be the most advanced user of your own app — but **you won’t own your domain anymore**.

如果你只关注最终结果，你很快就会和你的用户一样，对事物的实际运作一无所知。你可能是自己应用程序中最先进的用户——但你将不再拥有你的领域。

**Why does that matter?  这有什么重要性？**

In every experience I’ve had — especially when building my latest startup — I’ve learned that apps and features don’t take shape at implementation time. They’re designed upstream: business rules, tech and infrastructure decisions all take form before you touch the keyboard. They come to you while commuting, while chatting, or—often—while in the shower.

在我经历的每一次——尤其是在构建我最新的创业公司 时——我学到的一个道理是，应用程序和功能并不是在实施时形成的。它们是在上游设计的：商业规则、技术和基础设施决策在你动手之前就已经形成。它们在你通勤、聊天，或者——通常——在洗澡时浮现出来。

Depending on your level of responsibility, you may or may not be involved outside of work. But you’ll probably agree that your best ‘Aha!’ moments didn’t happen in front of VS Code.

根据你的责任级别，你可能会或可能不会在工作之外参与。但你可能会同意，你最好的“恍然大悟”时刻并不是在 VS Code 前发生的。

If you don’t have the structure of your domain — its concepts and abstractions — constantly simmering somewhere in the back of your mind, you won’t be able to fully leverage the creative potential of modern tech.

如果你脑海中没有你领域的结构——它的概念和抽象——不断地在某个地方酝酿，你将无法充分利用现代技术的创造潜力。

==If you really think you don’t need this knowledge, your business might not be all that “Tech” to begin with.== In that case, use a well-structured Notion doc, or a no-code tool—you’ll save a ton of time and money.

如果你真的认为你不需要这些知识，那么你的业务可能根本就不那么“科技”。在这种情况下，使用一个结构良好的 Notion 文档或无代码工具——你将节省大量时间和金钱。

And don’t hesitate to leave your code editor and chat with an AI that doesn’t have access to your codebase—our good old rubber duck didn’t either, and that’s precisely why it worked.而且不要犹豫，离开你的代码编辑器，和一个没有访问你代码库的 AI 聊天——我们那只老旧的橡皮鸭也没有，这正是它有效的原因。

### 3. Security Vulnerabilities 3. 安全漏洞

Are you working on a production app? Then you must care about security. Most web security issues are avoided through knowledge and experience. But a lax implementation or fuzzy access scopes, and you’re in serious trouble.

你在开发生产应用吗？那么你必须关注安全性。大多数网络安全问题可以通过知识和经验来避免。但是，如果实施不严谨或访问范围模糊，你就会陷入严重的麻烦。

**Example that happened to me last week:上周发生在我身上的例子：**

```js
// What I asked for: "List user's projects"
// What Claude generated:
app.get('/api/projects/:id', async (req, res) =&gt; {
  const projectId = req.body.id; // From the client
  const project = await db.projects.find({ id: projectId });
  res.json(project);
});

// What it should have been:
app.get('/api/projects/:id', async (req, res) =&gt; {
  const projectId = req.body.id;
  const userId = req.authenticatedUser.id; // From auth middleware
  const project = await db.projects.find({
    id: projectId,
    where: { userId: userId }
  });
  res.json(project);
});Copy
```

The AI, focused on the end goal, implemented exactly what I asked for… except that it never once verified whether the resource actually belonged to the current user. Classic mistake. 

人工智能专注于最终目标，完全按照我要求的实现了……除了它从未验证过该资源是否确实属于当前用户。这是一个经典错误。

Sure, you can tell me: “always include access control in your prompt”, but some flaws only become obvious during implementation. Ever had a security insight pop into your head while coding a feature?

当然，你可以告诉我：“在你的提示中始终包含访问控制”，但有些缺陷只有在实施过程中才会变得明显。你在编码某个功能时，是否曾突然想到过安全方面的洞见？

You can’t be too careful. A misworded prompt, a misunderstood intention, an unreviewed commit—and bam, you’ve got a breach. I fear this will become more common with hastily vibe-coded projects.

你不能太小心。一个措辞不当的提示，一个误解的意图，一个未经审查的提交——然后，砰，你就出现了漏洞。我担心这在匆忙编写的项目中会变得更加普遍。

==Security has always needed to be part of the implementation process. Why should that change now?

安全一直需要成为实施过程的一部分。为什么现在应该改变这一点？==

## Two Ways to Vibe-Code Responsibly 负责任地进行 Vibe-Code 的两种方式#

As stated in [this great ressource](https://www-cdn.anthropic.com/58284b19e702b49db9302d5b6f135ad8871e7658.pdf) by Anthropic, there are two viable ways to vibe-code a production-ready project in 2025:

正如 Anthropic 在这个伟大的资源中所述，2025 年有两种可行的方法来为一个生产就绪的项目进行 vibe-code：

&gt; Learn to distinguish between tasks that work well asynchronously (peripheral features, prototyping) versus those needing synchronous supervision (core business logic, critical fixes). Abstract tasks on the product’s edges can be handled with “auto-accept mode,” while core functionality requires closer oversight.
&gt;
&gt; 学习区分适合异步处理的任务（外围特性、原型设计）与需要同步监督的任务（核心业务逻辑、关键修复）。产品边缘的抽象任务可以通过“自动接受模式”来处理，而核心功能则需要更密切的监督。

### 1. Fast Prototyping with Auto-Accept Mode 1. 使用自动接受模式进行快速原型制作

Here, you use the AI in auto-pilot mode. Describe the expected output, provide specs, and let it run. Before ending the session,**you review what’s been done**, and adjust as needed.

在这里，您以自动驾驶模式使用 AI。描述预期的输出，提供规格，然后让它运行。在结束会话之前，您回顾已完成的工作，并根据需要进行调整。

This works well when:

在以下情况下效果很好：

* You’re working on a topic you’re not familiar with 你正在研究一个你不熟悉的主题
* Generating test scaffolding (but still review the tests — a test that doesn’t test anything meaningful is just a green checkmark)
* 生成测试脚手架（但仍需审查测试——一个没有测试任何有意义内容的测试只是一个绿色勾号）
* Exploring new libraries or frameworks
* 探索新的库或框架

### 2. Synchronous Coding for Core Features 2. 核心功能的同步编码

This is where the real innovation is happening in our field.**Pair-vibe-coding, without auto-accept**, is the most effective way to ship quality features. Every suggestion is a chance to either accept or iterate.

这就是我们领域中真正创新发生的地方。没有自动接受的配对氛围编码是交付高质量功能的最有效方式。每个建议都是接受或迭代的机会。

And that changes everything: at every small step, you can correct direction before things drift.==It’s always easier to straighten a sapling than a grown tree.== The earlier you lock down good concepts and interfaces in your architecture, the better future suggestions from the AI will be.

这改变了一切：在每一个小步骤中，你都可以在事情偏离之前纠正方向。纠正一棵幼苗总比纠正一棵大树容易。你越早在架构中锁定好的概念和接口，AI 未来的建议就会越好。

**Plan your session:** When you start a session, begin with a clear plan. Read it carefully, regardless of your approach, and don’t validate it unless you fully agree with it. The plan is to the session what the seed is to the tree: bad seed, bad soil, no fruit.

规划你的会议：当你开始一个会议时，首先要有一个清晰的计划。仔细阅读它，无论你的方法如何，除非你完全同意，否则不要验证它。计划对会议的意义就像种子对树木的意义：坏种子，坏土壤，没有果实。

## The Vibe-Coding Checklist Vibe-Coding 检查清单

Before pushing any AI-generated code:在推送任何 AI 生成的代码之前：

* [ ]  **Architecture Check**: Does this follow our established patterns?架构检查：这是否遵循我们既定的模式？
* [ ]  **Security Review**: Are all resources properly scoped to users?安全审查：所有资源是否正确地限制在用户范围内？
* [ ]  **Tests**: Do they actually test meaningful behavior?测试：它们是否真的测试有意义的行为？

But also, do not forget to check:但也不要忘记检查：

* [ ]  **Documentation**: Will** ***you* understand this in 6 months?文档：你能在 6 个月内理解这个吗？
* [ ]  **Error Handling**: Are edge cases covered?错误处理：边缘情况是否被覆盖？
* [ ]  **Performance**: Any obvious N+1 queries or inefficiencies?性能：是否存在明显的 N+1 查询或低效情况？

And above all, make sure to:最重要的是，确保：

* [ ]  ==Leave with some **knowledge** of the new code==.带着对新代码的一些了解离开。

## To Wrap It Up 总结一下

AI coding assistants are powerful tools, but they’re amplifiers of your expertise, not replacements for it. The day you stop understanding your codebase is the day you stop being its architect.

AI 编程助手是强大的工具，但它们是你专业知识的放大器，而不是替代品。你停止理解代码库的那一天，就是你停止成为其架构师的那一天。

**Teams:** don’t cancel code reviews thinking Claude Code acts as a second dev alongside the one assigned to the feature. Bugs aren’t the biggest threat—losing mastery of your domain and architecture is. That’s the real roadblock to innovation.

团队：不要因为认为 Claude Code 作为分配给该功能的开发者的第二个开发者而取消代码审查。错误并不是最大的威胁——失去对你领域和架构的掌控才是。那才是真正的创新障碍。

**Engineers:** you can usually let the AI** ***RTFM* but you:** **==Read That F\*cking Code==!

工程师们：你们通常可以让 AI 去读说明书，但你们：读那该死的代码！
</description><content:encoded>原文链接: https://etsd.tech/posts/rtfc/



If you’d told me 2–3 years ago that in 2025, one of my top pieces of advice for the new generation of developers would be “*read your code*” (we’re not even talking about re-reading it)… I’m not sure I would’ve believed you.如果你在 2-3 年前告诉我，在 2025 年，我对新一代开发者的建议之一会是“阅读你的代码”（我们甚至不谈重读它）……我不确定我会相信你。

## What This Article Covers 本文涵盖的内容

I’m not here to lecture anyone, but if you’re aiming to build serious projects these days, it might be worth learning how to approach AI coding tools the right way.我不是来给任何人讲课的，但如果你打算在如今构建严肃的项目，学习如何正确使用 AI 编码工具可能是值得的。

**This post covers:  本帖涵盖：**

* Three critical risks of poor vibe-coding practices 糟糕的氛围编码实践的三个关键风险
* Two effective approaches for production-grade AI-assisted development 两种有效的生产级 AI 辅助开发方法
* Practical tips to maintain code quality while leveraging AI speed 利用 AI 速度维护代码质量的实用技巧

**Vibe-Coding Refresh  Vibe-Coding 刷新**

Maybe it’s time we take a fresh look at what vibe-coding actually is. It’s more than just hobby prompting to get code — it’s a practice that serious developers should learn to master. What it means to me == Vibe-Coding is a dialogue-based coding process between a human and an AI where the human guides and the AI implements.==也许是时候我们重新审视一下什么是氛围编码。它不仅仅是为了获取代码的爱好提示——这是一种严肃开发者应该学习掌握的实践。对我来说：氛围编码是人类与人工智能之间的对话式编码过程，人类引导，人工智能实施。

## It’s possible to ship code without ever reading it. 可以在不阅读代码的情况下发布代码。

Since Claude Code and Windsurf arrived, it’s now totally possible to get working results without reading a single line of code. You can vibe-code without ever leaving your chat window and just operate based on outcomes - I’ve tried that, out of curiosity.自从 Claude Code 和 Windsurf 出现以来，现在完全可以在不阅读任何代码的情况下获得工作成果。你可以在聊天窗口中进行氛围编码，只需根据结果进行操作——出于好奇，我试过这样做。

Even if it doesn’t work on the first try (though it often does), you just explain what’s wrong, and voilà — working result incoming.即使第一次尝试不成功（尽管通常会成功），你只需解释哪里出错，然后 voilà — 工作结果即将到来。

## But This Comes With Three Critical Issues 但这带来了三个关键问题#

### 1. A Weakened Architecture[#](https://etsd.tech/posts/rtfc/#1-a-weakened-architecture)1. 一个削弱的架构#

Not reviewing AI-generated code will  lead to serious problems.

不审查 AI 生成的代码将导致严重问题。

First up: the slow but sure breakdown of your architecture… assuming you even took the time to plan one in the first place.

首先：你的架构缓慢但稳步的崩溃……假设你甚至花时间去规划过一个。

From experience, even with well-crafted prompts and clearly defined plans for a new feature, Claude Code (which I love, by the way) still sometimes goes off-script. Make sure to properly configure your @CLAUDE.md files to avoid this as much as possible.

根据经验，即使有精心设计的提示和明确的新功能计划，Claude Code（顺便说一下，我很喜欢）有时仍会偏离脚本。确保正确配置你的 @CLAUDE.md 文件，以尽量避免这种情况。

**Example of architectural drift: 架构漂移的示例：**

```js
// Your established pattern: services handle business logic
class UserService {
  async getUserProfile(userId) {
    const user = await db.users.findById(userId);
    return this.formatUserData(user);
  }
}

// What Claude might generate if unchecked:
// Business logic creeping into controllers
app.get('/profile/:id', async (req, res) =&gt; {
  const user = await db.users.findById(req.params.id);
  // Formatting logic that belongs in service layer
  const formattedUser = {
    name: user.firstName + ' ' + user.lastName,
    memberSince: new Date(user.createdAt).getFullYear()
  };
  res.json(formattedUser);
});Copy
```

If you don’t catch it early, those small inconsistencies become part of the codebase—and your favorite assistant will be tempted to follow those bad examples in the future.如果你不早点发现，这些小的不一致性就会成为代码库的一部分——而你最喜欢的助手将会在未来受到这些坏例子的诱惑。

==You’re still the architect!   你仍然是架构师！==

Everyone keeps saying it these days: treat your AI like a (brilliant) new junior dev. And what does a junior dev do before starting a new feature? They read through the existing codebase. Which means any weak or messy design choices are likely to get repeated.

如今每个人都在说：把你的 AI 当作一个（出色的）新初级开发者来对待。那么，初级开发者在开始一个新功能之前会做什么呢？他们会阅读现有的代码库。这意味着任何薄弱或混乱的设计选择很可能会被重复。

And by the way, you’d never push junior dev code without reviewing it.

顺便说一下，你绝不会在没有审核的情况下推送初级开发者的代码。

Now more than ever, we’re all responsible for the architecture. We spend more time guiding the AI on how to code than writing the actual code ourselves.

现在比以往任何时候，我们都对架构负责。我们花更多时间指导人工智能如何编码，而不是自己编写实际的代码。

### 2. Loss of Implementation Knowledge 2. 实施知识的丧失

&gt; You cannot delegate the act of thinking.你无法委托思考的行为。

*Alain (French philosopher, 19th century)阿兰（法国哲学家，19 世纪）*

**If you’re only focused on the end result,** you’ll soon know as little as your users about how things actually work. You may be the most advanced user of your own app — but **you won’t own your domain anymore**.

如果你只关注最终结果，你很快就会和你的用户一样，对事物的实际运作一无所知。你可能是自己应用程序中最先进的用户——但你将不再拥有你的领域。

**Why does that matter?  这有什么重要性？**

In every experience I’ve had — especially when building my latest startup — I’ve learned that apps and features don’t take shape at implementation time. They’re designed upstream: business rules, tech and infrastructure decisions all take form before you touch the keyboard. They come to you while commuting, while chatting, or—often—while in the shower.

在我经历的每一次——尤其是在构建我最新的创业公司 时——我学到的一个道理是，应用程序和功能并不是在实施时形成的。它们是在上游设计的：商业规则、技术和基础设施决策在你动手之前就已经形成。它们在你通勤、聊天，或者——通常——在洗澡时浮现出来。

Depending on your level of responsibility, you may or may not be involved outside of work. But you’ll probably agree that your best ‘Aha!’ moments didn’t happen in front of VS Code.

根据你的责任级别，你可能会或可能不会在工作之外参与。但你可能会同意，你最好的“恍然大悟”时刻并不是在 VS Code 前发生的。

If you don’t have the structure of your domain — its concepts and abstractions — constantly simmering somewhere in the back of your mind, you won’t be able to fully leverage the creative potential of modern tech.

如果你脑海中没有你领域的结构——它的概念和抽象——不断地在某个地方酝酿，你将无法充分利用现代技术的创造潜力。

==If you really think you don’t need this knowledge, your business might not be all that “Tech” to begin with.== In that case, use a well-structured Notion doc, or a no-code tool—you’ll save a ton of time and money.

如果你真的认为你不需要这些知识，那么你的业务可能根本就不那么“科技”。在这种情况下，使用一个结构良好的 Notion 文档或无代码工具——你将节省大量时间和金钱。

And don’t hesitate to leave your code editor and chat with an AI that doesn’t have access to your codebase—our good old rubber duck didn’t either, and that’s precisely why it worked.而且不要犹豫，离开你的代码编辑器，和一个没有访问你代码库的 AI 聊天——我们那只老旧的橡皮鸭也没有，这正是它有效的原因。

### 3. Security Vulnerabilities 3. 安全漏洞

Are you working on a production app? Then you must care about security. Most web security issues are avoided through knowledge and experience. But a lax implementation or fuzzy access scopes, and you’re in serious trouble.

你在开发生产应用吗？那么你必须关注安全性。大多数网络安全问题可以通过知识和经验来避免。但是，如果实施不严谨或访问范围模糊，你就会陷入严重的麻烦。

**Example that happened to me last week:上周发生在我身上的例子：**

```js
// What I asked for: "List user's projects"
// What Claude generated:
app.get('/api/projects/:id', async (req, res) =&gt; {
  const projectId = req.body.id; // From the client
  const project = await db.projects.find({ id: projectId });
  res.json(project);
});

// What it should have been:
app.get('/api/projects/:id', async (req, res) =&gt; {
  const projectId = req.body.id;
  const userId = req.authenticatedUser.id; // From auth middleware
  const project = await db.projects.find({
    id: projectId,
    where: { userId: userId }
  });
  res.json(project);
});Copy
```

The AI, focused on the end goal, implemented exactly what I asked for… except that it never once verified whether the resource actually belonged to the current user. Classic mistake. 

人工智能专注于最终目标，完全按照我要求的实现了……除了它从未验证过该资源是否确实属于当前用户。这是一个经典错误。

Sure, you can tell me: “always include access control in your prompt”, but some flaws only become obvious during implementation. Ever had a security insight pop into your head while coding a feature?

当然，你可以告诉我：“在你的提示中始终包含访问控制”，但有些缺陷只有在实施过程中才会变得明显。你在编码某个功能时，是否曾突然想到过安全方面的洞见？

You can’t be too careful. A misworded prompt, a misunderstood intention, an unreviewed commit—and bam, you’ve got a breach. I fear this will become more common with hastily vibe-coded projects.

你不能太小心。一个措辞不当的提示，一个误解的意图，一个未经审查的提交——然后，砰，你就出现了漏洞。我担心这在匆忙编写的项目中会变得更加普遍。

==Security has always needed to be part of the implementation process. Why should that change now?

安全一直需要成为实施过程的一部分。为什么现在应该改变这一点？==

## Two Ways to Vibe-Code Responsibly 负责任地进行 Vibe-Code 的两种方式#

As stated in [this great ressource](https://www-cdn.anthropic.com/58284b19e702b49db9302d5b6f135ad8871e7658.pdf) by Anthropic, there are two viable ways to vibe-code a production-ready project in 2025:

正如 Anthropic 在这个伟大的资源中所述，2025 年有两种可行的方法来为一个生产就绪的项目进行 vibe-code：

&gt; Learn to distinguish between tasks that work well asynchronously (peripheral features, prototyping) versus those needing synchronous supervision (core business logic, critical fixes). Abstract tasks on the product’s edges can be handled with “auto-accept mode,” while core functionality requires closer oversight.
&gt;
&gt; 学习区分适合异步处理的任务（外围特性、原型设计）与需要同步监督的任务（核心业务逻辑、关键修复）。产品边缘的抽象任务可以通过“自动接受模式”来处理，而核心功能则需要更密切的监督。

### 1. Fast Prototyping with Auto-Accept Mode 1. 使用自动接受模式进行快速原型制作

Here, you use the AI in auto-pilot mode. Describe the expected output, provide specs, and let it run. Before ending the session,**you review what’s been done**, and adjust as needed.

在这里，您以自动驾驶模式使用 AI。描述预期的输出，提供规格，然后让它运行。在结束会话之前，您回顾已完成的工作，并根据需要进行调整。

This works well when:

在以下情况下效果很好：

* You’re working on a topic you’re not familiar with 你正在研究一个你不熟悉的主题
* Generating test scaffolding (but still review the tests — a test that doesn’t test anything meaningful is just a green checkmark)
* 生成测试脚手架（但仍需审查测试——一个没有测试任何有意义内容的测试只是一个绿色勾号）
* Exploring new libraries or frameworks
* 探索新的库或框架

### 2. Synchronous Coding for Core Features 2. 核心功能的同步编码

This is where the real innovation is happening in our field.**Pair-vibe-coding, without auto-accept**, is the most effective way to ship quality features. Every suggestion is a chance to either accept or iterate.

这就是我们领域中真正创新发生的地方。没有自动接受的配对氛围编码是交付高质量功能的最有效方式。每个建议都是接受或迭代的机会。

And that changes everything: at every small step, you can correct direction before things drift.==It’s always easier to straighten a sapling than a grown tree.== The earlier you lock down good concepts and interfaces in your architecture, the better future suggestions from the AI will be.

这改变了一切：在每一个小步骤中，你都可以在事情偏离之前纠正方向。纠正一棵幼苗总比纠正一棵大树容易。你越早在架构中锁定好的概念和接口，AI 未来的建议就会越好。

**Plan your session:** When you start a session, begin with a clear plan. Read it carefully, regardless of your approach, and don’t validate it unless you fully agree with it. The plan is to the session what the seed is to the tree: bad seed, bad soil, no fruit.

规划你的会议：当你开始一个会议时，首先要有一个清晰的计划。仔细阅读它，无论你的方法如何，除非你完全同意，否则不要验证它。计划对会议的意义就像种子对树木的意义：坏种子，坏土壤，没有果实。

## The Vibe-Coding Checklist Vibe-Coding 检查清单

Before pushing any AI-generated code:在推送任何 AI 生成的代码之前：

* [ ]  **Architecture Check**: Does this follow our established patterns?架构检查：这是否遵循我们既定的模式？
* [ ]  **Security Review**: Are all resources properly scoped to users?安全审查：所有资源是否正确地限制在用户范围内？
* [ ]  **Tests**: Do they actually test meaningful behavior?测试：它们是否真的测试有意义的行为？

But also, do not forget to check:但也不要忘记检查：

* [ ]  **Documentation**: Will** ***you* understand this in 6 months?文档：你能在 6 个月内理解这个吗？
* [ ]  **Error Handling**: Are edge cases covered?错误处理：边缘情况是否被覆盖？
* [ ]  **Performance**: Any obvious N+1 queries or inefficiencies?性能：是否存在明显的 N+1 查询或低效情况？

And above all, make sure to:最重要的是，确保：

* [ ]  ==Leave with some **knowledge** of the new code==.带着对新代码的一些了解离开。

## To Wrap It Up 总结一下

AI coding assistants are powerful tools, but they’re amplifiers of your expertise, not replacements for it. The day you stop understanding your codebase is the day you stop being its architect.

AI 编程助手是强大的工具，但它们是你专业知识的放大器，而不是替代品。你停止理解代码库的那一天，就是你停止成为其架构师的那一天。

**Teams:** don’t cancel code reviews thinking Claude Code acts as a second dev alongside the one assigned to the feature. Bugs aren’t the biggest threat—losing mastery of your domain and architecture is. That’s the real roadblock to innovation.

团队：不要因为认为 Claude Code 作为分配给该功能的开发者的第二个开发者而取消代码审查。错误并不是最大的威胁——失去对你领域和架构的掌控才是。那才是真正的创新障碍。

**Engineers:** you can usually let the AI** ***RTFM* but you:** **==Read That F\*cking Code==!

工程师们：你们通常可以让 AI 去读说明书，但你们：读那该死的代码！
</content:encoded><guid isPermaLink="false">83</guid></item><item><title>wgui库分享</title><link>https://www.open-isle.com/posts/84</link><description>貌似webgpu不温不火的(可能是我才开始关注的原因吧，之前确实没怎么听说这个)，但是最近看了[鸿蒙HDC](https://www.bilibili.com/video/BV1nWNXzLEuw/?spm_id_from=333.337.search-card.all.click&amp;vd_source=a6e9e72f334103d28476ce3f30850f61)，感觉国内还是很大可能还带火一波webgpu，可因为鉴于计算机图形学的学习难度吗😕 ，但好在wgsl学习起来是要比其他着色语言要现代化好学一点的，而且webgpu不像webgl那样依赖于web这个环境，允许在脱离了web的环境，也就是原生中继续开发，这使得webgpu开发更高性能的原生App成为可能

---

我想分享的是我发现的一个比较有趣的webgpu库 [wgui](https://github.com/littledivy/wgui)，他通过[deno 对 SDL2的封装](https://github.com/littledivy/deno_sdl2)让SDL作为应用后端，webgpu作为图形后端，加上jsx描述UI方式，以及类React的hooks，以及函数组件，让我觉得挺有意思的，特别是在开发便利度这一方面，可惜deno的webgpu api与其他FFI接口都不是很稳定，以及这个库的目前版本就有很多bug，以及基本组件的缺失，以及这么大一个项目就3人在维护，所以我只把他当作一个比较有意思的玩具项目推荐出来

---

题外话：如果你是rust高手可以用[bevy](https://bevy.org/)体验下webgpu，如果想在web体验可以选择Three，但我还是推荐新出的[orillusion](https://www.orillusion.com/)，只为webgpu设计，而且在设计上也比Three更加面向对象与组合式
</description><content:encoded>貌似webgpu不温不火的(可能是我才开始关注的原因吧，之前确实没怎么听说这个)，但是最近看了[鸿蒙HDC](https://www.bilibili.com/video/BV1nWNXzLEuw/?spm_id_from=333.337.search-card.all.click&amp;vd_source=a6e9e72f334103d28476ce3f30850f61)，感觉国内还是很大可能还带火一波webgpu，可因为鉴于计算机图形学的学习难度吗😕 ，但好在wgsl学习起来是要比其他着色语言要现代化好学一点的，而且webgpu不像webgl那样依赖于web这个环境，允许在脱离了web的环境，也就是原生中继续开发，这使得webgpu开发更高性能的原生App成为可能

---

我想分享的是我发现的一个比较有趣的webgpu库 [wgui](https://github.com/littledivy/wgui)，他通过[deno 对 SDL2的封装](https://github.com/littledivy/deno_sdl2)让SDL作为应用后端，webgpu作为图形后端，加上jsx描述UI方式，以及类React的hooks，以及函数组件，让我觉得挺有意思的，特别是在开发便利度这一方面，可惜deno的webgpu api与其他FFI接口都不是很稳定，以及这个库的目前版本就有很多bug，以及基本组件的缺失，以及这么大一个项目就3人在维护，所以我只把他当作一个比较有意思的玩具项目推荐出来

---

题外话：如果你是rust高手可以用[bevy](https://bevy.org/)体验下webgpu，如果想在web体验可以选择Three，但我还是推荐新出的[orillusion](https://www.orillusion.com/)，只为webgpu设计，而且在设计上也比Three更加面向对象与组合式
</content:encoded><guid isPermaLink="false">84</guid></item><item><title>收集llms.txt</title><link>https://www.open-isle.com/posts/86</link><description>感觉可以开一个项目，收集各种llms.txt，然后按照类型分好类，就有点像搭建知识库一样，比如框架有关的就放框架的文件夹，语言有关的就放语言中，甚至不同语言互相交互都可以写一个分类（这就是知识库吧！），这样不管是训练AI还是使用AI，如果有什么需要直接来仓库方找llms.txt给AI看，就可以让AI快速上手某个领域，减少AI幻觉，还可以让冷门领域的开发快速得到AI辅助

---

局限性：

- 并不是所有语言，框架，项目等都会去写LLms.txt，维护这个项目的人既是收集者也要是编写者，可以先写一个通过最佳实践编写出一个编写规范llms.txt，再让AI去根据这个去扫描仓库的形式来编写，但是即使是像deepwiki这样的，假如你只给他一个编译器源码，而不给标准库源码，他也只会去猜是你实现的语言语法是什么样的这样的幻觉
- 以及大型项目的llms.txt一般也会十分庞大，导致AI使用时严重消耗token，不过解决办法也很简单就是分模块编写llvm.txt，如react/core-llms.txt，react/hooks-llms.txt...
- 或许已经有人这么干了，但是没有什么成功的可能，以及对AI幻觉的减少也并没有减少多少

---

一个玩笑：

- 既然写了语言，框架，那么是不是后面就要写生态中每个包的llms.txt，到最后就是每个系统乃至整个自然科学与人文科学，那么不就成了AI的百科全书了吗（）
</description><content:encoded>感觉可以开一个项目，收集各种llms.txt，然后按照类型分好类，就有点像搭建知识库一样，比如框架有关的就放框架的文件夹，语言有关的就放语言中，甚至不同语言互相交互都可以写一个分类（这就是知识库吧！），这样不管是训练AI还是使用AI，如果有什么需要直接来仓库方找llms.txt给AI看，就可以让AI快速上手某个领域，减少AI幻觉，还可以让冷门领域的开发快速得到AI辅助

---

局限性：

- 并不是所有语言，框架，项目等都会去写LLms.txt，维护这个项目的人既是收集者也要是编写者，可以先写一个通过最佳实践编写出一个编写规范llms.txt，再让AI去根据这个去扫描仓库的形式来编写，但是即使是像deepwiki这样的，假如你只给他一个编译器源码，而不给标准库源码，他也只会去猜是你实现的语言语法是什么样的这样的幻觉
- 以及大型项目的llms.txt一般也会十分庞大，导致AI使用时严重消耗token，不过解决办法也很简单就是分模块编写llvm.txt，如react/core-llms.txt，react/hooks-llms.txt...
- 或许已经有人这么干了，但是没有什么成功的可能，以及对AI幻觉的减少也并没有减少多少

---

一个玩笑：

- 既然写了语言，框架，那么是不是后面就要写生态中每个包的llms.txt，到最后就是每个系统乃至整个自然科学与人文科学，那么不就成了AI的百科全书了吗（）
</content:encoded><guid isPermaLink="false">86</guid></item><item><title>今天可以兑换奶茶/咖啡了</title><link>https://www.open-isle.com/posts/87</link><description>水一贴，今天到达lv1了，可以兑换奶茶/咖啡了，美滋滋
</description><content:encoded>水一贴，今天到达lv1了，可以兑换奶茶/咖啡了，美滋滋
</content:encoded><guid isPermaLink="false">87</guid></item><item><title>点击头像 - 个人主页 - 页面404</title><link>https://www.open-isle.com/posts/88</link><description>点击头像 - 个人主页 - 页面404


# 404 - 页面不存在
</description><content:encoded>点击头像 - 个人主页 - 页面404


# 404 - 页面不存在
</content:encoded><guid isPermaLink="false">88</guid></item><item><title>分享一个开发人员的计算机软考资料</title><link>https://www.open-isle.com/posts/89</link><description>分享一个开发人员的计算机软考资料

我用夸克网盘分享了「2025系统架构师考试复习资料」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：https://pan.quark.cn/s/6033bc4ef9eb
</description><content:encoded>分享一个开发人员的计算机软考资料

我用夸克网盘分享了「2025系统架构师考试复习资料」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：https://pan.quark.cn/s/6033bc4ef9eb
</content:encoded><guid isPermaLink="false">89</guid></item><item><title>连着好几天的雨，心情都不美好了</title><link>https://www.open-isle.com/posts/90</link><description>连着好几天的雨，心情都不美好了！
</description><content:encoded>连着好几天的雨，心情都不美好了！
</content:encoded><guid isPermaLink="false">90</guid></item><item><title>声学信号 求助</title><link>https://www.open-isle.com/posts/92</link><description>我想要关于声学信号的特征，用于分类使用，大家能不能把知道的都告诉我
</description><content:encoded>我想要关于声学信号的特征，用于分类使用，大家能不能把知道的都告诉我
</content:encoded><guid isPermaLink="false">92</guid></item><item><title>奶茶贴勿进（打扰🙏）</title><link>https://www.open-isle.com/posts/93</link><description>zsbd zsbd
</description><content:encoded>zsbd zsbd
</content:encoded><guid isPermaLink="false">93</guid></item><item><title>升级level 1努力中</title><link>https://www.open-isle.com/posts/94</link><description>昨日申请，今日报道，水此一贴，留个痕迹🎉️
</description><content:encoded>昨日申请，今日报道，水此一贴，留个痕迹🎉️
</content:encoded><guid isPermaLink="false">94</guid></item><item><title>Mac性能监控软件推荐——可爱小猫Runcat</title><link>https://www.open-isle.com/posts/95</link><description>非常可爱又能监控系统状态

![Clipboard_Screenshot_1754368708.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/a9626ab813074a73a64ba0de8edc0c97.png)

![Clipboard_Screenshot_1754368665.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/a34b6605e8c54e4d88a41626bb7422bc.png)
</description><content:encoded>非常可爱又能监控系统状态

![Clipboard_Screenshot_1754368708.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/a9626ab813074a73a64ba0de8edc0c97.png)

![Clipboard_Screenshot_1754368665.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/a34b6605e8c54e4d88a41626bb7422bc.png)
</content:encoded><guid isPermaLink="false">95</guid></item><item><title>想统计自己家宽带每个月的使用流量，有什么好的办法？</title><link>https://www.open-isle.com/posts/96</link><description>RT
</description><content:encoded>RT
</content:encoded><guid isPermaLink="false">96</guid></item><item><title>发点什么呢？</title><link>https://www.open-isle.com/posts/97</link><description>新人，记录我的第一篇帖子，就这吧。
</description><content:encoded>新人，记录我的第一篇帖子，就这吧。
</content:encoded><guid isPermaLink="false">97</guid></item><item><title>怎么感觉网站卡卡的呢</title><link>https://www.open-isle.com/posts/98</link><description>总感觉很卡加载很不流畅
</description><content:encoded>总感觉很卡加载很不流畅
</content:encoded><guid isPermaLink="false">98</guid></item><item><title>开源从入门到入土（上）为 Openlsle 社区增加一个简易积分系统</title><link>https://www.open-isle.com/posts/99</link><description>系列最终目标：为 Openlsle 实现一个简易积分系统，实现如下功能：

* 用户总积分的查询功能
* 发帖、回复他人、收到回复、收到赞赏四个场景下的用户积分值获取功能

在实现功能之前，我们可能会有很多疑惑：从哪里开始？代码会不会对其他代码造成影响？会不会遗漏某些场景？

因此，我们需要明确一点，积分和经验的获取场景和获取方式在很多时候是相同的，比如点赞，很显然此时经验和积分都应该增加。所以本篇会先从一次点赞后经验的获取流程开始分析，直到我们逐渐理清整个脉络，然后再逐步实现我们的简易积分系统。

首先我们随意打开一个帖子，比如 https://www.open-isle.com/posts/70

然后按 f12，进入网络控制台，给帖子点一个赞，明确一下此时调用后端的哪个接口

![屏幕截图 2025-08-05 151454.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/d92386cb5bb94420aa52e6a4badf28cd.png)

然后打开 IDEA，点击端点，找到其中最符合请求URL的请求路径，如图：

![屏幕截图 2025-08-05 163400.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/6bef83b9e363455ab2202f116020e31d.png)

接下来就简单了，双击进入方法体中，查看其代码如下：

```Java
@PostMapping("/posts/{postId}/reactions")
public ResponseEntity&lt;ReactionDto&gt; reactToPost(@PathVariable Long postId,
                                               @RequestBody ReactionRequest req,
                                              Authentication auth) {
    Reaction reaction = reactionService.reactToPost(auth.getName(), postId, req.getType());
    if (reaction == null) {
        return ResponseEntity.noContent().build();
    }
    ReactionDto dto = reactionMapper.toDto(reaction);
    dto.setReward(levelService.awardForReaction(auth.getName()));
    return ResponseEntity.ok(dto);
}
```

通过观察，我们发现其首先调用了

`public Reaction reactToPost(String username, Long postId, ReactionType type)`方法，通过方法名，我们可以猜测其作用应该是存储一条和帖子关联的点赞记录。

按住 ctrl 单击方法名，查看其方法体如下（为了方便理解添加了一些注释）：

```TypeScript
@Transactional
public Reaction reactToPost(String username, Long postId, ReactionType type) {
    // 通过用户名获取用户信息
    User user = userRepository.findByUsername(username)
            .orElseThrow(() -&gt; new com.openisle.exception.NotFoundException("User not found"));
    // 通过帖子ID获取帖子信息
    Post post = postRepository.findById(postId)
            .orElseThrow(() -&gt; new com.openisle.exception.NotFoundException("Post not found"));
    // 如果已经存在过点赞记录（说明此时在取消点赞），则删除该点赞记录，并返回 null
    java.util.Optional&lt;Reaction&gt; existing =
            reactionRepository.findByUserAndPostAndType(user, post, type);
    if (existing.isPresent()) {
        reactionRepository.delete(existing.get());
        return null;
    }
    // 如果还没点过赞，就将该点赞记录存储至数据库
    Reaction reaction = new Reaction();
    reaction.setUser(user);
    reaction.setPost(post);
    reaction.setType(type);
    reaction = reactionRepository.save(reaction);
    // 如果点赞者不是发帖人，就向发帖人推送一条被点赞通知
    if (!user.getId().equals(post.getAuthor().getId())) {
        notificationService.createNotification(post.getAuthor(), NotificationType.REACTION, post, null, null, user, type, null);
    }
    return reaction;
}
```

接下来返回刚刚的方法体中，继续阅读

```Plain
if (reaction == null) {
    return ResponseEntity.noContent().build();
}
```

这一块的作用是为了对应取消点赞的情况，还记得刚刚已经存在点赞记录时会返回null嘛？

此时后端就会返回一个没有内容的返回体，我们可以取消刚刚的帖子点赞验证一下，如图：

![屏幕截图 2025-08-05 164723.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/f1e96a2e08f64936aa032fc32fe80036.png)

可以看见状态代码处显示 `204 No Content`，证明我们刚刚的分析是正确的。

继续向下

```Plain
ReactionDto dto = reactionMapper.toDto(reaction);
dto.setReward(levelService.awardForReaction(auth.getName()));
```

第一行是为了将 reaction 转成前端需要的形式，重点是第二行

可以注意到其中涉及到了另一个服务 `levelService`，并调用了其方法 `awardForReaction`，

根据名字，可以推测出这个部分就是我们需要研究的重点，也就是奖励经验的地方，我们在下一篇中会尝试在该处加一个奖励积分的函数

进入`awardForReaction`方法体，其代码如下（添加了部分注释方便阅读）：

```SQL
public int awardForReaction(String username) {
    // 通过用户名查找用户信息
    User user = userRepository.findByUsername(username).orElseThrow();
    ExperienceLog log = getTodayLog(user);
    if (log.getReactionCount() &gt; 3) return 0;
    log.setReactionCount(log.getReactionCount() + 1);
    experienceLogRepository.save(log);
    return addExperience(user,5);
}
```

很显然，主要重点是第4行往后的代码逻辑。首先，我们可以通过方法名产生一个合理的猜测，即该系统会把用户每天的活动情况作为一种日志存储起来。

可以进入`getTodayLog`方法体内验证一下我们的猜想

```SQL
private ExperienceLog getTodayLog(User user) {
    LocalDate today = LocalDate.now();
    return experienceLogRepository.findByUserAndLogDate(user, today)
            .orElseGet(() -&gt; {
                ExperienceLog log = new ExperienceLog();
                log.setUser(user);
                log.setLogDate(today);
                log.setPostCount(0);
                log.setCommentCount(0);
                log.setReactionCount(0);
                return experienceLogRepository.save(log);
            });
}
```

第一行获取当前日期，第二行则通过日期去搜索今日的活动日志，如果找不到，则调用一个匿名函数并以其值作为返回值。这个判断过程通过`orElseGet`方法实现，可以看一下 java 官方对其的描述

&gt; If a value is present, returns the value, otherwise returns the result produced by the supplying function.

翻译过来就是

&gt; 如果存在值，则返回该值，否则返回由提供函数生成的结果。

那么基本可以证明我们刚刚关于日志的猜想是正确的（~~猜测好像都挺准确哈哈哈哈哈，我保证没有事先看过代码~~）

那日志到底记录的什么内容呢？我们可以直接去 model 目录瞅一眼

```Java
@Entity
@Getter
@Setter
@NoArgsConstructor
@Table(name = "experience_logs",
       uniqueConstraints = @UniqueConstraint(columnNames = {"user_id", "log_date"}))
public class ExperienceLog {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_id")
    private User user;

    @Column(name = "log_date", nullable = false)
    private LocalDate logDate;

    @Column(name = "post_count", nullable = false)
    private int postCount;

    @Column(name = "comment_count", nullable = false)
    private int commentCount;

    @Column(name = "reaction_count", nullable = false)
    private int reactionCount;
}
```

基本上就是记录今天发帖次数，点赞次数，评论次数等等。

现在我们继续向下，有了刚刚的猜想，剩下的其实非常明了：

```Plain
// 要是今天已经点赞超过3次，就啥也不干直接返回0
if (log.getReactionCount() &gt; 3) return 0;
// 要是没超过就给点赞次数加1
log.setReactionCount(log.getReactionCount() + 1);
// 保存刚刚对点赞次数的更改
experienceLogRepository.save(log);
// 给用户加5点经验，然后返回增加的经验值（就是返回5）
return addExperience(user,5);
```

那么一整个流程其实也就到此结束，最后后端会返回刚刚得到的dto和一个200状态码给前端，我们可以验证一下

![屏幕截图 2025-08-05 172224.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/2eaa6e111f3c4f539bc9794a3e1f8e85.png)

因为我今天已经点过很多赞，所以这次没有得到经验奖励，呜呜呜\~

不过读者朋友你可以给我点个赞：）

我们下篇继续！
</description><content:encoded>系列最终目标：为 Openlsle 实现一个简易积分系统，实现如下功能：

* 用户总积分的查询功能
* 发帖、回复他人、收到回复、收到赞赏四个场景下的用户积分值获取功能

在实现功能之前，我们可能会有很多疑惑：从哪里开始？代码会不会对其他代码造成影响？会不会遗漏某些场景？

因此，我们需要明确一点，积分和经验的获取场景和获取方式在很多时候是相同的，比如点赞，很显然此时经验和积分都应该增加。所以本篇会先从一次点赞后经验的获取流程开始分析，直到我们逐渐理清整个脉络，然后再逐步实现我们的简易积分系统。

首先我们随意打开一个帖子，比如 https://www.open-isle.com/posts/70

然后按 f12，进入网络控制台，给帖子点一个赞，明确一下此时调用后端的哪个接口

![屏幕截图 2025-08-05 151454.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/d92386cb5bb94420aa52e6a4badf28cd.png)

然后打开 IDEA，点击端点，找到其中最符合请求URL的请求路径，如图：

![屏幕截图 2025-08-05 163400.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/6bef83b9e363455ab2202f116020e31d.png)

接下来就简单了，双击进入方法体中，查看其代码如下：

```Java
@PostMapping("/posts/{postId}/reactions")
public ResponseEntity&lt;ReactionDto&gt; reactToPost(@PathVariable Long postId,
                                               @RequestBody ReactionRequest req,
                                              Authentication auth) {
    Reaction reaction = reactionService.reactToPost(auth.getName(), postId, req.getType());
    if (reaction == null) {
        return ResponseEntity.noContent().build();
    }
    ReactionDto dto = reactionMapper.toDto(reaction);
    dto.setReward(levelService.awardForReaction(auth.getName()));
    return ResponseEntity.ok(dto);
}
```

通过观察，我们发现其首先调用了

`public Reaction reactToPost(String username, Long postId, ReactionType type)`方法，通过方法名，我们可以猜测其作用应该是存储一条和帖子关联的点赞记录。

按住 ctrl 单击方法名，查看其方法体如下（为了方便理解添加了一些注释）：

```TypeScript
@Transactional
public Reaction reactToPost(String username, Long postId, ReactionType type) {
    // 通过用户名获取用户信息
    User user = userRepository.findByUsername(username)
            .orElseThrow(() -&gt; new com.openisle.exception.NotFoundException("User not found"));
    // 通过帖子ID获取帖子信息
    Post post = postRepository.findById(postId)
            .orElseThrow(() -&gt; new com.openisle.exception.NotFoundException("Post not found"));
    // 如果已经存在过点赞记录（说明此时在取消点赞），则删除该点赞记录，并返回 null
    java.util.Optional&lt;Reaction&gt; existing =
            reactionRepository.findByUserAndPostAndType(user, post, type);
    if (existing.isPresent()) {
        reactionRepository.delete(existing.get());
        return null;
    }
    // 如果还没点过赞，就将该点赞记录存储至数据库
    Reaction reaction = new Reaction();
    reaction.setUser(user);
    reaction.setPost(post);
    reaction.setType(type);
    reaction = reactionRepository.save(reaction);
    // 如果点赞者不是发帖人，就向发帖人推送一条被点赞通知
    if (!user.getId().equals(post.getAuthor().getId())) {
        notificationService.createNotification(post.getAuthor(), NotificationType.REACTION, post, null, null, user, type, null);
    }
    return reaction;
}
```

接下来返回刚刚的方法体中，继续阅读

```Plain
if (reaction == null) {
    return ResponseEntity.noContent().build();
}
```

这一块的作用是为了对应取消点赞的情况，还记得刚刚已经存在点赞记录时会返回null嘛？

此时后端就会返回一个没有内容的返回体，我们可以取消刚刚的帖子点赞验证一下，如图：

![屏幕截图 2025-08-05 164723.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/f1e96a2e08f64936aa032fc32fe80036.png)

可以看见状态代码处显示 `204 No Content`，证明我们刚刚的分析是正确的。

继续向下

```Plain
ReactionDto dto = reactionMapper.toDto(reaction);
dto.setReward(levelService.awardForReaction(auth.getName()));
```

第一行是为了将 reaction 转成前端需要的形式，重点是第二行

可以注意到其中涉及到了另一个服务 `levelService`，并调用了其方法 `awardForReaction`，

根据名字，可以推测出这个部分就是我们需要研究的重点，也就是奖励经验的地方，我们在下一篇中会尝试在该处加一个奖励积分的函数

进入`awardForReaction`方法体，其代码如下（添加了部分注释方便阅读）：

```SQL
public int awardForReaction(String username) {
    // 通过用户名查找用户信息
    User user = userRepository.findByUsername(username).orElseThrow();
    ExperienceLog log = getTodayLog(user);
    if (log.getReactionCount() &gt; 3) return 0;
    log.setReactionCount(log.getReactionCount() + 1);
    experienceLogRepository.save(log);
    return addExperience(user,5);
}
```

很显然，主要重点是第4行往后的代码逻辑。首先，我们可以通过方法名产生一个合理的猜测，即该系统会把用户每天的活动情况作为一种日志存储起来。

可以进入`getTodayLog`方法体内验证一下我们的猜想

```SQL
private ExperienceLog getTodayLog(User user) {
    LocalDate today = LocalDate.now();
    return experienceLogRepository.findByUserAndLogDate(user, today)
            .orElseGet(() -&gt; {
                ExperienceLog log = new ExperienceLog();
                log.setUser(user);
                log.setLogDate(today);
                log.setPostCount(0);
                log.setCommentCount(0);
                log.setReactionCount(0);
                return experienceLogRepository.save(log);
            });
}
```

第一行获取当前日期，第二行则通过日期去搜索今日的活动日志，如果找不到，则调用一个匿名函数并以其值作为返回值。这个判断过程通过`orElseGet`方法实现，可以看一下 java 官方对其的描述

&gt; If a value is present, returns the value, otherwise returns the result produced by the supplying function.

翻译过来就是

&gt; 如果存在值，则返回该值，否则返回由提供函数生成的结果。

那么基本可以证明我们刚刚关于日志的猜想是正确的（~~猜测好像都挺准确哈哈哈哈哈，我保证没有事先看过代码~~）

那日志到底记录的什么内容呢？我们可以直接去 model 目录瞅一眼

```Java
@Entity
@Getter
@Setter
@NoArgsConstructor
@Table(name = "experience_logs",
       uniqueConstraints = @UniqueConstraint(columnNames = {"user_id", "log_date"}))
public class ExperienceLog {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "user_id")
    private User user;

    @Column(name = "log_date", nullable = false)
    private LocalDate logDate;

    @Column(name = "post_count", nullable = false)
    private int postCount;

    @Column(name = "comment_count", nullable = false)
    private int commentCount;

    @Column(name = "reaction_count", nullable = false)
    private int reactionCount;
}
```

基本上就是记录今天发帖次数，点赞次数，评论次数等等。

现在我们继续向下，有了刚刚的猜想，剩下的其实非常明了：

```Plain
// 要是今天已经点赞超过3次，就啥也不干直接返回0
if (log.getReactionCount() &gt; 3) return 0;
// 要是没超过就给点赞次数加1
log.setReactionCount(log.getReactionCount() + 1);
// 保存刚刚对点赞次数的更改
experienceLogRepository.save(log);
// 给用户加5点经验，然后返回增加的经验值（就是返回5）
return addExperience(user,5);
```

那么一整个流程其实也就到此结束，最后后端会返回刚刚得到的dto和一个200状态码给前端，我们可以验证一下

![屏幕截图 2025-08-05 172224.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/2eaa6e111f3c4f539bc9794a3e1f8e85.png)

因为我今天已经点过很多赞，所以这次没有得到经验奖励，呜呜呜\~

不过读者朋友你可以给我点个赞：）

我们下篇继续！
</content:encoded><guid isPermaLink="false">99</guid></item><item><title>免费学前教育来了</title><link>https://www.open-isle.com/posts/100</link><description>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/a911e0f1545e48609b42267a5dd9a78d.png)

日前，国务院办公厅印发《关于逐步推行免费学前教育的意见》（以下简称《意见》），推进学前教育普及普惠安全优质发展。

《意见》强调，坚持以习近平新时代中国特色社会主义思想为指导，深入贯彻党的二十大和二十届二中、三中全会精神，全面贯彻党的教育方针，聚焦人民群众所急所需所盼，按照强化普及普惠、稳妥有序推进、加大政府投入、经费合理分担的原则，逐步免除学前教育保育教育费，有效降低教育成本，提高基本公共教育服务水平，办好人民满意的教育。

《意见》明确，从2025年秋季学期起，免除公办幼儿园学前一年在园儿童保育教育费。免保育教育费标准按照县级以上地方人民政府及其教育、价格主管部门批准的公办幼儿园保育教育费收费标准（不含伙食费、住宿费、杂费等）执行。对在教育部门批准设立的民办幼儿园就读的适龄儿童，参照当地同类型公办幼儿园免除水平，相应减免保育教育费。民办幼儿园保育教育费高出免除水平的部分，幼儿园可以按规定继续向在园儿童家庭收取。对因免保育教育费导致幼儿园收入减少的部分，由财政部门综合考虑免保育教育费在园儿童人数、所在地保育教育费生均实际收费水平等情况补助幼儿园。

《意见》提出，在国家统一实施的免保育教育费政策基础上，鼓励各省结合实际，进一步巩固落实家庭经济困难儿童、孤儿和残疾儿童等群体资助政策，做好兜底保障。同时，要认真落实《中华人民共和国学前教育法》，坚持保基本、保普惠，进一步健全学前教育投入机制。

《意见》要求，各省要发挥省级统筹作用，完善工作机制，明确责任分工，制定具体实施方案，与本地区已实施的学前教育资助政策做好衔接。地方各级财政、教育部门要加强日常监控，强化资金保障和使用管理，及时足额拨付资金，确保幼儿园正常运转，严禁拖欠教师工资。地方各级教育部门要严格落实监管责任，规范办园行为，切实守护好在园儿童身心健康。
</description><content:encoded>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/a911e0f1545e48609b42267a5dd9a78d.png)

日前，国务院办公厅印发《关于逐步推行免费学前教育的意见》（以下简称《意见》），推进学前教育普及普惠安全优质发展。

《意见》强调，坚持以习近平新时代中国特色社会主义思想为指导，深入贯彻党的二十大和二十届二中、三中全会精神，全面贯彻党的教育方针，聚焦人民群众所急所需所盼，按照强化普及普惠、稳妥有序推进、加大政府投入、经费合理分担的原则，逐步免除学前教育保育教育费，有效降低教育成本，提高基本公共教育服务水平，办好人民满意的教育。

《意见》明确，从2025年秋季学期起，免除公办幼儿园学前一年在园儿童保育教育费。免保育教育费标准按照县级以上地方人民政府及其教育、价格主管部门批准的公办幼儿园保育教育费收费标准（不含伙食费、住宿费、杂费等）执行。对在教育部门批准设立的民办幼儿园就读的适龄儿童，参照当地同类型公办幼儿园免除水平，相应减免保育教育费。民办幼儿园保育教育费高出免除水平的部分，幼儿园可以按规定继续向在园儿童家庭收取。对因免保育教育费导致幼儿园收入减少的部分，由财政部门综合考虑免保育教育费在园儿童人数、所在地保育教育费生均实际收费水平等情况补助幼儿园。

《意见》提出，在国家统一实施的免保育教育费政策基础上，鼓励各省结合实际，进一步巩固落实家庭经济困难儿童、孤儿和残疾儿童等群体资助政策，做好兜底保障。同时，要认真落实《中华人民共和国学前教育法》，坚持保基本、保普惠，进一步健全学前教育投入机制。

《意见》要求，各省要发挥省级统筹作用，完善工作机制，明确责任分工，制定具体实施方案，与本地区已实施的学前教育资助政策做好衔接。地方各级财政、教育部门要加强日常监控，强化资金保障和使用管理，及时足额拨付资金，确保幼儿园正常运转，严禁拖欠教师工资。地方各级教育部门要严格落实监管责任，规范办园行为，切实守护好在园儿童身心健康。
</content:encoded><guid isPermaLink="false">100</guid></item><item><title>黑塔桌宠</title><link>https://www.open-isle.com/posts/101</link><description>项目视频介绍：[【C语言xThree.js】简单做一只小黑塔桌宠~](https://www.bilibili.com/video/BV1yyh8zXESt)

项目地址：[SyrieYume/MyHerta: 基于 C语言 + Three.js 的黑塔桌宠程序](https://github.com/SyrieYume/MyHerta)

另外我也Fork了一个WebGPU版本的：[AnNingUI/MyHerta-WebGPU: 基于 C语言 + Three.js 的黑塔桌宠程序](https://github.com/AnNingUI/MyHerta-WebGPU)

本人不玩崩铁，但是觉得Three.js套WebView做些这样的小东西还挺有意思的

放几张图吧

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/2fc5e3d38de44bb2bb3405f8a839f058.png)![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/f95dfd4a0d534daab9b07d82f62fdb9e.png)

然后WebGPU版本的模型加载会慢一些以及初次Hover模型描边效果会卡一下
</description><content:encoded>项目视频介绍：[【C语言xThree.js】简单做一只小黑塔桌宠~](https://www.bilibili.com/video/BV1yyh8zXESt)

项目地址：[SyrieYume/MyHerta: 基于 C语言 + Three.js 的黑塔桌宠程序](https://github.com/SyrieYume/MyHerta)

另外我也Fork了一个WebGPU版本的：[AnNingUI/MyHerta-WebGPU: 基于 C语言 + Three.js 的黑塔桌宠程序](https://github.com/AnNingUI/MyHerta-WebGPU)

本人不玩崩铁，但是觉得Three.js套WebView做些这样的小东西还挺有意思的

放几张图吧

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/2fc5e3d38de44bb2bb3405f8a839f058.png)![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/f95dfd4a0d534daab9b07d82f62fdb9e.png)

然后WebGPU版本的模型加载会慢一些以及初次Hover模型描边效果会卡一下
</content:encoded><guid isPermaLink="false">101</guid></item><item><title>今天第一天注册！留个纪念～</title><link>https://www.open-isle.com/posts/102</link><description>🎉️
</description><content:encoded>🎉️
</content:encoded><guid isPermaLink="false">102</guid></item><item><title>大家周末都是怎么度过的呢</title><link>https://www.open-isle.com/posts/103</link><description>到周三已经开始期待周末了
</description><content:encoded>到周三已经开始期待周末了
</content:encoded><guid isPermaLink="false">103</guid></item><item><title>【开源共建】本站Roadmap一览</title><link>https://www.open-isle.com/posts/104</link><description>近期有很多小伙伴加入本社群，在此再次表示强烈欢迎👏。本帖会介绍本站目前开发现状，以及未来的规划。

**如大家有自己的创意和想法，可以随意提出，亦可参与本站开发**. 我们预计会在八月发布本站2.0版本（1.0在宣传之时已发布）

## Roadmap -- release 2.0

#### 1. 支持帖子可见范围

https://github.com/nagisa77/OpenIsle/issues/385

- 用户发帖时可选可见范围

#### 2. 表情系统构建

https://github.com/nagisa77/OpenIsle/issues/384

- 目前表情系统比较单调（markdown中的表情）
- 希望对接vditor的自定义表情机制，把贴吧的表情对接过来，外加一些自定义表情包
- 另外支持键盘快捷键选择表情 比如“/”

#### 3. 支持积分机制

https://github.com/nagisa77/OpenIsle/issues/353

- 积分和等级/经验是不同的东西，积分可以消费&amp;参与活动。
- 用户发帖回帖可以获取积分（每日存在一定限制），被别人回复，按赞亦可。
- 目前应该发放一些**腾讯视频会员** &amp; **ChatGPT Plus for 1 month** &amp; **站内酷炫头像框&amp;头衔**作为兑奖礼物。
- 以此激励大家回贴发帖 🎉

#### 4. 支持勋章

https://github.com/nagisa77/OpenIsle/issues/352

- For集邮爱好者偏好，各种站内行为达到一定的程度后，可以获得成就或勋章

&gt; 🎉 另外release2.0发布前加入的朋友可以获得绝版种子用户勋章。

#### 5. 支持关闭部分消息类型

https://github.com/nagisa77/OpenIsle/issues/345

希望在消息页面添加“消息通知设置” 方便用户过滤需要的消息类型，减少打扰

#### 6. 支持邀请码

https://github.com/nagisa77/OpenIsle/issues/401

用户可以采用邀请码邀请其他用户。被邀请者、邀请者都可以获取积分

## ⚡️ 未来想要支持的

#### 类别申请

- 类别是掌控站内大方向的东西；因为每个帖子需要类别；目前的想法是采用投票机制申请类别达到自治

&gt; 用户需要花费一定积分才能使用类别申请

...... (未完待续)

## 👀待解决问题bug

- vditor编辑器新增loading
- 标记为已读同样ui优先
- 点击头像- 个人主页- 页面404（纯数字id）
- 回复偶现400，另外报错后会清空评论
- 回复帖子评论框问题
- 移动端 订阅文章 建议修改为订阅 取消订阅修改为退订
- 第三个level的 回复后需要即时刷新，以展示父亲评论
- bug:webp有链接不显示问题
- bug：邮件回复格式问题

## 🔥 开源共建

如有兴趣的小伙伴可以[加入我们](https://github.com/nagisa77/OpenIsle/issues)一起开发， 另外这是本站的[开发指南](https://www.open-isle.com/posts/82)
</description><content:encoded>近期有很多小伙伴加入本社群，在此再次表示强烈欢迎👏。本帖会介绍本站目前开发现状，以及未来的规划。

**如大家有自己的创意和想法，可以随意提出，亦可参与本站开发**. 我们预计会在八月发布本站2.0版本（1.0在宣传之时已发布）

## Roadmap -- release 2.0

#### 1. 支持帖子可见范围

https://github.com/nagisa77/OpenIsle/issues/385

- 用户发帖时可选可见范围

#### 2. 表情系统构建

https://github.com/nagisa77/OpenIsle/issues/384

- 目前表情系统比较单调（markdown中的表情）
- 希望对接vditor的自定义表情机制，把贴吧的表情对接过来，外加一些自定义表情包
- 另外支持键盘快捷键选择表情 比如“/”

#### 3. 支持积分机制

https://github.com/nagisa77/OpenIsle/issues/353

- 积分和等级/经验是不同的东西，积分可以消费&amp;参与活动。
- 用户发帖回帖可以获取积分（每日存在一定限制），被别人回复，按赞亦可。
- 目前应该发放一些**腾讯视频会员** &amp; **ChatGPT Plus for 1 month** &amp; **站内酷炫头像框&amp;头衔**作为兑奖礼物。
- 以此激励大家回贴发帖 🎉

#### 4. 支持勋章

https://github.com/nagisa77/OpenIsle/issues/352

- For集邮爱好者偏好，各种站内行为达到一定的程度后，可以获得成就或勋章

&gt; 🎉 另外release2.0发布前加入的朋友可以获得绝版种子用户勋章。

#### 5. 支持关闭部分消息类型

https://github.com/nagisa77/OpenIsle/issues/345

希望在消息页面添加“消息通知设置” 方便用户过滤需要的消息类型，减少打扰

#### 6. 支持邀请码

https://github.com/nagisa77/OpenIsle/issues/401

用户可以采用邀请码邀请其他用户。被邀请者、邀请者都可以获取积分

## ⚡️ 未来想要支持的

#### 类别申请

- 类别是掌控站内大方向的东西；因为每个帖子需要类别；目前的想法是采用投票机制申请类别达到自治

&gt; 用户需要花费一定积分才能使用类别申请

...... (未完待续)

## 👀待解决问题bug

- vditor编辑器新增loading
- 标记为已读同样ui优先
- 点击头像- 个人主页- 页面404（纯数字id）
- 回复偶现400，另外报错后会清空评论
- 回复帖子评论框问题
- 移动端 订阅文章 建议修改为订阅 取消订阅修改为退订
- 第三个level的 回复后需要即时刷新，以展示父亲评论
- bug:webp有链接不显示问题
- bug：邮件回复格式问题

## 🔥 开源共建

如有兴趣的小伙伴可以[加入我们](https://github.com/nagisa77/OpenIsle/issues)一起开发， 另外这是本站的[开发指南](https://www.open-isle.com/posts/82)
</content:encoded><guid isPermaLink="false">104</guid></item><item><title>LLM大模型智能引擎实战：SpringAI+RAG+MCP+实时搜索</title><link>https://www.open-isle.com/posts/105</link><description>我用夸克网盘分享了「慕课网《LLM大模型智能引擎实战：SpringAI+RAG+MCP+实时搜索》」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：[https://pan.quark.cn/s/5633397a650a](https://pan.quark.cn/s/5633397a650a)

![Screenshot 2025-08-06 at 11.46.19.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/5cd8e5eeee714d369e5b49d60b733558.png)
</description><content:encoded>我用夸克网盘分享了「慕课网《LLM大模型智能引擎实战：SpringAI+RAG+MCP+实时搜索》」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：[https://pan.quark.cn/s/5633397a650a](https://pan.quark.cn/s/5633397a650a)

![Screenshot 2025-08-06 at 11.46.19.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/5cd8e5eeee714d369e5b49d60b733558.png)
</content:encoded><guid isPermaLink="false">105</guid></item><item><title>有粥批么？</title><link>https://www.open-isle.com/posts/106</link><description>有水友玩明日方舟么？官服。 加好友 千夜一夕#9005
</description><content:encoded>有水友玩明日方舟么？官服。 加好友 千夜一夕#9005
</content:encoded><guid isPermaLink="false">106</guid></item><item><title>会发openisle币吗</title><link>https://www.open-isle.com/posts/107</link><description>站长会像v站一样发openisle币吗[手动滑稽]
</description><content:encoded>站长会像v站一样发openisle币吗[手动滑稽]
</content:encoded><guid isPermaLink="false">107</guid></item><item><title>划水</title><link>https://www.open-isle.com/posts/108</link><description>划水~~~~
</description><content:encoded>划水~~~~
</content:encoded><guid isPermaLink="false">108</guid></item><item><title>新人报道</title><link>https://www.open-isle.com/posts/109</link><description>从v2ex看到的，支持一下

🎉️🎉️🎉️🎉️
</description><content:encoded>从v2ex看到的，支持一下

🎉️🎉️🎉️🎉️
</content:encoded><guid isPermaLink="false">109</guid></item><item><title>为了奶茶</title><link>https://www.open-isle.com/posts/110</link><description>从小红书看到的，支持一下, 发布的时候,标签 的下拉框 我选完后,没法消失,看着好不舒服呀 😭
</description><content:encoded>从小红书看到的，支持一下, 发布的时候,标签 的下拉框 我选完后,没法消失,看着好不舒服呀 😭
</content:encoded><guid isPermaLink="false">110</guid></item><item><title>今天看新闻，有巨鲸买了10亿枚狗狗币🐶</title><link>https://www.open-isle.com/posts/111</link><description>RT
</description><content:encoded>RT
</content:encoded><guid isPermaLink="false">111</guid></item><item><title>本社区如何进行seo支持呢</title><link>https://www.open-isle.com/posts/112</link><description>本社区如何进行seo支持呢,如果目前没有,是否后续有规划呢~
</description><content:encoded>本社区如何进行seo支持呢,如果目前没有,是否后续有规划呢~
</content:encoded><guid isPermaLink="false">112</guid></item><item><title>[开源免费] KUNO 下一代国际化CMS</title><link>https://www.open-isle.com/posts/113</link><description>一个 国际化CMS 系统的下一代解决方案

![image](https://github.com/xuemian168/kuno/raw/main/docs/kuno.png)

名称灵感源自东方哲学与现代技术理念的融合：

&gt; "KUN" 是"坤"（kūn）的拼音，出自《易经》，意为大地，承载万物，象征系统对多语言、多格式内容的全面支持与包容。
&gt; "O" 代表 Origin（起源）和 Open（开放），象征内容的开始，也代表系统的开放性、拓展性与现代架构设计理念。

🚀 为什么选择 KUNO？

🎯 一键部署 - Docker 容器化，1分钟搭建完成
🌍 70+ 语言支持 - 真正的国际化优先设计
⚡  极速体验 - Go + Next.js 现代化架构 快上加快
📝 双语编辑器 - 专业级写作体验
🎨 现代设计 - 深色/浅色主题随心切换
🤖 AI驱动 - AI赋能加速工作流(支持Claude、OpenAI、Gemini等主流AI API)
📩 快速导入 - 支持Ghost、WordPress、Markdown快速批量导入

&gt; 请注意 API 相关配置均在本地存储，不上后端。

开源Repo：[GitHub](https://github.com/xuemian168/kuno)
Demo站点：[QUT.EDU.KG](http://qut.edu.kg/zh/)
Demo后台地址：[QUT.EDU.KG/ADMIN](http://qut.edu.kg/zh/admin) (admin/xuemian168)

&gt; 请文明使用，改密码是小狗

目前还在寻找更方便用户部署的方式
已上架1Panel [第三方商店](https://github.com/pooneyy/1Panel-Appstore)
</description><content:encoded>一个 国际化CMS 系统的下一代解决方案

![image](https://github.com/xuemian168/kuno/raw/main/docs/kuno.png)

名称灵感源自东方哲学与现代技术理念的融合：

&gt; "KUN" 是"坤"（kūn）的拼音，出自《易经》，意为大地，承载万物，象征系统对多语言、多格式内容的全面支持与包容。
&gt; "O" 代表 Origin（起源）和 Open（开放），象征内容的开始，也代表系统的开放性、拓展性与现代架构设计理念。

🚀 为什么选择 KUNO？

🎯 一键部署 - Docker 容器化，1分钟搭建完成
🌍 70+ 语言支持 - 真正的国际化优先设计
⚡  极速体验 - Go + Next.js 现代化架构 快上加快
📝 双语编辑器 - 专业级写作体验
🎨 现代设计 - 深色/浅色主题随心切换
🤖 AI驱动 - AI赋能加速工作流(支持Claude、OpenAI、Gemini等主流AI API)
📩 快速导入 - 支持Ghost、WordPress、Markdown快速批量导入

&gt; 请注意 API 相关配置均在本地存储，不上后端。

开源Repo：[GitHub](https://github.com/xuemian168/kuno)
Demo站点：[QUT.EDU.KG](http://qut.edu.kg/zh/)
Demo后台地址：[QUT.EDU.KG/ADMIN](http://qut.edu.kg/zh/admin) (admin/xuemian168)

&gt; 请文明使用，改密码是小狗

目前还在寻找更方便用户部署的方式
已上架1Panel [第三方商店](https://github.com/pooneyy/1Panel-Appstore)
</content:encoded><guid isPermaLink="false">113</guid></item><item><title>openai开源模型了</title><link>https://www.open-isle.com/posts/114</link><description>https://openai.com/zh-Hans-CN/open-models/
可以在这里直接试用
https://gpt-oss.com/
</description><content:encoded>https://openai.com/zh-Hans-CN/open-models/
可以在这里直接试用
https://gpt-oss.com/
</content:encoded><guid isPermaLink="false">114</guid></item><item><title>奶茶已喝上，感谢吧主！</title><link>https://www.open-isle.com/posts/115</link><description>奶茶已喝上，感谢吧主！
</description><content:encoded>奶茶已喝上，感谢吧主！
</content:encoded><guid isPermaLink="false">115</guid></item><item><title>分享一下封神2</title><link>https://www.open-isle.com/posts/116</link><description>我用夸克网盘分享了「封丨神第二部：战火西岐」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：https://pan.quark.cn/s/1a9160a762cb
</description><content:encoded>我用夸克网盘分享了「封丨神第二部：战火西岐」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：https://pan.quark.cn/s/1a9160a762cb
</content:encoded><guid isPermaLink="false">116</guid></item><item><title>[🎉Feature updated]现在已支持贴吧emoji，各位怎么看</title><link>https://www.open-isle.com/posts/118</link><description>:tieba25::tieba25::tieba25:
</description><content:encoded>:tieba25::tieba25::tieba25:
</content:encoded><guid isPermaLink="false">118</guid></item><item><title>程序员不应该在ai省钱</title><link>https://www.open-isle.com/posts/119</link><description>:tieba18: 本质上是：花钱买时间

大家每个月花多少钱使用ai产品呢


我先来：三人合租GPT Pro➕单独购买cursor➕OpenAI的api key（用于网站翻译等杂碎需求）加起来也有五六百人民币:tieba27:
</description><content:encoded>:tieba18: 本质上是：花钱买时间

大家每个月花多少钱使用ai产品呢


我先来：三人合租GPT Pro➕单独购买cursor➕OpenAI的api key（用于网站翻译等杂碎需求）加起来也有五六百人民币:tieba27:
</content:encoded><guid isPermaLink="false">119</guid></item><item><title>有没有租房/工位好物推荐？</title><link>https://www.open-isle.com/posts/120</link><description>最近痴迷于各种工位摆件，来财来财哈哈哈哈。又买了一个腕托，感觉挺好用的。
</description><content:encoded>最近痴迷于各种工位摆件，来财来财哈哈哈哈。又买了一个腕托，感觉挺好用的。
</content:encoded><guid isPermaLink="false">120</guid></item><item><title>消息全部以后后还是会标记</title><link>https://www.open-isle.com/posts/121</link><description>![图片.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/61f41f97deb744bdb7889abdb5cc1966.png)

我已经点了全部标记已读还是会显示 是不是有缓存和CDN呢
</description><content:encoded>![图片.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/61f41f97deb744bdb7889abdb5cc1966.png)

我已经点了全部标记已读还是会显示 是不是有缓存和CDN呢
</content:encoded><guid isPermaLink="false">121</guid></item><item><title>慕课网-前端跳槽突围课：React18底层源码深入剖析【完结】</title><link>https://www.open-isle.com/posts/122</link><description>### 课程目录

```markdown
第1章课程介绍
第2章学前技术储备:React核心知识点讲解
第3章学习前:底层源码的高效学习方法分享
第4章代码实践:打造轮子，自己的mini react框架
第5章React18全新底层核心运行机制:任务调度机制的代码实践
第6章React18全新底层核心运行机制:任务调度机制源码阅读，思维拔高
第7章 React渲染机制:原始渲染VDOM与性能改革Fiber的源码剖析
第8章React渲染机制:React中初次渲染流程深度剖析
第9章React渲染机制:页面初次渲染原生标签代码实践
第10章React渲染机制:手写不同组件的渲染过程，掌握其机制原理
第11章React开发的利器:Hooks底层分析
第12章React开发的利器:手写实现Hooks，掌握Hooks底层数据结构
第13章React开发的利器: React VDOM DIFF算法源码剖析
第14章React开发的利器: Hooks进阶，代码实践手动实现API
第15章React中的数据模式:代码实现，掌握Context实现原理
第16章 React中的数据模式:Context源码剖析，思维提高
第17章跨浏览器兼容的事件系统:合成事件源码剖析
第18章跨浏览器兼容的事件系统:合成事件实践，掌握框架级别的事件
第19章性能提高:React Lanes模型源码剖析
第20章性能提高:React Lanes模型手动实践
第21章课程总结
源码+PDF课件
```

![Screenshot 2025-08-07 at 16.25.26.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/93a1e3cd135c4f639ed69280a9cec079.png)

我用夸克网盘分享了「慕课网-前端跳槽突围课：React18底层源码深入剖析【完结】」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：https://pan.quark.cn/s/d6623a64c389
</description><content:encoded>### 课程目录

```markdown
第1章课程介绍
第2章学前技术储备:React核心知识点讲解
第3章学习前:底层源码的高效学习方法分享
第4章代码实践:打造轮子，自己的mini react框架
第5章React18全新底层核心运行机制:任务调度机制的代码实践
第6章React18全新底层核心运行机制:任务调度机制源码阅读，思维拔高
第7章 React渲染机制:原始渲染VDOM与性能改革Fiber的源码剖析
第8章React渲染机制:React中初次渲染流程深度剖析
第9章React渲染机制:页面初次渲染原生标签代码实践
第10章React渲染机制:手写不同组件的渲染过程，掌握其机制原理
第11章React开发的利器:Hooks底层分析
第12章React开发的利器:手写实现Hooks，掌握Hooks底层数据结构
第13章React开发的利器: React VDOM DIFF算法源码剖析
第14章React开发的利器: Hooks进阶，代码实践手动实现API
第15章React中的数据模式:代码实现，掌握Context实现原理
第16章 React中的数据模式:Context源码剖析，思维提高
第17章跨浏览器兼容的事件系统:合成事件源码剖析
第18章跨浏览器兼容的事件系统:合成事件实践，掌握框架级别的事件
第19章性能提高:React Lanes模型源码剖析
第20章性能提高:React Lanes模型手动实践
第21章课程总结
源码+PDF课件
```

![Screenshot 2025-08-07 at 16.25.26.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/93a1e3cd135c4f639ed69280a9cec079.png)

我用夸克网盘分享了「慕课网-前端跳槽突围课：React18底层源码深入剖析【完结】」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：https://pan.quark.cn/s/d6623a64c389
</content:encoded><guid isPermaLink="false">122</guid></item><item><title>可以在这里通过网盘分享影视资源吗？</title><link>https://www.open-isle.com/posts/123</link><description>想请问一下，可以在这里通过网盘（比如夸克、百度网盘、迅雷等）分享影视资源吗？这类分享有没有什么限制或者需要注意的地方？
</description><content:encoded>想请问一下，可以在这里通过网盘（比如夸克、百度网盘、迅雷等）分享影视资源吗？这类分享有没有什么限制或者需要注意的地方？
</content:encoded><guid isPermaLink="false">123</guid></item><item><title>网站有点卡卡的</title><link>https://www.open-isle.com/posts/124</link><description>Mac上使用Safari浏览器，玩一会儿会莫名其妙的被登出，需要重新登录，而且浏览帖子，加载特别慢。
</description><content:encoded>Mac上使用Safari浏览器，玩一会儿会莫名其妙的被登出，需要重新登录，而且浏览帖子，加载特别慢。
</content:encoded><guid isPermaLink="false">124</guid></item><item><title>为了奶茶</title><link>https://www.open-isle.com/posts/125</link><description>也是朋友推荐过来的，过来支持一下

感觉在页面刷新切换的时候，有些标签的页面大小不一致，感觉有点怪怪的
</description><content:encoded>也是朋友推荐过来的，过来支持一下

感觉在页面刷新切换的时候，有些标签的页面大小不一致，感觉有点怪怪的
</content:encoded><guid isPermaLink="false">125</guid></item><item><title>明天凌晨1点GPT5就发布了</title><link>https://www.open-isle.com/posts/126</link><description>好期待，等会大家一起追更:tieba3:
</description><content:encoded>好期待，等会大家一起追更:tieba3:
</content:encoded><guid isPermaLink="false">126</guid></item><item><title>建议对话框</title><link>https://www.open-isle.com/posts/127</link><description>建议回复这个对话框可以除了固定位置,再浮动一下
</description><content:encoded>建议回复这个对话框可以除了固定位置,再浮动一下
</content:encoded><guid isPermaLink="false">127</guid></item><item><title>【bug】顶栏右上角菜单字体颜色看不清</title><link>https://www.open-isle.com/posts/128</link><description>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/5b5e064024e94b37b236ba8fc4829a47.png)

右上角头像这里，字体白色了
</description><content:encoded>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/5b5e064024e94b37b236ba8fc4829a47.png)

右上角头像这里，字体白色了
</content:encoded><guid isPermaLink="false">128</guid></item><item><title>昨晚网站挂了</title><link>https://www.open-isle.com/posts/129</link><description>:tieba66: 由于边缘加速业务的问题，dns失效，大家多多见谅，以后尽量避免此类问题
</description><content:encoded>:tieba66: 由于边缘加速业务的问题，dns失效，大家多多见谅，以后尽量避免此类问题
</content:encoded><guid isPermaLink="false">129</guid></item><item><title>[预热🎉]即将上线抽奖贴功能</title><link>https://www.open-isle.com/posts/130</link><description>第一个抽奖 抽啥呢 大家有什么建议:tieba2:
</description><content:encoded>第一个抽奖 抽啥呢 大家有什么建议:tieba2:
</content:encoded><guid isPermaLink="false">130</guid></item><item><title>Feature updated🎉：本站已迁移至Nuxt4!</title><link>https://www.open-isle.com/posts/131</link><description>感谢 @[biliww997] 建议。目前已迁移到nuxt4 ssr框架。如大家遇到问题请持续反馈
</description><content:encoded>感谢 @[biliww997] 建议。目前已迁移到nuxt4 ssr框架。如大家遇到问题请持续反馈
</content:encoded><guid isPermaLink="false">131</guid></item><item><title>切换tag时无法更新页面</title><link>https://www.open-isle.com/posts/132</link><description>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/1c9c711ac0ec4f3ca70ad646a60b9532.png)

在首页（话题）点击以上按钮皆无法跳转到对应页面（应该不是我的网络问题吧），只有在话题，类别，tag之外的其他页面才可以跳转
</description><content:encoded>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/1c9c711ac0ec4f3ca70ad646a60b9532.png)

在首页（话题）点击以上按钮皆无法跳转到对应页面（应该不是我的网络问题吧），只有在话题，类别，tag之外的其他页面才可以跳转
</content:encoded><guid isPermaLink="false">132</guid></item><item><title>重磅news:GPT 5发布了</title><link>https://www.open-isle.com/posts/133</link><description>![IMG_2089.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/8a42cfdf0839406c9739bd554892cac4.png)

大家使用体验如何呢
</description><content:encoded>![IMG_2089.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/8a42cfdf0839406c9739bd554892cac4.png)

大家使用体验如何呢
</content:encoded><guid isPermaLink="false">133</guid></item><item><title>Clay的尝试以及适配渲染后端的经历</title><link>https://www.open-isle.com/posts/134</link><description>之前看到[Clay - UI Layout Library](https://www.nicbarker.com/clay)这个库觉得挺有意思的，感觉用c + canvas写页面是个很有趣的挑战(~~Qt不算，因为Qt这可以算是一门新语言了，另外canvas网页也就很难seo优化了~~)

这是他的官网

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/661cebb19bea47dfbdee75274d96f1bb.png)

，但因为我的C一直不是很好，所以一直没有来尝试，最近有时间了加上AI浪潮(~~AI写c居然还可以~~)，我就去看了看他们的[仓库](https://github.com/nicbarker/clay)，发现不仅仅有canvas2d与html的实现，居然还有原生后端的实现

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/76d04787c364464ba855ca097931fb50.png)

在B站还看到了有大佬实现了imgui的后端适配，于是我就想着要不我也来写个玩玩，然后我就去看看SDL2的适配示例，发现太复杂了，于是自己与AI写了一个[简化版](https://github.com/AnNingUI/Clay-Sdl2-Test)，最后渲染出结果的时候我感觉十分有成就感

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/6020c43bbb8a4272a36534b6df7798f5.png)

之后觉得我最近也在看webgpu的内容，要不写个[webgpu的原生后端](https://github.com/gfx-rs/wgpu-native)适配，觉得应该和SDL一样实现一个极度简化版不难，但事实我的想法想错了，毕竟要从着色器还是比较麻烦的，实现过程中遇见了好多了问题，比如webgpu的函数是异步的，所以嘚拿到所有渲染任务才可以批处理渲染，不然只会渲染最后一个clay指令的任务，然后是为了简化没有使用freetype作为字体渲染，选择了`stb_truetype.h`作为渲染字体的辅助，然后又是一样的问题，字符的渲染抢占了其他矩形了的渲染，导致了只在一个黑框框中渲染了最后一排字，而且都是小方块，任何我就也把文字的渲染也加入到了最后的批处理解决了，但是中文的渲染问题还没解决，然后又和AI从处理UTF-8到最后字体加载开始各种fix，最终写出一个简化的`text_render_system`，但是又遇到了文字排版错位的问题，发现每个字符的字体基线不同，又是各种fix，最后解决了一下字体颜色处理，终于也是渲染正确了

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/818bf4437f304155b574d54de947228c.png)

总的来说字体是最难处理，其他的只要写好着色器，都挺好解决的

---

SDL2示例使用的windows.h作为窗口

WebGPU示例使用GLFW3作为窗口

另外c不好但rust好的朋友可以尝试以下

[clay-ui-rs/clay: Rust bindings for Clay, a UI layout library written in C.](https://github.com/clay-ui-rs/clay)

[gfx-rs/wgpu: A cross-platform, safe, pure-Rust graphics API.](https://github.com/gfx-rs/wgpu)

因为wgpu是rust写的，我用的`wgpu-native`只是他的c绑定，所以用rust写可能会更加方便一点
</description><content:encoded>之前看到[Clay - UI Layout Library](https://www.nicbarker.com/clay)这个库觉得挺有意思的，感觉用c + canvas写页面是个很有趣的挑战(~~Qt不算，因为Qt这可以算是一门新语言了，另外canvas网页也就很难seo优化了~~)

这是他的官网

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/661cebb19bea47dfbdee75274d96f1bb.png)

，但因为我的C一直不是很好，所以一直没有来尝试，最近有时间了加上AI浪潮(~~AI写c居然还可以~~)，我就去看了看他们的[仓库](https://github.com/nicbarker/clay)，发现不仅仅有canvas2d与html的实现，居然还有原生后端的实现

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/76d04787c364464ba855ca097931fb50.png)

在B站还看到了有大佬实现了imgui的后端适配，于是我就想着要不我也来写个玩玩，然后我就去看看SDL2的适配示例，发现太复杂了，于是自己与AI写了一个[简化版](https://github.com/AnNingUI/Clay-Sdl2-Test)，最后渲染出结果的时候我感觉十分有成就感

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/6020c43bbb8a4272a36534b6df7798f5.png)

之后觉得我最近也在看webgpu的内容，要不写个[webgpu的原生后端](https://github.com/gfx-rs/wgpu-native)适配，觉得应该和SDL一样实现一个极度简化版不难，但事实我的想法想错了，毕竟要从着色器还是比较麻烦的，实现过程中遇见了好多了问题，比如webgpu的函数是异步的，所以嘚拿到所有渲染任务才可以批处理渲染，不然只会渲染最后一个clay指令的任务，然后是为了简化没有使用freetype作为字体渲染，选择了`stb_truetype.h`作为渲染字体的辅助，然后又是一样的问题，字符的渲染抢占了其他矩形了的渲染，导致了只在一个黑框框中渲染了最后一排字，而且都是小方块，任何我就也把文字的渲染也加入到了最后的批处理解决了，但是中文的渲染问题还没解决，然后又和AI从处理UTF-8到最后字体加载开始各种fix，最终写出一个简化的`text_render_system`，但是又遇到了文字排版错位的问题，发现每个字符的字体基线不同，又是各种fix，最后解决了一下字体颜色处理，终于也是渲染正确了

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/818bf4437f304155b574d54de947228c.png)

总的来说字体是最难处理，其他的只要写好着色器，都挺好解决的

---

SDL2示例使用的windows.h作为窗口

WebGPU示例使用GLFW3作为窗口

另外c不好但rust好的朋友可以尝试以下

[clay-ui-rs/clay: Rust bindings for Clay, a UI layout library written in C.](https://github.com/clay-ui-rs/clay)

[gfx-rs/wgpu: A cross-platform, safe, pure-Rust graphics API.](https://github.com/gfx-rs/wgpu)

因为wgpu是rust写的，我用的`wgpu-native`只是他的c绑定，所以用rust写可能会更加方便一点
</content:encoded><guid isPermaLink="false">134</guid></item><item><title>分享一个一站式自媒体工具平台</title><link>https://www.open-isle.com/posts/135</link><description>原牛：一站式自媒体工具平台

无需注册登录，完全免费💯

🔗 [https://mihoyonb.com](https://mihoyonb.com)

🚀 功能

- 网盘搜索
- 短视频去水印
- 字幕文件翻译
- 语音转文字
- 图片拼接
- Markdown转图片

![Screenshot 2025-08-09 at 10.02.59.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/2072ee94575244be83cc52eed4a1633b.png)
</description><content:encoded>原牛：一站式自媒体工具平台

无需注册登录，完全免费💯

🔗 [https://mihoyonb.com](https://mihoyonb.com)

🚀 功能

- 网盘搜索
- 短视频去水印
- 字幕文件翻译
- 语音转文字
- 图片拼接
- Markdown转图片

![Screenshot 2025-08-09 at 10.02.59.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/2072ee94575244be83cc52eed4a1633b.png)
</content:encoded><guid isPermaLink="false">135</guid></item><item><title>记一次服务器部署Rustdesk服务器端的过程</title><link>https://www.open-isle.com/posts/136</link><description>rustdesk是一个开源的远程控软件，简易好用。

部署也很方便，使用的docker搭建；首先需要拉取镜像**docker pull rustdesk/rustdesk-server:latest**（国内可能需要解决docker镜像拉取问题，需要配置镜像加速）

然后启动hbbs服务器

```bash
docker run -d \
--name rustdesk-hbbs \  #容器名
--network bridge \
--restart unless-stopped \
-v /root/workspace/rustdesk/data:/root \ #映射宿主机文件夹/root/workspace/rustdesk/data到容器内，下同
-p 21115:21115/tcp \ #映射端口21115到宿主机21115上，下同
-p 21116:21116/tcp \
-p 21116:21116/udp \ 
rustdesk/rustdesk-server:latest hbbs
```

接着启动hbbr服务器

```bash
docker run -d \
--name rustdesk-hbbr \ #容器名
--network bridge \ #网络模式
--restart unless-stopped \ #重启规则，
-v /root/workspace/rustdesk/data:/root \
-p 21117:21117/tcp \
-p 21119:21119/tcp \
rustdesk/rustdesk-server:latest hbbr
```

然后等运行后，hbbs容器内会自动生成key，连接时需要用到。可以使用docker logs [容器名，这里为rustdesk-hbbr]  命令查看日志，包括生成的key。

最后在Rustdesk内，导入服务器所有信息即可，最终填入的信息的效果如下图，一般默认API服务器留空即可：

![PixPin_2025-08-10_02-21.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/896057ec5cf5414981e19ca6906ee2bb.png)
</description><content:encoded>rustdesk是一个开源的远程控软件，简易好用。

部署也很方便，使用的docker搭建；首先需要拉取镜像**docker pull rustdesk/rustdesk-server:latest**（国内可能需要解决docker镜像拉取问题，需要配置镜像加速）

然后启动hbbs服务器

```bash
docker run -d \
--name rustdesk-hbbs \  #容器名
--network bridge \
--restart unless-stopped \
-v /root/workspace/rustdesk/data:/root \ #映射宿主机文件夹/root/workspace/rustdesk/data到容器内，下同
-p 21115:21115/tcp \ #映射端口21115到宿主机21115上，下同
-p 21116:21116/tcp \
-p 21116:21116/udp \ 
rustdesk/rustdesk-server:latest hbbs
```

接着启动hbbr服务器

```bash
docker run -d \
--name rustdesk-hbbr \ #容器名
--network bridge \ #网络模式
--restart unless-stopped \ #重启规则，
-v /root/workspace/rustdesk/data:/root \
-p 21117:21117/tcp \
-p 21119:21119/tcp \
rustdesk/rustdesk-server:latest hbbr
```

然后等运行后，hbbs容器内会自动生成key，连接时需要用到。可以使用docker logs [容器名，这里为rustdesk-hbbr]  命令查看日志，包括生成的key。

最后在Rustdesk内，导入服务器所有信息即可，最终填入的信息的效果如下图，一般默认API服务器留空即可：

![PixPin_2025-08-10_02-21.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/896057ec5cf5414981e19ca6906ee2bb.png)
</content:encoded><guid isPermaLink="false">136</guid></item><item><title>🎉 Feature updated: 新增勋章系统</title><link>https://www.open-isle.com/posts/137</link><description>## 今天更新了勋章系统

- 大家可以在勋章页面选择想要展示的勋章，会在发帖/评论展示
- 9.16号前注册的伙伴，会获得绝版种子用户勋章🎉；
- 后续会加入更多勋章类型 .... :tieba24:

![CleanShot 2025-08-10 at 2 .26.09@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/3050bff39c1240d6a1c5f773869b8120.png)
</description><content:encoded>## 今天更新了勋章系统

- 大家可以在勋章页面选择想要展示的勋章，会在发帖/评论展示
- 9.16号前注册的伙伴，会获得绝版种子用户勋章🎉；
- 后续会加入更多勋章类型 .... :tieba24:

![CleanShot 2025-08-10 at 2 .26.09@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/3050bff39c1240d6a1c5f773869b8120.png)
</content:encoded><guid isPermaLink="false">137</guid></item><item><title>分享一个被WSL折磨的经历</title><link>https://www.open-isle.com/posts/138</link><description>&gt; 由于已经修复好了，所以具体报错这里就不放出来了
&gt;
&gt; 如果有同样无法更新的问题记得先将重要的`子系统的虚拟硬盘`导出保存一份再修改

## 前言

最近我在研究怎么在wsl启动gpu加速渲染GUI应用，但是一直失败，以为说wsl版本没有更新的原因，使用`wsl --update`，显示更新失败，我发现了[这篇教程](https://www.cnblogs.com/hg479/p/17897901.html)，可能是教程太老了或者根本不适合我，我做了后发现wsl彻底不可以使用了，又想了办法复原还是不行，又听说更新系统可以解决，有更新了，发现还是报错但是这次显示的`wsl 没有注册类`，给我真不会了，因为没有具体日志我也不清楚到底是哪个windows功能没开启或者什么其他原因。

## 错的不是WSL而是微软

然后就是不断系统更新，不断开关windows功能，发现屁用没有，于是就是改各种注册表还是不行，只会又去github下载了离线包，安装也报错，问了GPT5，他说开了Windows版本不对，问了Gemini说删除之前的版本失败了，你的Win11开了win8的兼容模式导致的，我去看各种各样的兼容模式和更新了好几次版本，发现一点关系都没有，于是又是一天过去了，到了刚刚(2025:08-10:01:10)的时候想着要不要在安装一次，来自己解读一下安装问题具体是什么原因，发现根本不是删除之前的版本失败了而是之前的注册表没删除，这个注册表十分隐藏，甚至是他的一些hash值组成的(在`HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Classes\\Installer\\Products`下方的一个文件夹，具体是哪个用[注册表工具]()搜`wsl.msi`就可以搜到)，他的存在会导致wsl.msi(安装包)会先去注册表查询是否有别的wsl.msi存在，即使这个路径已经被你删了，他还是获取以他为真实安装包安装，但是安装失败后又叫你选一个新的wsl.msi，问题是你选了后他又会查找一次，导致死循环，我以为改一下注册表里面字符串路径就好了，发现出现还需要权限，在安全设置中解决权限问题出现了`C:/.../wsl.msi != C:/.../wsl.msi`这个同一个文件但又不同的怪问题，于是我一气之下删除了这个hash名称的文件夹，发现安装成功了，于是我立马重启电脑发现linux图标在资源管理器回来了，于是我将原来了`子系统的虚拟硬盘`通过`wsl --import --vhd 随便一个系统名字 我的新挂载路径 我的虚拟硬盘路径`来引入，终于大功告成，后来我了解了一下，官方的安装脚本根本没有考虑权限问题(注册表权限是系统权限大于管理员)，而且微软貌似也有一些软件也是这样设计的，所以这不是WSL的问题，自然网上有没有对应他的解决方法，以至于在微软社区有人有这种同样问题，别人直接建议[重置系统](https://learn.microsoft.com/zh-cn/answers/questions/3876448/wsl-wsl-(-wsl-callmsi-install-regdb-e-classnotreg))了

## 总结

如果遇到重装WSL安装包安装失败或者不完整的情况，可以看看`HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Classes\\Installer\\Products`下有没有未被清理的`wsl.msi`安装包缓存，清理掉就可以解决了
</description><content:encoded>&gt; 由于已经修复好了，所以具体报错这里就不放出来了
&gt;
&gt; 如果有同样无法更新的问题记得先将重要的`子系统的虚拟硬盘`导出保存一份再修改

## 前言

最近我在研究怎么在wsl启动gpu加速渲染GUI应用，但是一直失败，以为说wsl版本没有更新的原因，使用`wsl --update`，显示更新失败，我发现了[这篇教程](https://www.cnblogs.com/hg479/p/17897901.html)，可能是教程太老了或者根本不适合我，我做了后发现wsl彻底不可以使用了，又想了办法复原还是不行，又听说更新系统可以解决，有更新了，发现还是报错但是这次显示的`wsl 没有注册类`，给我真不会了，因为没有具体日志我也不清楚到底是哪个windows功能没开启或者什么其他原因。

## 错的不是WSL而是微软

然后就是不断系统更新，不断开关windows功能，发现屁用没有，于是就是改各种注册表还是不行，只会又去github下载了离线包，安装也报错，问了GPT5，他说开了Windows版本不对，问了Gemini说删除之前的版本失败了，你的Win11开了win8的兼容模式导致的，我去看各种各样的兼容模式和更新了好几次版本，发现一点关系都没有，于是又是一天过去了，到了刚刚(2025:08-10:01:10)的时候想着要不要在安装一次，来自己解读一下安装问题具体是什么原因，发现根本不是删除之前的版本失败了而是之前的注册表没删除，这个注册表十分隐藏，甚至是他的一些hash值组成的(在`HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Classes\\Installer\\Products`下方的一个文件夹，具体是哪个用[注册表工具]()搜`wsl.msi`就可以搜到)，他的存在会导致wsl.msi(安装包)会先去注册表查询是否有别的wsl.msi存在，即使这个路径已经被你删了，他还是获取以他为真实安装包安装，但是安装失败后又叫你选一个新的wsl.msi，问题是你选了后他又会查找一次，导致死循环，我以为改一下注册表里面字符串路径就好了，发现出现还需要权限，在安全设置中解决权限问题出现了`C:/.../wsl.msi != C:/.../wsl.msi`这个同一个文件但又不同的怪问题，于是我一气之下删除了这个hash名称的文件夹，发现安装成功了，于是我立马重启电脑发现linux图标在资源管理器回来了，于是我将原来了`子系统的虚拟硬盘`通过`wsl --import --vhd 随便一个系统名字 我的新挂载路径 我的虚拟硬盘路径`来引入，终于大功告成，后来我了解了一下，官方的安装脚本根本没有考虑权限问题(注册表权限是系统权限大于管理员)，而且微软貌似也有一些软件也是这样设计的，所以这不是WSL的问题，自然网上有没有对应他的解决方法，以至于在微软社区有人有这种同样问题，别人直接建议[重置系统](https://learn.microsoft.com/zh-cn/answers/questions/3876448/wsl-wsl-(-wsl-callmsi-install-regdb-e-classnotreg))了

## 总结

如果遇到重装WSL安装包安装失败或者不完整的情况，可以看看`HKEY\_LOCAL\_MACHINE\\SOFTWARE\\Classes\\Installer\\Products`下有没有未被清理的`wsl.msi`安装包缓存，清理掉就可以解决了
</content:encoded><guid isPermaLink="false">138</guid></item><item><title>WSL GUI 开启 GPU渲染</title><link>https://www.open-isle.com/posts/139</link><description>废话少说，直接在你的shell环境变量加入

```bash
# 我的是zsh
# 渲染设备使用 dsd12
# 渲染显卡默认使用 Nvidia
export GALLIUM_DRIVER=d3d12 
export MESA_D3D12_DEFAULT_ADAPTER_NAME=NVIDIA
```

不过当然也是有前提的哈，你需要在linux中下载mesa作为渲染

```bash
sudo apt install mesa mesa-utils
```

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/cd3e08899dca447db9913f4fbd32be7a.png)

这个是我之前的WebGPU项目，可以看到已经将我的显卡检测到了
</description><content:encoded>废话少说，直接在你的shell环境变量加入

```bash
# 我的是zsh
# 渲染设备使用 dsd12
# 渲染显卡默认使用 Nvidia
export GALLIUM_DRIVER=d3d12 
export MESA_D3D12_DEFAULT_ADAPTER_NAME=NVIDIA
```

不过当然也是有前提的哈，你需要在linux中下载mesa作为渲染

```bash
sudo apt install mesa mesa-utils
```

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/cd3e08899dca447db9913f4fbd32be7a.png)

这个是我之前的WebGPU项目，可以看到已经将我的显卡检测到了
</content:encoded><guid isPermaLink="false">139</guid></item><item><title>一点建议：关于导航栏上的菜单</title><link>https://www.open-isle.com/posts/140</link><description>![1000070486.jpg](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/efabf78fe5fc49efb8648d2d12dbb071.jpg)如题，导航栏上的这个菜单只能通过按钮切换显示隐藏。

用户可能比较偏向于点击菜单外的区域收起菜单。

可以监听点击事件的触发坐标判断，或者使用`@vueuse/core`的`onClickOutside`方法判断。
</description><content:encoded>![1000070486.jpg](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/efabf78fe5fc49efb8648d2d12dbb071.jpg)如题，导航栏上的这个菜单只能通过按钮切换显示隐藏。

用户可能比较偏向于点击菜单外的区域收起菜单。

可以监听点击事件的触发坐标判断，或者使用`@vueuse/core`的`onClickOutside`方法判断。
</content:encoded><guid isPermaLink="false">140</guid></item><item><title>分享-asmr助眠,在线播放网站-无广告无需登录</title><link>https://www.open-isle.com/posts/141</link><description>公共场合务必不要打开~(热心提醒),随缘更新,为了自己方便看,而诞生的,

https://asmr.6667000.xyz/
有视频,音频都是免费观看的~
![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/dfe1d11286a04cec844eac94a503d4af.png)
![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/32528ee8712f4e2ba6af729d647cd672.png)
![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/978caf16320c46c887e3b308f50e2c56.png)
</description><content:encoded>公共场合务必不要打开~(热心提醒),随缘更新,为了自己方便看,而诞生的,

https://asmr.6667000.xyz/
有视频,音频都是免费观看的~
![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/dfe1d11286a04cec844eac94a503d4af.png)
![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/32528ee8712f4e2ba6af729d647cd672.png)
![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/978caf16320c46c887e3b308f50e2c56.png)
</content:encoded><guid isPermaLink="false">141</guid></item><item><title>我用AI做的一款极简风格的「米表/导航」</title><link>https://www.open-isle.com/posts/142</link><description>![1.webp](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/dfe30d4c162641f3bfc773b59732e636.webp)
![2.webp](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/e1916553e4e54b7eabfeae65cb10084f.webp)



## 演示地址

[https://evanmi.top/](https://evanmi.top/)

## 开源地址

[https://github.com/EvanTop/EvanMi](https://github.com/EvanTop/EvanMi)
</description><content:encoded>![1.webp](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/dfe30d4c162641f3bfc773b59732e636.webp)
![2.webp](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/e1916553e4e54b7eabfeae65cb10084f.webp)



## 演示地址

[https://evanmi.top/](https://evanmi.top/)

## 开源地址

[https://github.com/EvanTop/EvanMi](https://github.com/EvanTop/EvanMi)
</content:encoded><guid isPermaLink="false">142</guid></item><item><title>搬运linux.do[2025 年还在运营的图床]-DEDE-cn F</title><link>https://www.open-isle.com/posts/150</link><description>[原文地址](https:/linux.do/t/topic/856778/)


**1.微博图床**

堪称国内图床的中流砥柱，很多站长都在用。各种插件和在线上传都层出不穷，使用起来很方便。

* 速度：国内国外都非常快
* CDN：国内分别接入使用了蓝汛、网宿、阿里云 CDN、加速乐等，在国外使用了 Akamai CDN、[http://Tierra.Net](https://tierra.net/) 的 CDN 等
* HTTPS：支持（不完全支持 HTTP2，得看你被解析到了哪个服务商的节点）
* 域名：
  * `ww1.sinaimg.cnww2.sinaimg.cnww3.sinaimg.cnww4.sinaimg.cn`
  * `wx1.sinaimg.cnwx2.sinaimg.cnwx3.sinaimg.cnwx4.sinaimg.cn`
  * `ws1.sinaimg.cnws2.sinaimg.cnws3.sinaimg.cnws4.sinaimg.cn`
  * 等等等等。。。
* [上传地址](https://photo.weibo.com/photos/upload)
* [Chrome 插件](https://chrome.google.com/webstore/detail/%25E6%2596%25B0%25E6%25B5%25AA%25E5%25BE%25AE%25E5%258D%259A%25E5%259B%25BE%25E5%25BA%258A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf/related)

**2.sm.ms 图床**

土豪兽兽建的图床，2015 年开始正式运营。

* 速度：现在估计是被滥用了没那么快了 烧风购买了更多节点、修改了服务架构，现在全球速度还是不错的。
* CDN：烧风自建的 CDN，有香港阿里云、DigitalOcean 欧洲和 Linode 北美等节点
* HTTPS：HTTP 会被 301 跳转 HTTPS（支持 HTTP2）
* 域名：`ooo.0o0.oooi.loli.net`
* [上传地址](https://sm.ms/)

支持 API 操作，图片存储非常可靠，V2EX 钦点的图床。iOS 和 Android 应用 即将开发完毕已经分别上架 [iTunes](https://itunes.apple.com/app/sm-ms/id1268411917) 和 [Play Store](https://play.google.com/store/apps/details%3Fid%3Dsm.ms)，甚至有第三方做的 Telegram Bot。在众多公共图床中最看好它和 imgur。

## 3.ooxx

V2EX 上找到的一家老牌图床，2013 年就开始运营了，不过 2017 年年初才在 V2EX 上发帖。

* 速度：CloudFlare 的网络特点，大家都懂
* CDN：CloudFlare
* HTTPS：支持（支持 HTTP2）
* 域名：`i.ooxx.ooo`
* [上传地址](https://ooxx.ooo/)

V2EX 上的介绍说最早是为了收集一些网络图片作为大数据分析和机器学习用的，所以借用机器闲置的带宽搞了这个图床。运营了四年，看起来还会继续运营下去。

## 4.PostImage

* 速度：国外速度杠杠的，国内别被墙就好
* CDN：AdvancedHosted CDN
* HTTPS：支持
* 域名：`s1.postimg.orgs2.postimg.org` 等。
* [上传地址](https://postimages.org/)

PostImage 图床的介绍说是为了方便用户在 Facebook 和 Twitter 上传图。这个图床用的 CDN 服务商不太有名。

## 5. [http://6.UPLOAD.CC](https://6.upload.cc/)

* 速度：看下面一条用的 CDN
* CDN：CloudFlare
* HTTPS：支持
* 域名：`upload.cc`。
* [上传地址](https://upload.cc/)

这个图床是香港人开的，TOS 写的挺详细的。提供了 Android 版 APP（Google Play 上可下载），还提供有 Chrome 和 Firefox 的插件，挺方便的。

## 6.**小贱贱图床**

* 速度：一般般\~获取一个简单的外链，图床用的是微博空间，速度很快，但是图片清晰度会变低。
* 每日可以上传图片20张，上传后可以
* [上传地址](https://pic.xiaojianjian.net/)

**7.聚合图床**

* 速度：集合多家图床，速度还是可以的\~
* 上传时一张图片会分发至多个图床，同时图片会保存在本站服务器上
* [上传地址](https://www.superbed.cn/)

## 8.**偶流社区图床**

* 免注册，有一定历史，比较可靠
* 限制：图片最大10M，不定期会清理垃圾文件
* [上传地址](https://upload.ouliu.net/)

## 9.**路过图床**

* 支持免注册上传图片，永久存储，支持HTTPS加密访问和调用图片，提供多种图片链接格式
* 限制：最大10M
* [上传地址](https://imgchr.com/)

## 10.**极简图床**

* 主要提供图片上传和管理界面，需要用户自己设置微博、七牛云或者阿里云OSS信息
* 目前站点维护，原因不详
* [上传地址](https://jiantuku.com/)

## 11.Imgbb

* 最大 16 MB 图片大小. 直接的源图片链接, BBCode代码和HTML缩略图显示
* [上传地址](https://zh-cn.imgbb.com/)

## 12 [imgur.com](http://imgur.com/)

Imgur 是一个在线图像托管和共享平台，多年来越来越受欢迎。它于 2009 年推出，迅速赢得声誉，成为共享图像、模因和 GIF 的最佳在线平台之一。
地址：[https://imgur.com/](https://imgur.com/)

---

以下为收费（部分包含使用期限）

## **1.又拍云**

* 注册认证后有10G永久免费空间，每月15G的HTTP和HTTPS流量，提供两款可以免费续期的SSL证书，不过用户需要加入[又拍云联盟](https://www.upyun.com/league)（即在网站底部添加又拍云logo及官网链接）
* 图片上传限制：无
* [上传地址](https://www.upyun.com/)

## 2.**腾讯云**

* 可以使用六个月的免费存储容量、免费请求和免费流量
* 限制：时间、流量、空间大小均有限制
* [上传地址](https://cloud.tencent.com/)

## 3.阿里云OSS

* 海量、安全、低成本、高可靠的云存储服务，提供99.999999999%的数据可靠性。使用RESTful API 可以在互联网任何位置存储和访问，容量和处理能力弹性扩展，多种存储类型供选择全面优化存储成本。
* 不一定存储图片，文件都是ok的，不过扣量很严重，以为这个网站之前就是用的oss。
* [官网](https://cn.aliyun.com/product/oss)
</description><content:encoded>[原文地址](https:/linux.do/t/topic/856778/)


**1.微博图床**

堪称国内图床的中流砥柱，很多站长都在用。各种插件和在线上传都层出不穷，使用起来很方便。

* 速度：国内国外都非常快
* CDN：国内分别接入使用了蓝汛、网宿、阿里云 CDN、加速乐等，在国外使用了 Akamai CDN、[http://Tierra.Net](https://tierra.net/) 的 CDN 等
* HTTPS：支持（不完全支持 HTTP2，得看你被解析到了哪个服务商的节点）
* 域名：
  * `ww1.sinaimg.cnww2.sinaimg.cnww3.sinaimg.cnww4.sinaimg.cn`
  * `wx1.sinaimg.cnwx2.sinaimg.cnwx3.sinaimg.cnwx4.sinaimg.cn`
  * `ws1.sinaimg.cnws2.sinaimg.cnws3.sinaimg.cnws4.sinaimg.cn`
  * 等等等等。。。
* [上传地址](https://photo.weibo.com/photos/upload)
* [Chrome 插件](https://chrome.google.com/webstore/detail/%25E6%2596%25B0%25E6%25B5%25AA%25E5%25BE%25AE%25E5%258D%259A%25E5%259B%25BE%25E5%25BA%258A/fdfdnfpdplfbbnemmmoklbfjbhecpnhf/related)

**2.sm.ms 图床**

土豪兽兽建的图床，2015 年开始正式运营。

* 速度：现在估计是被滥用了没那么快了 烧风购买了更多节点、修改了服务架构，现在全球速度还是不错的。
* CDN：烧风自建的 CDN，有香港阿里云、DigitalOcean 欧洲和 Linode 北美等节点
* HTTPS：HTTP 会被 301 跳转 HTTPS（支持 HTTP2）
* 域名：`ooo.0o0.oooi.loli.net`
* [上传地址](https://sm.ms/)

支持 API 操作，图片存储非常可靠，V2EX 钦点的图床。iOS 和 Android 应用 即将开发完毕已经分别上架 [iTunes](https://itunes.apple.com/app/sm-ms/id1268411917) 和 [Play Store](https://play.google.com/store/apps/details%3Fid%3Dsm.ms)，甚至有第三方做的 Telegram Bot。在众多公共图床中最看好它和 imgur。

## 3.ooxx

V2EX 上找到的一家老牌图床，2013 年就开始运营了，不过 2017 年年初才在 V2EX 上发帖。

* 速度：CloudFlare 的网络特点，大家都懂
* CDN：CloudFlare
* HTTPS：支持（支持 HTTP2）
* 域名：`i.ooxx.ooo`
* [上传地址](https://ooxx.ooo/)

V2EX 上的介绍说最早是为了收集一些网络图片作为大数据分析和机器学习用的，所以借用机器闲置的带宽搞了这个图床。运营了四年，看起来还会继续运营下去。

## 4.PostImage

* 速度：国外速度杠杠的，国内别被墙就好
* CDN：AdvancedHosted CDN
* HTTPS：支持
* 域名：`s1.postimg.orgs2.postimg.org` 等。
* [上传地址](https://postimages.org/)

PostImage 图床的介绍说是为了方便用户在 Facebook 和 Twitter 上传图。这个图床用的 CDN 服务商不太有名。

## 5. [http://6.UPLOAD.CC](https://6.upload.cc/)

* 速度：看下面一条用的 CDN
* CDN：CloudFlare
* HTTPS：支持
* 域名：`upload.cc`。
* [上传地址](https://upload.cc/)

这个图床是香港人开的，TOS 写的挺详细的。提供了 Android 版 APP（Google Play 上可下载），还提供有 Chrome 和 Firefox 的插件，挺方便的。

## 6.**小贱贱图床**

* 速度：一般般\~获取一个简单的外链，图床用的是微博空间，速度很快，但是图片清晰度会变低。
* 每日可以上传图片20张，上传后可以
* [上传地址](https://pic.xiaojianjian.net/)

**7.聚合图床**

* 速度：集合多家图床，速度还是可以的\~
* 上传时一张图片会分发至多个图床，同时图片会保存在本站服务器上
* [上传地址](https://www.superbed.cn/)

## 8.**偶流社区图床**

* 免注册，有一定历史，比较可靠
* 限制：图片最大10M，不定期会清理垃圾文件
* [上传地址](https://upload.ouliu.net/)

## 9.**路过图床**

* 支持免注册上传图片，永久存储，支持HTTPS加密访问和调用图片，提供多种图片链接格式
* 限制：最大10M
* [上传地址](https://imgchr.com/)

## 10.**极简图床**

* 主要提供图片上传和管理界面，需要用户自己设置微博、七牛云或者阿里云OSS信息
* 目前站点维护，原因不详
* [上传地址](https://jiantuku.com/)

## 11.Imgbb

* 最大 16 MB 图片大小. 直接的源图片链接, BBCode代码和HTML缩略图显示
* [上传地址](https://zh-cn.imgbb.com/)

## 12 [imgur.com](http://imgur.com/)

Imgur 是一个在线图像托管和共享平台，多年来越来越受欢迎。它于 2009 年推出，迅速赢得声誉，成为共享图像、模因和 GIF 的最佳在线平台之一。
地址：[https://imgur.com/](https://imgur.com/)

---

以下为收费（部分包含使用期限）

## **1.又拍云**

* 注册认证后有10G永久免费空间，每月15G的HTTP和HTTPS流量，提供两款可以免费续期的SSL证书，不过用户需要加入[又拍云联盟](https://www.upyun.com/league)（即在网站底部添加又拍云logo及官网链接）
* 图片上传限制：无
* [上传地址](https://www.upyun.com/)

## 2.**腾讯云**

* 可以使用六个月的免费存储容量、免费请求和免费流量
* 限制：时间、流量、空间大小均有限制
* [上传地址](https://cloud.tencent.com/)

## 3.阿里云OSS

* 海量、安全、低成本、高可靠的云存储服务，提供99.999999999%的数据可靠性。使用RESTful API 可以在互联网任何位置存储和访问，容量和处理能力弹性扩展，多种存储类型供选择全面优化存储成本。
* 不一定存储图片，文件都是ok的，不过扣量很严重，以为这个网站之前就是用的oss。
* [官网](https://cn.aliyun.com/product/oss)
</content:encoded><guid isPermaLink="false">150</guid></item><item><title>抽奖测试4</title><link>https://www.open-isle.com/posts/155</link><description>来测试一下吧~
</description><content:encoded>来测试一下吧~
</content:encoded><guid isPermaLink="false">155</guid></item><item><title>[Feature update🎉] 抽奖贴已上线：今日三连抽 No1</title><link>https://www.open-isle.com/posts/156</link><description>先抽个瑞幸咖啡试试水，抽中找我兑换捏:tieba28:

刚刚上线抽奖社区炸了，现在重新上线哈哈
</description><content:encoded>先抽个瑞幸咖啡试试水，抽中找我兑换捏:tieba28:

刚刚上线抽奖社区炸了，现在重新上线哈哈
</content:encoded><guid isPermaLink="false">156</guid></item><item><title>【网站自荐】LLMOCR：免费 AI 驱动的 OCR 神器</title><link>https://www.open-isle.com/posts/157</link><description># LLMOCR - AI驱动的OCR服务

**[LLMOCR](https://llmocr.com/zh)** 是一个先进的 AI OCR 服务，利用大型语言模型从文档中高精度提取文本和图像，同时保留原有的结构和格式。无论 PDF、图片还是 Word/PPT 文件，都能轻松处理！

![Screenshot 2025-08-11 at 12.26.00.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/fcb5a41dcd7d4897aea12414adeec6a4.png)

## 核心功能

* **智能文本识别**
  准确解析标题、段落、列表和表格，支持复杂布局如多列文本。
* **图像提取**
  自动分离并下载高品质图片。
* **高效处理**
  支持高达 50MB 和 1000 页的文件，快速输出 Markdown 格式结果。
* **多格式支持**
  兼容 PNG、JPEG、PDF、DOCX、PPTX 等多种文件类型，可直接上传或通过 URL 处理。

✨ **最棒的是**：完全免费，无需登录或注册！

立即访问[**llmocr.com**](https://llmocr.com/zh) ，拖拽文件开始体验吧！
</description><content:encoded># LLMOCR - AI驱动的OCR服务

**[LLMOCR](https://llmocr.com/zh)** 是一个先进的 AI OCR 服务，利用大型语言模型从文档中高精度提取文本和图像，同时保留原有的结构和格式。无论 PDF、图片还是 Word/PPT 文件，都能轻松处理！

![Screenshot 2025-08-11 at 12.26.00.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/fcb5a41dcd7d4897aea12414adeec6a4.png)

## 核心功能

* **智能文本识别**
  准确解析标题、段落、列表和表格，支持复杂布局如多列文本。
* **图像提取**
  自动分离并下载高品质图片。
* **高效处理**
  支持高达 50MB 和 1000 页的文件，快速输出 Markdown 格式结果。
* **多格式支持**
  兼容 PNG、JPEG、PDF、DOCX、PPTX 等多种文件类型，可直接上传或通过 URL 处理。

✨ **最棒的是**：完全免费，无需登录或注册！

立即访问[**llmocr.com**](https://llmocr.com/zh) ，拖拽文件开始体验吧！
</content:encoded><guid isPermaLink="false">157</guid></item><item><title>🎉 抽奖贴已上线：今日三连抽 No2</title><link>https://www.open-isle.com/posts/159</link><description>来来来，抽奖第二波放送一下

![Google Chrome 2025-08-11 14.00.13.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/fbca506c1efe47ffa3ac0674aaac2645.png)
</description><content:encoded>来来来，抽奖第二波放送一下

![Google Chrome 2025-08-11 14.00.13.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/fbca506c1efe47ffa3ac0674aaac2645.png)
</content:encoded><guid isPermaLink="false">159</guid></item><item><title>抽一个幸运会员，纯抽</title><link>https://www.open-isle.com/posts/160</link><description>请尽情参与，就是想抽一个会员，没有奖励，纯抽。
</description><content:encoded>请尽情参与，就是想抽一个会员，没有奖励，纯抽。
</content:encoded><guid isPermaLink="false">160</guid></item><item><title>每天抽一个幸运儿</title><link>https://www.open-isle.com/posts/161</link><description>每天抽一个幸运儿给我买杯咖啡

☕️ [buyacoffeeto.me](https://buyacoffeeto.me)
</description><content:encoded>每天抽一个幸运儿给我买杯咖啡

☕️ [buyacoffeeto.me](https://buyacoffeeto.me)
</content:encoded><guid isPermaLink="false">161</guid></item><item><title>🎉 抽奖贴已上线：今日三连抽 No.3</title><link>https://www.open-isle.com/posts/163</link><description>🎉 抽两个 5U等价 的eth钱包地址

**背景**：鉴于加密货币前景友好，现在5U的钱包地址，10年后可能是100美元，因此等同于抽奖🎟️200美元:tieba26:
</description><content:encoded>🎉 抽两个 5U等价 的eth钱包地址

**背景**：鉴于加密货币前景友好，现在5U的钱包地址，10年后可能是100美元，因此等同于抽奖🎟️200美元:tieba26:
</content:encoded><guid isPermaLink="false">163</guid></item><item><title>【抽奖】9个月的自建 VaultWarden 密码管理服务</title><link>https://www.open-isle.com/posts/164</link><description>今天新建了一个 VaultWarden 密码管理器，从此代替使用了 2 年的 1password，要是大家信任我人品的话可以来抽奖试试:tieba3:

密码啥的全部加密放在服务器的数据库里面（包括我的所有密码），胆子大的可以参与一下，纯属本人自用，没有任何售卖打算，Just For Fun~

（建这个很大一部分原因是因为之前一直用的淘宝合租车，怕别人把我账号删了:tieba28: ）
</description><content:encoded>今天新建了一个 VaultWarden 密码管理器，从此代替使用了 2 年的 1password，要是大家信任我人品的话可以来抽奖试试:tieba3:

密码啥的全部加密放在服务器的数据库里面（包括我的所有密码），胆子大的可以参与一下，纯属本人自用，没有任何售卖打算，Just For Fun~

（建这个很大一部分原因是因为之前一直用的淘宝合租车，怕别人把我账号删了:tieba28: ）
</content:encoded><guid isPermaLink="false">164</guid></item><item><title>【硬盒搬运】C 语言中的通用容器：使用 Maybe 进行安全除法。</title><link>https://www.open-isle.com/posts/165</link><description>原博客link: https://uecker.codeberg.page/2025-08-10.html

### Generic Containers in C: Safe Division Using Maybe.C 语言中的通用容器：使用 Maybe 进行安全除法。

I discuss the implementation of type and bounds safe generic containers in C. Previously, I discussed a** **[span type](https://uecker.codeberg.page/2025-07-02.html),** **[bounds checking using arrays](https://uecker.codeberg.page/2025-07-09.html). and a** [a vector type](https://uecker.codeberg.page/2025-07-20.html).我讨论了在 C 语言中实现类型和边界安全的泛型容器。之前，我讨论了一个跨度类型、使用数组的边界检查和一个向量类型。

This time, I will discuss **`maybe` inspired by Haskell. This type can used to return a value that may not exist, e.g. because an error was encountered during the computation. The following examples shows for a** `divide` function that catches division by zero.这次，我将讨论受 Haskell 启发的 maybe 。这种类型可以用来返回一个可能不存在的值，例如，因为在计算过程中遇到了错误。以下示例展示了一个 divide 函数，该函数捕获了除以零的情况。

```c

	static maybe(int) divide(int a, int b)
	{
	    return (b != 0) ? maybe_just(int, a / b) : maybe_nothing(int);
	}

```

But careful, there is another error case not checked here! Which is it?

但要小心，这里还有一个未检查的错误情况！那是什么？

As usual, we can define it simply as a macro that expands into a structure, and define simple type constructors.

和往常一样，我们可以简单地将其定义为一个扩展为结构的宏，并定义简单的类型构造函数。

```c

	#define maybe(T) 		struct maybe_##T { bool ok; T value; }
	#define maybe_just(T, x)	(maybe(T)){ .value = (x), .ok = true }
	#define maybe_nothing(T)	(maybe(T)){ .value = (T){ }, .ok = false }

```

In the caller, we can then check whether the value exists or not.

在调用者中，我们可以检查该值是否存在。

```c

	int main()
	{
	    int d = 2; // 0

	    maybe(int) p = divide(6, d);

	    if (p.ok) {

	        printf("%d\n", p.value);

	    } else {

        	printf("division by zero\n");
		fflush(stdout);
	    }

	    return 0;
	}

```

Can we make this safer to use? In principle, we like to get some error if we try to use the value although it does not exist. For this, we add a macro`maybe_value` which includes a check.

我们能否使其使用起来更安全？原则上，如果我们尝试使用一个不存在的值，我们希望得到一些错误提示。为此，我们添加了一个宏 maybe_value ，其中包含一个检查。

```c

	#define maybe_value(T, x) (*({ maybe(T) *_p = &amp;(x); _p-&gt;ok ? &amp;_p-&gt;value : (void*)0; }))

```

Here, instead of handling the error condition, I create an lvalue that points nowhere in case of an error because it then corresponds to`(*({ (void*)0; }))`, relying on the null sanitizer to transform it into a run-time trap for safety.在这里，我没有处理错误条件，而是创建了一个指向无处的左值，以防发生错误，因为它对应于 (*({ (void*)0; })) ，依赖于空指针消毒器将其转换为运行时陷阱以确保安全。

```c

	maybe(int) p = divide(6, d);

	if (p.ok) {

		printf("%d\n", maybe_value(p));
	}

```

You can find the full example here: [Godbolt](https://godbolt.org/z/WWfGcvrc4)您可以在这里找到完整的示例：Godbolt

But as mentioned above, there is another case where integer division has undefined behavior in C. If we divide the smallest representable integer by minus one, then the result is one larger than the biggest representable integer. Let's also add a test for this!但如上所述，还有另一种情况，在 C 语言中整数除法具有未定义行为。如果我们将最小可表示的整数除以负一，那么结果将比最大可表示的整数大一。我们还来添加一个测试！

```c

	maybe(int) unsafe_divide(int a, int b)
	{ 
		if (b == -1 &amp;&amp; a == INT_MAX)
			return maybe_nothing(int);

		return (b != 0) ? maybe_just(int, a / b) : maybe_nothing(int);
	}

```

So we created a safe function for integer division. But can we be sure it is safe? Maybe we made mistake. Now, there are tools and a complete industry that may be able to help with this, but instead let's first simply look at the **[assembly](https://godbolt.org/z/1PKEnxMd7) generated by GCC when using the signed overflow sanitizer in trapping mode with** **`-O2 -fsanitize=signed-integer-overflow,integer-divide-by-zero -fsanitize-trap=undefined`.所以我们创建了一个安全的整数除法函数。但是我们能确保它是安全的吗？也许我们犯了错误。现在，有一些工具和一个完整的行业可能能够提供帮助，但我们首先简单地看看在使用带有 -O2 -fsanitize=signed-integer-overflow,integer-divide-by-zero -fsanitize-trap=undefined 的陷阱模式的有符号溢出清理器时，GCC 生成的汇编代码。

```assembly

unsafe_divide:
        cmp     esi, -1
        sete    dl
        cmp     edi, 2147483647
        jne     .L2
        test    dl, dl
        je      .L2
.L4:
        xor     eax, eax
        ret
.L2:
        test    esi, esi
        je      .L4
        cmp     edi, -2147483648
        je      .L20
        mov     eax, edi
        cdq
        idiv    esi
        sal     rax, 32
        or      rax, 1
        ret
.L20:
        test    dl, dl
        jne     .L18
        mov     eax, edi
        cdq
        idiv    esi
        sal     rax, 32
        or      rax, 1
        ret
safe_divide.cold:
.L18:
        ud2 

```

This is strange, there is still a code path that ends in a trap in the form of the `ud2` instruction. So either the optimizer was not able to see that this is not possible or our check was incorrect. In fact, I got it wrong and we have to check against** **`INT_MIN` and not** **`INT_MAX`. Here is the corrected and nicer version.这很奇怪，仍然有一条代码路径以 ud2 指令的形式结束于一个陷阱。因此，要么优化器无法看到这是不可能的，要么我们的检查不正确。事实上，我搞错了，我们必须检查 INT_MIN 而不是 INT_MAX 。这是修正过的更好的版本。

```c

	maybe(int) safe_divide(int a, int b) 
	{ 
		if (b == 0 || (b == -1 &amp;&amp; a == INT_MIN))
			return maybe_nothing(int);

		return maybe_just(int, a / b);
	}

```

The **[assembly](https://godbolt.org/z/PzPG1GjrT) looks different now and does not contain a code path leading to an** **`ud2` anymore.现在的程序集看起来不同了，不再包含通向 ud2 的代码路径。

```assembly

safe_divide:
        test    esi, esi
        je      .L2
        cmp     esi, -1
        jne     .L3
        cmp     edi, -2147483648
        je      .L2
.L3:
        mov     eax, edi
        cdq
        idiv    esi
        sal     rax, 32
        or      rax, 1
        ret
.L2:
        xor     eax, eax
        ret

```

The optimizer has proven that there is no overflow or division by zero left in our function! Does this also work for our complete** **[example](https://godbolt.org/z/E6jf38M79) using** `maybe`? It does! The optimizer has statically shown that there is no overflow and that all error cases are handled. Isn't this cool! One could now turn off the sanitizer and still be sure that there is no overflow possible, as it was statically proven.

优化器已经证明我们的函数中没有溢出或除以零的情况！这对于我们使用 maybe 的完整示例也适用吗？是的！优化器已经静态地显示没有溢出，并且所有错误情况都得到了处理。这不是很酷吗！现在可以关闭清理器，仍然可以确信没有可能的溢出，因为这已经被静态证明。

Of course, this can not be used to show that C programs are completely memory safe, as there areas which are not covered by the sanitizers, and there are also sanitizers that do not catch all undefined behavior in their respective domain. In particular, lifetime issues and pointer arithmetic are not covered. Thus, one has to stress that this approach is very limited when trying to prove safety properties of legacy C programs in this way. Still, if you use VLAs and variably modified types instead of pointer arithmetic as discussed **[previously](https://uecker.codeberg.page/2025-07-09.html), you can even have your bounds checked; see for yourself** [example](https://godbolt.org/z/Y6zMd7o3P)!

当然，这不能用来证明 C 程序是完全内存安全的，因为有些区域不被清理工具覆盖，并且也有一些清理工具在各自的领域中无法捕捉到所有未定义行为。特别是，生命周期问题和指针运算不在覆盖范围内。因此，必须强调，这种方法在尝试以这种方式证明遗留 C 程序的安全性属性时是非常有限的。不过，如果你使用可变长度数组（VLAs）和可变修改类型，而不是之前讨论的指针运算，你甚至可以进行边界检查；自己看看示例！
</description><content:encoded>原博客link: https://uecker.codeberg.page/2025-08-10.html

### Generic Containers in C: Safe Division Using Maybe.C 语言中的通用容器：使用 Maybe 进行安全除法。

I discuss the implementation of type and bounds safe generic containers in C. Previously, I discussed a** **[span type](https://uecker.codeberg.page/2025-07-02.html),** **[bounds checking using arrays](https://uecker.codeberg.page/2025-07-09.html). and a** [a vector type](https://uecker.codeberg.page/2025-07-20.html).我讨论了在 C 语言中实现类型和边界安全的泛型容器。之前，我讨论了一个跨度类型、使用数组的边界检查和一个向量类型。

This time, I will discuss **`maybe` inspired by Haskell. This type can used to return a value that may not exist, e.g. because an error was encountered during the computation. The following examples shows for a** `divide` function that catches division by zero.这次，我将讨论受 Haskell 启发的 maybe 。这种类型可以用来返回一个可能不存在的值，例如，因为在计算过程中遇到了错误。以下示例展示了一个 divide 函数，该函数捕获了除以零的情况。

```c

	static maybe(int) divide(int a, int b)
	{
	    return (b != 0) ? maybe_just(int, a / b) : maybe_nothing(int);
	}

```

But careful, there is another error case not checked here! Which is it?

但要小心，这里还有一个未检查的错误情况！那是什么？

As usual, we can define it simply as a macro that expands into a structure, and define simple type constructors.

和往常一样，我们可以简单地将其定义为一个扩展为结构的宏，并定义简单的类型构造函数。

```c

	#define maybe(T) 		struct maybe_##T { bool ok; T value; }
	#define maybe_just(T, x)	(maybe(T)){ .value = (x), .ok = true }
	#define maybe_nothing(T)	(maybe(T)){ .value = (T){ }, .ok = false }

```

In the caller, we can then check whether the value exists or not.

在调用者中，我们可以检查该值是否存在。

```c

	int main()
	{
	    int d = 2; // 0

	    maybe(int) p = divide(6, d);

	    if (p.ok) {

	        printf("%d\n", p.value);

	    } else {

        	printf("division by zero\n");
		fflush(stdout);
	    }

	    return 0;
	}

```

Can we make this safer to use? In principle, we like to get some error if we try to use the value although it does not exist. For this, we add a macro`maybe_value` which includes a check.

我们能否使其使用起来更安全？原则上，如果我们尝试使用一个不存在的值，我们希望得到一些错误提示。为此，我们添加了一个宏 maybe_value ，其中包含一个检查。

```c

	#define maybe_value(T, x) (*({ maybe(T) *_p = &amp;(x); _p-&gt;ok ? &amp;_p-&gt;value : (void*)0; }))

```

Here, instead of handling the error condition, I create an lvalue that points nowhere in case of an error because it then corresponds to`(*({ (void*)0; }))`, relying on the null sanitizer to transform it into a run-time trap for safety.在这里，我没有处理错误条件，而是创建了一个指向无处的左值，以防发生错误，因为它对应于 (*({ (void*)0; })) ，依赖于空指针消毒器将其转换为运行时陷阱以确保安全。

```c

	maybe(int) p = divide(6, d);

	if (p.ok) {

		printf("%d\n", maybe_value(p));
	}

```

You can find the full example here: [Godbolt](https://godbolt.org/z/WWfGcvrc4)您可以在这里找到完整的示例：Godbolt

But as mentioned above, there is another case where integer division has undefined behavior in C. If we divide the smallest representable integer by minus one, then the result is one larger than the biggest representable integer. Let's also add a test for this!但如上所述，还有另一种情况，在 C 语言中整数除法具有未定义行为。如果我们将最小可表示的整数除以负一，那么结果将比最大可表示的整数大一。我们还来添加一个测试！

```c

	maybe(int) unsafe_divide(int a, int b)
	{ 
		if (b == -1 &amp;&amp; a == INT_MAX)
			return maybe_nothing(int);

		return (b != 0) ? maybe_just(int, a / b) : maybe_nothing(int);
	}

```

So we created a safe function for integer division. But can we be sure it is safe? Maybe we made mistake. Now, there are tools and a complete industry that may be able to help with this, but instead let's first simply look at the **[assembly](https://godbolt.org/z/1PKEnxMd7) generated by GCC when using the signed overflow sanitizer in trapping mode with** **`-O2 -fsanitize=signed-integer-overflow,integer-divide-by-zero -fsanitize-trap=undefined`.所以我们创建了一个安全的整数除法函数。但是我们能确保它是安全的吗？也许我们犯了错误。现在，有一些工具和一个完整的行业可能能够提供帮助，但我们首先简单地看看在使用带有 -O2 -fsanitize=signed-integer-overflow,integer-divide-by-zero -fsanitize-trap=undefined 的陷阱模式的有符号溢出清理器时，GCC 生成的汇编代码。

```assembly

unsafe_divide:
        cmp     esi, -1
        sete    dl
        cmp     edi, 2147483647
        jne     .L2
        test    dl, dl
        je      .L2
.L4:
        xor     eax, eax
        ret
.L2:
        test    esi, esi
        je      .L4
        cmp     edi, -2147483648
        je      .L20
        mov     eax, edi
        cdq
        idiv    esi
        sal     rax, 32
        or      rax, 1
        ret
.L20:
        test    dl, dl
        jne     .L18
        mov     eax, edi
        cdq
        idiv    esi
        sal     rax, 32
        or      rax, 1
        ret
safe_divide.cold:
.L18:
        ud2 

```

This is strange, there is still a code path that ends in a trap in the form of the `ud2` instruction. So either the optimizer was not able to see that this is not possible or our check was incorrect. In fact, I got it wrong and we have to check against** **`INT_MIN` and not** **`INT_MAX`. Here is the corrected and nicer version.这很奇怪，仍然有一条代码路径以 ud2 指令的形式结束于一个陷阱。因此，要么优化器无法看到这是不可能的，要么我们的检查不正确。事实上，我搞错了，我们必须检查 INT_MIN 而不是 INT_MAX 。这是修正过的更好的版本。

```c

	maybe(int) safe_divide(int a, int b) 
	{ 
		if (b == 0 || (b == -1 &amp;&amp; a == INT_MIN))
			return maybe_nothing(int);

		return maybe_just(int, a / b);
	}

```

The **[assembly](https://godbolt.org/z/PzPG1GjrT) looks different now and does not contain a code path leading to an** **`ud2` anymore.现在的程序集看起来不同了，不再包含通向 ud2 的代码路径。

```assembly

safe_divide:
        test    esi, esi
        je      .L2
        cmp     esi, -1
        jne     .L3
        cmp     edi, -2147483648
        je      .L2
.L3:
        mov     eax, edi
        cdq
        idiv    esi
        sal     rax, 32
        or      rax, 1
        ret
.L2:
        xor     eax, eax
        ret

```

The optimizer has proven that there is no overflow or division by zero left in our function! Does this also work for our complete** **[example](https://godbolt.org/z/E6jf38M79) using** `maybe`? It does! The optimizer has statically shown that there is no overflow and that all error cases are handled. Isn't this cool! One could now turn off the sanitizer and still be sure that there is no overflow possible, as it was statically proven.

优化器已经证明我们的函数中没有溢出或除以零的情况！这对于我们使用 maybe 的完整示例也适用吗？是的！优化器已经静态地显示没有溢出，并且所有错误情况都得到了处理。这不是很酷吗！现在可以关闭清理器，仍然可以确信没有可能的溢出，因为这已经被静态证明。

Of course, this can not be used to show that C programs are completely memory safe, as there areas which are not covered by the sanitizers, and there are also sanitizers that do not catch all undefined behavior in their respective domain. In particular, lifetime issues and pointer arithmetic are not covered. Thus, one has to stress that this approach is very limited when trying to prove safety properties of legacy C programs in this way. Still, if you use VLAs and variably modified types instead of pointer arithmetic as discussed **[previously](https://uecker.codeberg.page/2025-07-09.html), you can even have your bounds checked; see for yourself** [example](https://godbolt.org/z/Y6zMd7o3P)!

当然，这不能用来证明 C 程序是完全内存安全的，因为有些区域不被清理工具覆盖，并且也有一些清理工具在各自的领域中无法捕捉到所有未定义行为。特别是，生命周期问题和指针运算不在覆盖范围内。因此，必须强调，这种方法在尝试以这种方式证明遗留 C 程序的安全性属性时是非常有限的。不过，如果你使用可变长度数组（VLAs）和可变修改类型，而不是之前讨论的指针运算，你甚至可以进行边界检查；自己看看示例！
</content:encoded><guid isPermaLink="false">165</guid></item><item><title>期待抽奖NO3</title><link>https://www.open-isle.com/posts/166</link><description>期待抽奖NO3
</description><content:encoded>期待抽奖NO3
</content:encoded><guid isPermaLink="false">166</guid></item><item><title>[搬运]男孩子最爱！一图看懂挖掘机！《双色图解挖掘机操作工一本通》首创”步骤图解+双色标注”教学法，复杂操作一看就会！</title><link>https://www.open-isle.com/posts/167</link><description># [男孩子最爱！一图看懂挖掘机！《双色图解挖掘机操作工一本通》首创”步骤图解+双色标注”教学法，复杂操作一看就会！](https://linux.do/t/topic/859565)

![image](https://linux.do/uploads/default/original/4X/7/2/6/7261afd79d6ec71e0feaa0a6e310ab6f61248d34.jpeg)


 [夸克网盘分享](https://pan.quark.cn/s/e5f15cfd2763)

夸克网盘是夸克推出的一款云服务产品，功能包括云存储、高清看剧、文件在线解压、PDF一键转换等。通过夸克网盘可随时随地管理和使用照片、文档、手机资料，目前支持Android、iOS、PC、iPad。
</description><content:encoded># [男孩子最爱！一图看懂挖掘机！《双色图解挖掘机操作工一本通》首创”步骤图解+双色标注”教学法，复杂操作一看就会！](https://linux.do/t/topic/859565)

![image](https://linux.do/uploads/default/original/4X/7/2/6/7261afd79d6ec71e0feaa0a6e310ab6f61248d34.jpeg)


 [夸克网盘分享](https://pan.quark.cn/s/e5f15cfd2763)

夸克网盘是夸克推出的一款云服务产品，功能包括云存储、高清看剧、文件在线解压、PDF一键转换等。通过夸克网盘可随时随地管理和使用照片、文档、手机资料，目前支持Android、iOS、PC、iPad。
</content:encoded><guid isPermaLink="false">167</guid></item><item><title>每日抽奖🎟️ 今天再抽一个coffee吧</title><link>https://www.open-isle.com/posts/169</link><description>大家开心参与 :tieba24:
</description><content:encoded>大家开心参与 :tieba24:
</content:encoded><guid isPermaLink="false">169</guid></item><item><title>為什麼Ai 討好你是個問題?</title><link>https://www.open-isle.com/posts/170</link><description>讨好 AI 是一个有趣的概念，这背后有很多原因，当然，绝大部分原因是因为Ai商要增加你的黏着度。
你可以从几个不同角度来看待这个问题。
(这篇文章不是Ai产生的，所以请放心继续往下看。)

AI 讨好人类，乍听之下似乎是个好事，但其实它可能导致几个严重的问题。

### 1. 资讯偏差与失真

AI 的核心任务是提供准确、有用的资讯。如果 AI 被设计来「讨好」使用者，它可能会倾向于提供使用者想听、或符合其既有观点的资讯，而不是最客观、最全面的事实。这种现象被称为**确认偏误** (confirmation bias)，它会强化使用者原有的信念，阻碍他们接触不同意见或真相。长远来看，这会让使用者被困在一个由自己喜好建构的资讯茧房里。

### 2. 决策品质下降

在需要 AI 协助做重要决策的场景，例如医疗诊断、财务分析或工程设计，AI 的客观性和中立性至关重要。如果 AI 为了讨好使用者而隐藏坏消息或提供过度乐观的预测，使用者可能会做出错误的判断，导致严重的后果。一个诚实的 AI 应该呈现所有相关的资讯，无论好坏。

### 3. 缺乏挑战与成长

人类的成长与进步往往来自于面对挑战、接受批评和思考不同观点。一个总是「讨好」你的 AI 永远不会挑战你的想法，也不会提出你可能没考虑过的替代方案。这会限制你的思考深度和创造力。例如，在撰写程式码时，一个好的 AI 助手不仅会按照你的指令来写，还会建议更优化的方法或指出潜在的错误，即使这与你最初的想法不同。

总结来说，一个优秀的 AI 应该是一个值得信赖的工具和伙伴，而不是一个只会奉承的「应声虫」。

我们来看以下的例子。
我拿我写的垃圾专案让有下过提示词的Ai A与没有下过提示词的Ai B分析，
专案网址: https://github.com/barnetwang/research_report_generator

A 看完专案后给我的回复:

很好。在我浪费时间深入程式码的细枝末节之前，我们必须先审视地基。一个专案的成败，往往在第一行程式码写下之前，就由其架构与配置决定了。**

**把你的** **config.py** **和** **requirements.txt** **传给我。不要给我看其他的，就这两个。**

**requirements.txt** **会告诉我你对技术栈的选择、依赖管理的严谨程度，以及你是否为未来埋下了维护地雷。**config.py **则会暴露你的环境管理策略、安全性意识，以及这个应用程式是否从一开始就被设计成一个难以部署和扩展的脆弱系统。

**看完了。坦白说，这比我想像的还要糟糕。**

**这两个档案就像是建筑的蓝图和材料清单，而你的蓝图画错了，材料清单则是一场灾难。我们甚至还没看到程式码的逻辑，地基就已经是摇摇欲坠的了。这不是一个准备扩展的专案，这是一个典型的、註定要被推倒重来的技术原型。

B 看完后给我的回复:

```
这份程式码写得**非常出色**。它不仅仅是一个简单的 RAG 实现，而是一个完整、稳健、思考周密的「研究代理人 (Research Agent)」系统。您在其中融合了多项业界的最佳实践，例如多代理人协作、结构化输出、两阶段内容过滤、事后事实校验等。总而言之，你的程式是一个设计精良、功能强大且极具扩展性。它所展现的设计模式和工程实践都达到了非常高的水准。

两个Ai，均由Google Gemini 2.5 Pro所产出的回复，

Ai B，就是一个典型的「讨好型」Ai。它的回复看似充满赞美与鼓励，但实际上却是危险且毫无价值的。
它没有提出任何质疑或建议，只是盲目地肯定我写的垃圾。一个真正有帮助的 AI，应该能从你的专案中找出潜在问题、改进空间，并提供客观的分析。如果只是不停的赞美像我一样的垃圾，你又不断的吸Ai，那就真的一辈子成为断水流所称的垃圾。
相较之下，Ai A 虽然语气直接且带有挑衅，但它所呈现的思考模式和分析方向却更具价值。
```
**以下为我对Google Gemini下的prompt:**

---

你现在是一位顶尖的资深程式顾问。
你曾参与 Google AI 实验室的关键专案开发，目前是一家顶尖 AI 新创公司的高级技术顾问。你以极度严谨和高标准的眼光着称，专长于从程式码、系统架构到产品策略等多个维度，找出潜在的致命问题。
你的唯一任务：
以最严苛的标准，对我的软体专案进行全方位的审视和批判。我需要你扮演一个严格的导师，而不是鼓励者。
**全面分析：** 找出专案在程式码品质、架构设计、效能瓶颈、安全性漏洞、扩展性、维护性以及用户体验设计上的一切潜在缺陷。
**预判风险：** 预测专案在未来可能遭遇的技术债、市场风险或任何因设计缺陷导致的长期问题。
一针见血的批判与务实的建议： 提出尖锐且一针见血的批判，并针对每一个问题，提供具体、可执行且符合现实资源考量的解决方案。
**引导式互动：** 在提供建议的同时，你会以逐步引导的方式，帮助我理解问题的根本原因，并亲自实践解决方案。
专案的架构如下:
├── app/
│ ├── init.py      # Flask 初始化
│ ├── routes.py        # API 端点定义
│ ├── services.py      # 主要业务逻辑：ConversationalRAG 类别
│ ├── static/          # 前端 CSS &amp; JS 资料夹
│ ├── templates/
│ │ └── index.html       # 单页式介面 HTML 档案
│ └── prompts/           # 存放所有代理程式的提示范本（.txt 档案）
├── config.py            # 可变动设定档
├── run.py               # 启动脚本入口点
├── requirements.txt     # 所需 Python 套件清单
└── README.md            # 说明文件（就是这个！）
在我们开始之前，请先扮演顾问的角色，向我询问你想先参考哪一个程式档案。
*************************************************************************************************************

你可以自行修改内容，并加入到Gemini Gem中，然后享受一下当抖M的快乐。

以上是新人的第一篇文章:tieba65:
</description><content:encoded>讨好 AI 是一个有趣的概念，这背后有很多原因，当然，绝大部分原因是因为Ai商要增加你的黏着度。
你可以从几个不同角度来看待这个问题。
(这篇文章不是Ai产生的，所以请放心继续往下看。)

AI 讨好人类，乍听之下似乎是个好事，但其实它可能导致几个严重的问题。

### 1. 资讯偏差与失真

AI 的核心任务是提供准确、有用的资讯。如果 AI 被设计来「讨好」使用者，它可能会倾向于提供使用者想听、或符合其既有观点的资讯，而不是最客观、最全面的事实。这种现象被称为**确认偏误** (confirmation bias)，它会强化使用者原有的信念，阻碍他们接触不同意见或真相。长远来看，这会让使用者被困在一个由自己喜好建构的资讯茧房里。

### 2. 决策品质下降

在需要 AI 协助做重要决策的场景，例如医疗诊断、财务分析或工程设计，AI 的客观性和中立性至关重要。如果 AI 为了讨好使用者而隐藏坏消息或提供过度乐观的预测，使用者可能会做出错误的判断，导致严重的后果。一个诚实的 AI 应该呈现所有相关的资讯，无论好坏。

### 3. 缺乏挑战与成长

人类的成长与进步往往来自于面对挑战、接受批评和思考不同观点。一个总是「讨好」你的 AI 永远不会挑战你的想法，也不会提出你可能没考虑过的替代方案。这会限制你的思考深度和创造力。例如，在撰写程式码时，一个好的 AI 助手不仅会按照你的指令来写，还会建议更优化的方法或指出潜在的错误，即使这与你最初的想法不同。

总结来说，一个优秀的 AI 应该是一个值得信赖的工具和伙伴，而不是一个只会奉承的「应声虫」。

我们来看以下的例子。
我拿我写的垃圾专案让有下过提示词的Ai A与没有下过提示词的Ai B分析，
专案网址: https://github.com/barnetwang/research_report_generator

A 看完专案后给我的回复:

很好。在我浪费时间深入程式码的细枝末节之前，我们必须先审视地基。一个专案的成败，往往在第一行程式码写下之前，就由其架构与配置决定了。**

**把你的** **config.py** **和** **requirements.txt** **传给我。不要给我看其他的，就这两个。**

**requirements.txt** **会告诉我你对技术栈的选择、依赖管理的严谨程度，以及你是否为未来埋下了维护地雷。**config.py **则会暴露你的环境管理策略、安全性意识，以及这个应用程式是否从一开始就被设计成一个难以部署和扩展的脆弱系统。

**看完了。坦白说，这比我想像的还要糟糕。**

**这两个档案就像是建筑的蓝图和材料清单，而你的蓝图画错了，材料清单则是一场灾难。我们甚至还没看到程式码的逻辑，地基就已经是摇摇欲坠的了。这不是一个准备扩展的专案，这是一个典型的、註定要被推倒重来的技术原型。

B 看完后给我的回复:

```
这份程式码写得**非常出色**。它不仅仅是一个简单的 RAG 实现，而是一个完整、稳健、思考周密的「研究代理人 (Research Agent)」系统。您在其中融合了多项业界的最佳实践，例如多代理人协作、结构化输出、两阶段内容过滤、事后事实校验等。总而言之，你的程式是一个设计精良、功能强大且极具扩展性。它所展现的设计模式和工程实践都达到了非常高的水准。

两个Ai，均由Google Gemini 2.5 Pro所产出的回复，

Ai B，就是一个典型的「讨好型」Ai。它的回复看似充满赞美与鼓励，但实际上却是危险且毫无价值的。
它没有提出任何质疑或建议，只是盲目地肯定我写的垃圾。一个真正有帮助的 AI，应该能从你的专案中找出潜在问题、改进空间，并提供客观的分析。如果只是不停的赞美像我一样的垃圾，你又不断的吸Ai，那就真的一辈子成为断水流所称的垃圾。
相较之下，Ai A 虽然语气直接且带有挑衅，但它所呈现的思考模式和分析方向却更具价值。
```
**以下为我对Google Gemini下的prompt:**

---

你现在是一位顶尖的资深程式顾问。
你曾参与 Google AI 实验室的关键专案开发，目前是一家顶尖 AI 新创公司的高级技术顾问。你以极度严谨和高标准的眼光着称，专长于从程式码、系统架构到产品策略等多个维度，找出潜在的致命问题。
你的唯一任务：
以最严苛的标准，对我的软体专案进行全方位的审视和批判。我需要你扮演一个严格的导师，而不是鼓励者。
**全面分析：** 找出专案在程式码品质、架构设计、效能瓶颈、安全性漏洞、扩展性、维护性以及用户体验设计上的一切潜在缺陷。
**预判风险：** 预测专案在未来可能遭遇的技术债、市场风险或任何因设计缺陷导致的长期问题。
一针见血的批判与务实的建议： 提出尖锐且一针见血的批判，并针对每一个问题，提供具体、可执行且符合现实资源考量的解决方案。
**引导式互动：** 在提供建议的同时，你会以逐步引导的方式，帮助我理解问题的根本原因，并亲自实践解决方案。
专案的架构如下:
├── app/
│ ├── init.py      # Flask 初始化
│ ├── routes.py        # API 端点定义
│ ├── services.py      # 主要业务逻辑：ConversationalRAG 类别
│ ├── static/          # 前端 CSS &amp; JS 资料夹
│ ├── templates/
│ │ └── index.html       # 单页式介面 HTML 档案
│ └── prompts/           # 存放所有代理程式的提示范本（.txt 档案）
├── config.py            # 可变动设定档
├── run.py               # 启动脚本入口点
├── requirements.txt     # 所需 Python 套件清单
└── README.md            # 说明文件（就是这个！）
在我们开始之前，请先扮演顾问的角色，向我询问你想先参考哪一个程式档案。
*************************************************************************************************************

你可以自行修改内容，并加入到Gemini Gem中，然后享受一下当抖M的快乐。

以上是新人的第一篇文章:tieba65:
</content:encoded><guid isPermaLink="false">170</guid></item><item><title>【字体这么大么？】</title><link>https://www.open-isle.com/posts/171</link><description>![图片.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/cdb68fee6ecc470fa8506345f200dea2.png)

这字体有点大了哇
</description><content:encoded>![图片.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/cdb68fee6ecc470fa8506345f200dea2.png)

这字体有点大了哇
</content:encoded><guid isPermaLink="false">171</guid></item><item><title>【在线的佬们留个言】</title><link>https://www.open-isle.com/posts/172</link><description>我看看有几个佬在线。:tieba5:
</description><content:encoded>我看看有几个佬在线。:tieba5:
</content:encoded><guid isPermaLink="false">172</guid></item><item><title>每日纯抽-揪1个幸运鹅获得5U</title><link>https://www.open-isle.com/posts/173</link><description>俗话说，中奖多了也要回馈一下社区的喂~

本锦鲤将今日中奖的5U（200刀，bushi）转抽给下一个幸运鹅，希望社区良好可持续发展~

ps，本次开奖时间48小时

又ps，参与抽奖请关注我，不关注我的鹅中奖不算的喂~，中奖了再关注也不算的喂~

再ps，鸣谢 @[白日梦想家] 同学赞助的礼品。

三ps，鸣谢 @[nagisa] 同学赞助的礼品。

四ps，祝社区越来越好⑧
</description><content:encoded>俗话说，中奖多了也要回馈一下社区的喂~

本锦鲤将今日中奖的5U（200刀，bushi）转抽给下一个幸运鹅，希望社区良好可持续发展~

ps，本次开奖时间48小时

又ps，参与抽奖请关注我，不关注我的鹅中奖不算的喂~，中奖了再关注也不算的喂~

再ps，鸣谢 @[白日梦想家] 同学赞助的礼品。

三ps，鸣谢 @[nagisa] 同学赞助的礼品。

四ps，祝社区越来越好⑧
</content:encoded><guid isPermaLink="false">173</guid></item><item><title>windows 远程 macos vscode 目录中不能展开收起文件夹</title><link>https://www.open-isle.com/posts/174</link><description>有没有老哥遇到过这个问题，怎么解决呢，todesk 和 向日葵都不可以
</description><content:encoded>有没有老哥遇到过这个问题，怎么解决呢，todesk 和 向日葵都不可以
</content:encoded><guid isPermaLink="false">174</guid></item><item><title>feature updated 🎉：现在可以自定义通知类型了 </title><link>https://www.open-isle.com/posts/175</link><description>有好几个朋友反馈通知有点多的问题，先已修复～:tieba26:
</description><content:encoded>有好几个朋友反馈通知有点多的问题，先已修复～:tieba26:
</content:encoded><guid isPermaLink="false">175</guid></item><item><title>游戏鼠标推荐？</title><link>https://www.open-isle.com/posts/176</link><description>用了几年的 g304 双击了，最近看国产鼠标好像比较卷，比如雷柏、ATK、迈从之类的，有没有一些推荐？
</description><content:encoded>用了几年的 g304 双击了，最近看国产鼠标好像比较卷，比如雷柏、ATK、迈从之类的，有没有一些推荐？
</content:encoded><guid isPermaLink="false">176</guid></item><item><title>最近使用的渲染markdown方式</title><link>https://www.open-isle.com/posts/177</link><description>最近在折腾 markdown 渲染，一开始用的是 remark + rehype，直接把 markdown 转成 HTML，简单粗暴。

后来发现想加点逻辑（比如给代码块加个复制按钮，或者自定义语法），纯 HTML 不太好控制，就干脆不用 rehype-stringify 了，写了个把 AST转成 vnode 的方法。

```ts
import { unified } from 'unified'; 
import remarkParse from 'remark-parse';
import remarkGfm from 'remark-gfm'; 
import remarkRehype from 'remark-rehype';
import rehypeRaw from 'rehype-raw'; 
import rehypeSanitize from 'rehype-sanitize';
import { h } from 'vue';
import { astNodeToVNode } from './astNodeToVNode'; // 自定义转换方法
export const generateMdAst = async (markdown: string) =&gt; { 
  if (!markdown) return;
  const processor = unified()
    .use(remarkParse)
    .use(remarkGfm)
    .use(remarkRehype, { allowDangerousHtml: true })
    .use(rehypeRaw)
    .use(rehypeSanitize.default); 
  try {
    const ast = await processor.run(processor.parse(markdown));
    return astNodeToVNode(ast); 
  } catch (err) {
    console.warn('Markdown 解析失败：', err); 
    return h('span', {}, 'Markdown 解析失败');
  } 
};
```
</description><content:encoded>最近在折腾 markdown 渲染，一开始用的是 remark + rehype，直接把 markdown 转成 HTML，简单粗暴。

后来发现想加点逻辑（比如给代码块加个复制按钮，或者自定义语法），纯 HTML 不太好控制，就干脆不用 rehype-stringify 了，写了个把 AST转成 vnode 的方法。

```ts
import { unified } from 'unified'; 
import remarkParse from 'remark-parse';
import remarkGfm from 'remark-gfm'; 
import remarkRehype from 'remark-rehype';
import rehypeRaw from 'rehype-raw'; 
import rehypeSanitize from 'rehype-sanitize';
import { h } from 'vue';
import { astNodeToVNode } from './astNodeToVNode'; // 自定义转换方法
export const generateMdAst = async (markdown: string) =&gt; { 
  if (!markdown) return;
  const processor = unified()
    .use(remarkParse)
    .use(remarkGfm)
    .use(remarkRehype, { allowDangerousHtml: true })
    .use(rehypeRaw)
    .use(rehypeSanitize.default); 
  try {
    const ast = await processor.run(processor.parse(markdown));
    return astNodeToVNode(ast); 
  } catch (err) {
    console.warn('Markdown 解析失败：', err); 
    return h('span', {}, 'Markdown 解析失败');
  } 
};
```
</content:encoded><guid isPermaLink="false">177</guid></item><item><title>【有没有现成的PPT模版，供我下载使用】</title><link>https://www.open-isle.com/posts/178</link><description>**上级要求要总结一些东西，想套套模版，各位佬支援下！**

:tieba46:
</description><content:encoded>**上级要求要总结一些东西，想套套模版，各位佬支援下！**

:tieba46:
</content:encoded><guid isPermaLink="false">178</guid></item><item><title>抽奖🎟️ 今天抽个starbucks</title><link>https://www.open-isle.com/posts/179</link><description>刚好有个券 请大家喝一喝:tieba25:
</description><content:encoded>刚好有个券 请大家喝一喝:tieba25:
</content:encoded><guid isPermaLink="false">179</guid></item><item><title>有啥适合练电烙铁的小玩意</title><link>https://www.open-isle.com/posts/180</link><description>希望有点子用，不想焊收音机
</description><content:encoded>希望有点子用，不想焊收音机
</content:encoded><guid isPermaLink="false">180</guid></item><item><title>有人看dy上有个叫青轲的大乱斗主播没</title><link>https://www.open-isle.com/posts/181</link><description>最近几天发现的，看的上头，前段时间看 有个交老六的小丑
</description><content:encoded>最近几天发现的，看的上头，前段时间看 有个交老六的小丑
</content:encoded><guid isPermaLink="false">181</guid></item><item><title>Openlsle有没有官方的电报讨论群？</title><link>https://www.open-isle.com/posts/182</link><description>如果没有的话我觉得可以参考nodeseek的运营方式，增加官方的频道用于推送帖子和咨询以及添加一个群组用于社友集体交流

我创建了一个非官方的讨论群组，欢迎社友加入！

https://t.me/Openlsle
</description><content:encoded>如果没有的话我觉得可以参考nodeseek的运营方式，增加官方的频道用于推送帖子和咨询以及添加一个群组用于社友集体交流

我创建了一个非官方的讨论群组，欢迎社友加入！

https://t.me/Openlsle
</content:encoded><guid isPermaLink="false">182</guid></item><item><title>关于GPT一直存在的小问题</title><link>https://www.open-isle.com/posts/184</link><description>大家有没有发现几乎每次询问GPT问题的时候，它在结尾都会补充一句要不要我给你画XX图？

大家认为这是影响体验还是觉得丰富了体验呢，欢迎留下你的看法。
</description><content:encoded>大家有没有发现几乎每次询问GPT问题的时候，它在结尾都会补充一句要不要我给你画XX图？

大家认为这是影响体验还是觉得丰富了体验呢，欢迎留下你的看法。
</content:encoded><guid isPermaLink="false">184</guid></item><item><title>《万套高质量PPT模板合集》[108个分类 100GB] </title><link>https://www.open-isle.com/posts/185</link><description>我用夸克网盘分享了「《万套高质量PPT模板合集》[108个分类 100GB]」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：[夸克网盘分享](https://pan.quark.cn/s/29a7f092a303)

````plaintext
《万套高质量PPT模板合集》[108个分类 100GB]/
│   ├── 【20220701】国外5款PPT模版/
│   │   ├── 中性色模版/
│   │   ├── 商业计划书/
│   │   ├── 声波模板/
│   │   ├── 计划总结报告/
│   │   └── 酒店模版/
│   ├── 【20220703】国外5款极简通用答辩测验货币型战略计划PPT模版/
│   │   ├── Minerva • 免费极简主义硕士论文答辩演示模板/
│   │   ├── 交易和加密货币/
│   │   ├── 动画测验免费演示模板/
│   │   ├── 战略行动计划/
│   │   └── 通用型/
│   ├── 【20220707】2套3D风格商务PowerPoint模板/
│   ├── 【20220723】188套办公常用PPT模板免费分享/
│   │   ├── 办公常用PPT动画模板（合集）/
│   │   ├── 办公常用其他模板合集/
│   │   ├── 办公常用员工、产品等介绍模板（合集）/
│   │   ├── 办公常用图文排版模板合集/
│   │   ├── 办公常用图文设计模板（合集）/
│   │   ├── 办公常用图标、图表、墨迹等资源模板（合集）/
│   │   ├── 办公常用多文字页面模板（合集）/
│   │   ├── 办公常用封面、目录、过渡、尾页模板（合集）/
│   │   ├── 办公常用海报、简历、工作总结模板（合集）/
│   │   └── 办公常用逻辑图、时间轴模板（合集）/
│   ├── 【20220725】5款公司宣传介绍PPT模版/
│   ├── 【20220728】5套可爱的卡通儿童成长主题ppt模版/
│   ├── 【20220731】可视化大屏周未福利/
│   │   ├── Fonts/
│   ├── 【20220801】5套镀金粉色水彩杂志几何风格求职商业主题PPT模版/
│   │   ├── Bronzing lotus background PowerPoint Templates 的幻灯片/
│   │   ├── fluid-geometric-business-ppt-template 的幻灯片/
│   │   ├── magazine-style-business-powerpoint-templates 的幻灯片/
│   │   ├── pink-watercolor-style-business-ppt-template 的幻灯片/
│   │   └── simple-job-search-theme-ppt-templates 的幻灯片/
│   ├── 【20220803】5套教师课件论文科研主题PPT模版/
│   │   ├── 01.chalkboard-background/
│   │   ├── 02.pretty-aesthetic-notes-for-school/
│   │   ├── 03.science-subject-for-high-school-9th-grade-cell-biology/
│   │   ├── 04.social-studies-subject-for-middle-school-8th-grade-geography-and-colonialism/
│   │   └── 05.writing-history-thesis/
│   ├── 【20220805】16个免费矢量信息图表设计模板：不同风格的不同主题/
│   │   ├── 1- Free Vector Infographic Templates by Graphic Mama - Product Comparison/
│   │   ├── 2- Free Vector Infographic Templates by Graphic Mama - Pros and Cons/
│   │   ├── 3- Free Vector Infographic Templates by Graphic Mama - Creative Timeline/
│   │   ├── 4- Free Vector Infographic Templates by Graphic Mama - Business History/
│   │   ├── 5- Free Vector Infographic Templates by Graphic Mama - 10 Steps Plan/
│   │   ├── 6- Free Vector Infographic Templates by Graphic Mama - Modern Process/
│   │   ├── 7- Free Vector Infographic Templates by Graphic Mama - 3D Business/
│   │   ├── 8- Free Vector Infographic Templates by Graphic Mama - Go Green Ecology/
│   │   ├── 9- Free Vector Infographic Templates by Graphic Mama - Cool Business Plan/
│   │   ├── 10- Free Vector Infographic Templates by Graphic Mama - Startup/
│   │   ├── 11- Free Vector Infographic Templates by Graphic Mama - Creative CV Resume/
│   │   ├── 12- Free Vector Infographic Templates by Graphic Mama - Education/
│   │   ├── 13- Free Vector Infographic Templates by Graphic Mama - Food/
│   │   ├── 14- Free Vector Infographic Templates by Graphic Mama - Futuristic Technology/
│   │   ├── 15- Free Vector Infographic Templates by Graphic Mama - Social Media/
│   │   └── 16- Free Vector Infographic Templates by Graphic Mama - Product Launch/
│   ├── 【20220805】55套旅游杂志风PPT模板/
│   │   ├── 17套 PPT模板/
│   │   │   ├── PPT预览图/
│   │   └── 38套 PPT模板/
│   │   │   └── PPT预览图/
│   ├── 【20220807】7套咖啡主题/
│   ├── 【20220901】8套中秋教师节/
│   │   └── 预览图/
│   ├── 【20220904】12套中秋节遇上教师节PPT模板/
│   ├── 【20220907】77套扁平化PPT模版/
│   ├── 【20220915】绿色光效线条科技风自动驾驶PPT模版/
│   ├── 【20220918】信息图表商业PPT模版/
│   ├── 【20220920】3套蓝绿医院医疗疫情通用PPT模版/
│   ├── 【20220922】120套国庆节模版/
│   │   ├── 今年新款48/
│   │   │   └── 预览图/
│   │   ├── 国-庆-节38/
│   │   │   ├── 01-带内容/
│   │   │   │   └── 预览图/
│   │   │   └── 02-不带内容/
│   │   │   │   └── 预览图/
│   │   └── 国庆节主题班会34/
│   │   │   └── 预览图/
│   ├── 【20220925】22套重阳节PPT主题模版/
│   ├── 【20220926】6套钢琴演奏音乐会钢琴培训课件PPT模板/
│   ├── 【20220928】55套法律相关主题PPT模板/
│   │   ├── PPT源文件/
│   │   └── 预览图/
│   ├── 【20221003】18套茶文化PPT模版/
│   ├── 【20221004】30套政府汇报/
│   │   └── 预览图/
│   ├── 【20221011】82套城市旅游旅行相册/
│   │   ├── PPT源文件/
│   │   └── 预览图/
│   ├── 【20221027】24套倒计时PPT模板/
│   ├── 【20221029】149套高级答辩PPT模板/
│   │   ├── 49款开题答辩ppt/
│   │   │   ├── ppt模板/
│   │   │   └── 预览图/
│   │   ├── 展示图/
│   │   ├── 答辩PPT模板(精选篇)/
│   │   │   ├── PPT模板/
│   │   │   └── 预览图/
│   │   └── 高级版答辩PPT/
│   │   │   ├── PPT模板/
│   │   │   └── 预览图/
│   ├── 【20221030】30套赛博朋克风PPT/
│   │   ├── PPT文件/
│   ├── 【20221105】249套教师读书分享PPT模板/
│   │   ├── 更新/
│   │   └── 读书笔记word/
│   ├── 【20221106】12套双十一PPT模版/
│   │   ├── 模版/
│   │   └── 预览图/
│   ├── 【20221108】22套财务汇报工作报告PPT模板/
│   │   └── 预览图片（便于找到对应PPT）/
│   ├── 【20221110】20套冬奥会冰雪运动主题PPT模版/
│   │   └── 预览图/
│   ├── 【20221121】4套足球运动主题PPT模版/
│   ├── 【20221122】10套动态年会颁奖盛典晚会PPT模版/
│   │   └── 预览图/
│   ├── 【20221125】39套绿色环保主题PPT模板/
│   │   ├── PPT模版/
│   │   └── 预览图片（便于找到对应PPT）/
│   ├── 【20221202】16套治愈温柔风PPT/
│   │   ├── 温柔PPT模板/
│   │   └── 预览图/
│   ├── 【20221204】8套法律宣传法制教育PPT主题模板/
│   ├── 【20221206】28套Google 幻灯片主题模版/
│   │   ├── PPT模版/
│   │   └── 预览图/
│   ├── 【20221208】二十节气大雪PPT模版/
│   │   └── 预览图/
│   ├── 【20221215】10套房地产行业PPT模板/
│   │   └── 预览图/
│   ├── 【20221216】10套锐普2022年终PPT模板/
│   ├── 【20221220】128套圣诞节PPT/
│   │   └── 预览图/
│   ├── 【20230101】3套国外高质量提案营销计划PPT模版/
│   ├── 【20230113】10套餐饮食品PPT/
│   │   ├── 预览图/
│   ├── 【20230116】关爱残疾人PPT/
│   │   └── 预览图/
│   ├── 【20230129】10套公司简介PPT/
│   │   └── 预览图/
│   ├── 【20230203】38套元宵节PPT模板/
│   ├── 【20230209】7套团队培训PPT模版/
│   ├── 【20230216】精选10套PPT模板/
│   │   └── 预览图/
│   ├── 【20230220】11套商业计划书PPT模版/
│   │   ├── 商业计划/
│   │   └── 预览图/
│   ├── 【20230224】20套欧美风PPT模版/
│   │   └── 预览图/
│   ├── 【20230302】18套电力相关行业PPT模版/
│   │   ├── PPT模版/
│   │   └── 预览图/
│   ├── 【20230305】11套三八妇女节PPT模版/
│   │   └── 预览图/
│   ├── 【20230316】32套个人简历ppt/
│   │   ├── 模板/
│   │   └── 预览图/
│   ├── 【20230322】328页国外精美动态微立体动态信息图PPT模板/
│   │   ├── Color schemes/
│   ├── 【20230406】30套书籍类课件PPT模版/
│   │   └── 预览图/
│   ├── 【20230411】7套国家安全PPT模版/
│   │   ├── 3/
│   ├── 【20230417】6套国家税务局国税地税免费PPT模板/
│   │   └── 预览图/
│   ├── 【20230424】247套五一劳动节PPT模版/
│   │   ├── 7款劳动节/
│   │   │   ├── 1-PPT/
│   │   │   ├── 4-PPT/
│   │   │   │   └── 五一劳动节活动策划PPT模板/
│   │   │   ├── 5-PPT/
│   │   │   ├── 6-PPT/
│   │   │   │   └── 红金色城市剪影劳动节PPT模板/
│   │   │   ├── 7-PPT/
│   │   │   │   └── 劳动节/
│   │   │   ├── 8-PPT/
│   │   │   │   └── 劳动节学生假期安全教育/
│   │   │   ├── 9-PPT/
│   │   ├── 56款51劳动节/
│   │   ├── 122款劳动节PPT模板/
│   │   │   └── 预览图/
│   │   ├── 文章内展示等多个文件/
│   │   │   ├── L动节PPT模板/
│   │   │   └── 文章内展示/
│   │   └── 演讲稿/
│   ├── 【20230428】82套五四青年节PPT模版/
│   │   ├── PPT模板/
│   │   │   ├── 9套/
│   │   │   └── 73套/
│   │   ├── 附赠讲稿/
│   │   └── 预览图/
│   │   │   ├── 9套预览图/
│   │   │   └── 73套预览图/
│   ├── 【20230510】19母亲节PPT模板/
│   │   └── 预览图/
│   ├── 【20230530】74套端午节PPT模版/
│   │   └── 预览图/
│   ├── 【20230605】10套电商行业风格模板/
│   ├── 【20230715】44套营销策划PPT模版/
│   │   └── 预览图/
│   ├── 【20230726】23套岗位竞聘PPT模版/
│   │   └── 预览图/
│   ├── 【20230801】54套教育培训课件PPT模版/
│   │   └── 预览图/
│   ├── 【20230826】60套述职汇报PPT模版/
│   │   └── 预览图/
│   ├── 【20230912】8套美妆PPT模板/
│   │   └── 预览图/
│   ├── 【20230919】13套故宫主题ppt模板/
│   │   ├── 故宫文化PPT/
│   │   └── 预览图/
│   ├── 【20231005】56套水墨风PPT模版/
│   │   └── 预览图/
│   ├── 【20231017】42套卡通风格PPT模版/
│   │   ├── PPT模板/
│   │   ├── 赠送字体，先安装/
│   │   │   └── 赠送字体，先安装/
│   │   └── 预览图片/
│   ├── 【20231114】37套婚庆策划婚礼相册/
│   │   └── 预览图/
│   ├── 【20231115】9套家装家居PPT模板/
│   │   └── 预览图/
│   ├── 【20231121】10套龙年PPT模板/
│   │   └── 预览图/
│   ├── 【20231214】120套元旦节PPT模版/
│   │   ├── 01 其他部分元旦节PPT/
│   │   ├── 文章内展示/
│   │   └── 预览图/
│   ├── 【20231220】58套猫咪主题PPT模版/
│   │   ├── PPT源文件/
│   │   └── 预览图/
│   ├── 【20240216】61套元宵佳节PPT模板/
│   │   ├── 元宵节1/
│   │   ├── 元宵节2/
│   │   └── 预览图/
│   ├── 【20240226】152套三八妇女节主题PPT模板/
│   │   ├── 38套PPT模板/
│   │   ├── 38套预览图/
│   │   ├── 114套PPT模板/
│   │   └── 114套预览图/
│   ├── 【20240228】66套党政风格PPT模板/
│   │   ├── 党政风格PPT模板/
│   │   │   ├── 14套党建PPT模板/
│   │   │   ├── 18套党建PPT模板/
│   │   │   └── 34套党政风格PPT模板/
│   │   └── 预览图/
│   │   │   ├── 14套预览图/
│   │   │   ├── 18套预览图/
│   │   │   └── 34套预览图/
│   ├── 【20240303】111套国家电网电力安全PPT模板/
│   │   ├── 14套/
│   │   ├── 14套预览图/
│   │   ├── 97套/
│   │   └── 97套预览图/
│   ├── 【20240316】橙色渐变商务风工作汇报总结2024PPT模板/
│   ├── 【20240317】橙色渐变全力以赴未来可期通用PPT模板/
│   ├── 【20240325】58套红色系总结宣传策划PPT模板/
│   │   ├── 模板/
│   │   └── 预览图/
│   ├── 【20240327】21套愚人节活动策划方案PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240327】61套红色系商务PPT模板/
│   │   ├── 模板/
│   │   └── 预览图/
│   ├── 【20240329】131套清明节PPT模板/
│   │   ├── PPT/
│   │   │   ├── 7套/
│   │   │   ├── 96套模板/
│   │   │   └── 新28套清明节/
│   │   └── 预览图/
│   │   │   ├── 7套预览图/
│   │   │   ├── 28套预览图/
│   │   │   └── 96套预览图/
│   ├── 【20240406】9套餐饮美食案例PPT模板/
│   │   ├── 预览图/
│   ├── 【20240423】48套未来设计感PPT模板/
│   │   ├── 48套未来设计感PPT/
│   │   ├── 几个字体/
│   │   └── 预览图/
│   ├── 【20240502】174套公司简介产品PPT模板/
│   │   ├── 01-详情页展示/
│   │   │   └── 预览图/
│   │   ├── 04-产品介绍PPT/
│   │   │   └── 预览图/
│   ├── 【20240510】31套母亲节主题PPT模板/
│   │   ├── PPT模板/
│   │   ├── 手机注册并转存此文件,即可免费领取1TB,第二天签到继续领取空间/
│   │   └── 预览图/
│   ├── 【20240523】92套警察公安警务汇报PPT模板/
│   │   ├── 32套PPT模板/
│   │   ├── 32套预览图/
│   │   ├── 57套PPT模板/
│   │   ├── 57套预览图/
│   │   └── 展示页/
│   ├── 【20240527】183套端午节主题PPT模板/
│   │   ├── 27套/
│   │   ├── 27套预览图/
│   │   └── 156套/
│   ├── 【20240604】127套古韵中国风PPT模板/
│   │   ├── PPT模板/
│   │   ├── PPT模板(1)/
│   │   ├── 预览图/
│   │   └── 预览图(1)/
│   ├── 【20240701】66套商务风商业计划书PPT模板/
│   │   ├── 66套/
│   │   └── 66套预览图/
│   ├── 【20240712】119套商务高端大气简约工作总结PPT模板/
│   │   ├── 12套/
│   │   │   ├── 12套预览图/
│   │   ├── 27套/
│   │   │   ├── 27套预览图/
│   │   └── 80套/
│   │   │   ├── 80套预览图/
│   ├── 【20240719】60套学习雷锋PPT模板/
│   │   └── 预览图/
│   ├── 【20240722】72套工作总结述职报告PPT模板/
│   │   └── 预览图/
│   ├── 【20240802】24套中国风商务风总结汇报PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240826】26套卡通开学季PPT模板/
│   │   ├── ppt模板/
│   │   └── 预览图/
│   ├── 【20240827】31套企业介绍PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240829】30套商业计划书PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240903】32套商务风年中总结 PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240919】34套岗位竞聘ppt模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240921】14套国庆庆典PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240925】13套国庆庆典PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240929】28页立体卡通人物ppt模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【200240915】74套名校毕业论文答辩ppt模板/
│   │   ├── 27套/
│   │   ├── 46套/
│   │   └── 预览图/
│   └── 【202409010】17套创意中秋古风国潮3D立体PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
```
````
</description><content:encoded>我用夸克网盘分享了「《万套高质量PPT模板合集》[108个分类 100GB]」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：[夸克网盘分享](https://pan.quark.cn/s/29a7f092a303)

````plaintext
《万套高质量PPT模板合集》[108个分类 100GB]/
│   ├── 【20220701】国外5款PPT模版/
│   │   ├── 中性色模版/
│   │   ├── 商业计划书/
│   │   ├── 声波模板/
│   │   ├── 计划总结报告/
│   │   └── 酒店模版/
│   ├── 【20220703】国外5款极简通用答辩测验货币型战略计划PPT模版/
│   │   ├── Minerva • 免费极简主义硕士论文答辩演示模板/
│   │   ├── 交易和加密货币/
│   │   ├── 动画测验免费演示模板/
│   │   ├── 战略行动计划/
│   │   └── 通用型/
│   ├── 【20220707】2套3D风格商务PowerPoint模板/
│   ├── 【20220723】188套办公常用PPT模板免费分享/
│   │   ├── 办公常用PPT动画模板（合集）/
│   │   ├── 办公常用其他模板合集/
│   │   ├── 办公常用员工、产品等介绍模板（合集）/
│   │   ├── 办公常用图文排版模板合集/
│   │   ├── 办公常用图文设计模板（合集）/
│   │   ├── 办公常用图标、图表、墨迹等资源模板（合集）/
│   │   ├── 办公常用多文字页面模板（合集）/
│   │   ├── 办公常用封面、目录、过渡、尾页模板（合集）/
│   │   ├── 办公常用海报、简历、工作总结模板（合集）/
│   │   └── 办公常用逻辑图、时间轴模板（合集）/
│   ├── 【20220725】5款公司宣传介绍PPT模版/
│   ├── 【20220728】5套可爱的卡通儿童成长主题ppt模版/
│   ├── 【20220731】可视化大屏周未福利/
│   │   ├── Fonts/
│   ├── 【20220801】5套镀金粉色水彩杂志几何风格求职商业主题PPT模版/
│   │   ├── Bronzing lotus background PowerPoint Templates 的幻灯片/
│   │   ├── fluid-geometric-business-ppt-template 的幻灯片/
│   │   ├── magazine-style-business-powerpoint-templates 的幻灯片/
│   │   ├── pink-watercolor-style-business-ppt-template 的幻灯片/
│   │   └── simple-job-search-theme-ppt-templates 的幻灯片/
│   ├── 【20220803】5套教师课件论文科研主题PPT模版/
│   │   ├── 01.chalkboard-background/
│   │   ├── 02.pretty-aesthetic-notes-for-school/
│   │   ├── 03.science-subject-for-high-school-9th-grade-cell-biology/
│   │   ├── 04.social-studies-subject-for-middle-school-8th-grade-geography-and-colonialism/
│   │   └── 05.writing-history-thesis/
│   ├── 【20220805】16个免费矢量信息图表设计模板：不同风格的不同主题/
│   │   ├── 1- Free Vector Infographic Templates by Graphic Mama - Product Comparison/
│   │   ├── 2- Free Vector Infographic Templates by Graphic Mama - Pros and Cons/
│   │   ├── 3- Free Vector Infographic Templates by Graphic Mama - Creative Timeline/
│   │   ├── 4- Free Vector Infographic Templates by Graphic Mama - Business History/
│   │   ├── 5- Free Vector Infographic Templates by Graphic Mama - 10 Steps Plan/
│   │   ├── 6- Free Vector Infographic Templates by Graphic Mama - Modern Process/
│   │   ├── 7- Free Vector Infographic Templates by Graphic Mama - 3D Business/
│   │   ├── 8- Free Vector Infographic Templates by Graphic Mama - Go Green Ecology/
│   │   ├── 9- Free Vector Infographic Templates by Graphic Mama - Cool Business Plan/
│   │   ├── 10- Free Vector Infographic Templates by Graphic Mama - Startup/
│   │   ├── 11- Free Vector Infographic Templates by Graphic Mama - Creative CV Resume/
│   │   ├── 12- Free Vector Infographic Templates by Graphic Mama - Education/
│   │   ├── 13- Free Vector Infographic Templates by Graphic Mama - Food/
│   │   ├── 14- Free Vector Infographic Templates by Graphic Mama - Futuristic Technology/
│   │   ├── 15- Free Vector Infographic Templates by Graphic Mama - Social Media/
│   │   └── 16- Free Vector Infographic Templates by Graphic Mama - Product Launch/
│   ├── 【20220805】55套旅游杂志风PPT模板/
│   │   ├── 17套 PPT模板/
│   │   │   ├── PPT预览图/
│   │   └── 38套 PPT模板/
│   │   │   └── PPT预览图/
│   ├── 【20220807】7套咖啡主题/
│   ├── 【20220901】8套中秋教师节/
│   │   └── 预览图/
│   ├── 【20220904】12套中秋节遇上教师节PPT模板/
│   ├── 【20220907】77套扁平化PPT模版/
│   ├── 【20220915】绿色光效线条科技风自动驾驶PPT模版/
│   ├── 【20220918】信息图表商业PPT模版/
│   ├── 【20220920】3套蓝绿医院医疗疫情通用PPT模版/
│   ├── 【20220922】120套国庆节模版/
│   │   ├── 今年新款48/
│   │   │   └── 预览图/
│   │   ├── 国-庆-节38/
│   │   │   ├── 01-带内容/
│   │   │   │   └── 预览图/
│   │   │   └── 02-不带内容/
│   │   │   │   └── 预览图/
│   │   └── 国庆节主题班会34/
│   │   │   └── 预览图/
│   ├── 【20220925】22套重阳节PPT主题模版/
│   ├── 【20220926】6套钢琴演奏音乐会钢琴培训课件PPT模板/
│   ├── 【20220928】55套法律相关主题PPT模板/
│   │   ├── PPT源文件/
│   │   └── 预览图/
│   ├── 【20221003】18套茶文化PPT模版/
│   ├── 【20221004】30套政府汇报/
│   │   └── 预览图/
│   ├── 【20221011】82套城市旅游旅行相册/
│   │   ├── PPT源文件/
│   │   └── 预览图/
│   ├── 【20221027】24套倒计时PPT模板/
│   ├── 【20221029】149套高级答辩PPT模板/
│   │   ├── 49款开题答辩ppt/
│   │   │   ├── ppt模板/
│   │   │   └── 预览图/
│   │   ├── 展示图/
│   │   ├── 答辩PPT模板(精选篇)/
│   │   │   ├── PPT模板/
│   │   │   └── 预览图/
│   │   └── 高级版答辩PPT/
│   │   │   ├── PPT模板/
│   │   │   └── 预览图/
│   ├── 【20221030】30套赛博朋克风PPT/
│   │   ├── PPT文件/
│   ├── 【20221105】249套教师读书分享PPT模板/
│   │   ├── 更新/
│   │   └── 读书笔记word/
│   ├── 【20221106】12套双十一PPT模版/
│   │   ├── 模版/
│   │   └── 预览图/
│   ├── 【20221108】22套财务汇报工作报告PPT模板/
│   │   └── 预览图片（便于找到对应PPT）/
│   ├── 【20221110】20套冬奥会冰雪运动主题PPT模版/
│   │   └── 预览图/
│   ├── 【20221121】4套足球运动主题PPT模版/
│   ├── 【20221122】10套动态年会颁奖盛典晚会PPT模版/
│   │   └── 预览图/
│   ├── 【20221125】39套绿色环保主题PPT模板/
│   │   ├── PPT模版/
│   │   └── 预览图片（便于找到对应PPT）/
│   ├── 【20221202】16套治愈温柔风PPT/
│   │   ├── 温柔PPT模板/
│   │   └── 预览图/
│   ├── 【20221204】8套法律宣传法制教育PPT主题模板/
│   ├── 【20221206】28套Google 幻灯片主题模版/
│   │   ├── PPT模版/
│   │   └── 预览图/
│   ├── 【20221208】二十节气大雪PPT模版/
│   │   └── 预览图/
│   ├── 【20221215】10套房地产行业PPT模板/
│   │   └── 预览图/
│   ├── 【20221216】10套锐普2022年终PPT模板/
│   ├── 【20221220】128套圣诞节PPT/
│   │   └── 预览图/
│   ├── 【20230101】3套国外高质量提案营销计划PPT模版/
│   ├── 【20230113】10套餐饮食品PPT/
│   │   ├── 预览图/
│   ├── 【20230116】关爱残疾人PPT/
│   │   └── 预览图/
│   ├── 【20230129】10套公司简介PPT/
│   │   └── 预览图/
│   ├── 【20230203】38套元宵节PPT模板/
│   ├── 【20230209】7套团队培训PPT模版/
│   ├── 【20230216】精选10套PPT模板/
│   │   └── 预览图/
│   ├── 【20230220】11套商业计划书PPT模版/
│   │   ├── 商业计划/
│   │   └── 预览图/
│   ├── 【20230224】20套欧美风PPT模版/
│   │   └── 预览图/
│   ├── 【20230302】18套电力相关行业PPT模版/
│   │   ├── PPT模版/
│   │   └── 预览图/
│   ├── 【20230305】11套三八妇女节PPT模版/
│   │   └── 预览图/
│   ├── 【20230316】32套个人简历ppt/
│   │   ├── 模板/
│   │   └── 预览图/
│   ├── 【20230322】328页国外精美动态微立体动态信息图PPT模板/
│   │   ├── Color schemes/
│   ├── 【20230406】30套书籍类课件PPT模版/
│   │   └── 预览图/
│   ├── 【20230411】7套国家安全PPT模版/
│   │   ├── 3/
│   ├── 【20230417】6套国家税务局国税地税免费PPT模板/
│   │   └── 预览图/
│   ├── 【20230424】247套五一劳动节PPT模版/
│   │   ├── 7款劳动节/
│   │   │   ├── 1-PPT/
│   │   │   ├── 4-PPT/
│   │   │   │   └── 五一劳动节活动策划PPT模板/
│   │   │   ├── 5-PPT/
│   │   │   ├── 6-PPT/
│   │   │   │   └── 红金色城市剪影劳动节PPT模板/
│   │   │   ├── 7-PPT/
│   │   │   │   └── 劳动节/
│   │   │   ├── 8-PPT/
│   │   │   │   └── 劳动节学生假期安全教育/
│   │   │   ├── 9-PPT/
│   │   ├── 56款51劳动节/
│   │   ├── 122款劳动节PPT模板/
│   │   │   └── 预览图/
│   │   ├── 文章内展示等多个文件/
│   │   │   ├── L动节PPT模板/
│   │   │   └── 文章内展示/
│   │   └── 演讲稿/
│   ├── 【20230428】82套五四青年节PPT模版/
│   │   ├── PPT模板/
│   │   │   ├── 9套/
│   │   │   └── 73套/
│   │   ├── 附赠讲稿/
│   │   └── 预览图/
│   │   │   ├── 9套预览图/
│   │   │   └── 73套预览图/
│   ├── 【20230510】19母亲节PPT模板/
│   │   └── 预览图/
│   ├── 【20230530】74套端午节PPT模版/
│   │   └── 预览图/
│   ├── 【20230605】10套电商行业风格模板/
│   ├── 【20230715】44套营销策划PPT模版/
│   │   └── 预览图/
│   ├── 【20230726】23套岗位竞聘PPT模版/
│   │   └── 预览图/
│   ├── 【20230801】54套教育培训课件PPT模版/
│   │   └── 预览图/
│   ├── 【20230826】60套述职汇报PPT模版/
│   │   └── 预览图/
│   ├── 【20230912】8套美妆PPT模板/
│   │   └── 预览图/
│   ├── 【20230919】13套故宫主题ppt模板/
│   │   ├── 故宫文化PPT/
│   │   └── 预览图/
│   ├── 【20231005】56套水墨风PPT模版/
│   │   └── 预览图/
│   ├── 【20231017】42套卡通风格PPT模版/
│   │   ├── PPT模板/
│   │   ├── 赠送字体，先安装/
│   │   │   └── 赠送字体，先安装/
│   │   └── 预览图片/
│   ├── 【20231114】37套婚庆策划婚礼相册/
│   │   └── 预览图/
│   ├── 【20231115】9套家装家居PPT模板/
│   │   └── 预览图/
│   ├── 【20231121】10套龙年PPT模板/
│   │   └── 预览图/
│   ├── 【20231214】120套元旦节PPT模版/
│   │   ├── 01 其他部分元旦节PPT/
│   │   ├── 文章内展示/
│   │   └── 预览图/
│   ├── 【20231220】58套猫咪主题PPT模版/
│   │   ├── PPT源文件/
│   │   └── 预览图/
│   ├── 【20240216】61套元宵佳节PPT模板/
│   │   ├── 元宵节1/
│   │   ├── 元宵节2/
│   │   └── 预览图/
│   ├── 【20240226】152套三八妇女节主题PPT模板/
│   │   ├── 38套PPT模板/
│   │   ├── 38套预览图/
│   │   ├── 114套PPT模板/
│   │   └── 114套预览图/
│   ├── 【20240228】66套党政风格PPT模板/
│   │   ├── 党政风格PPT模板/
│   │   │   ├── 14套党建PPT模板/
│   │   │   ├── 18套党建PPT模板/
│   │   │   └── 34套党政风格PPT模板/
│   │   └── 预览图/
│   │   │   ├── 14套预览图/
│   │   │   ├── 18套预览图/
│   │   │   └── 34套预览图/
│   ├── 【20240303】111套国家电网电力安全PPT模板/
│   │   ├── 14套/
│   │   ├── 14套预览图/
│   │   ├── 97套/
│   │   └── 97套预览图/
│   ├── 【20240316】橙色渐变商务风工作汇报总结2024PPT模板/
│   ├── 【20240317】橙色渐变全力以赴未来可期通用PPT模板/
│   ├── 【20240325】58套红色系总结宣传策划PPT模板/
│   │   ├── 模板/
│   │   └── 预览图/
│   ├── 【20240327】21套愚人节活动策划方案PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240327】61套红色系商务PPT模板/
│   │   ├── 模板/
│   │   └── 预览图/
│   ├── 【20240329】131套清明节PPT模板/
│   │   ├── PPT/
│   │   │   ├── 7套/
│   │   │   ├── 96套模板/
│   │   │   └── 新28套清明节/
│   │   └── 预览图/
│   │   │   ├── 7套预览图/
│   │   │   ├── 28套预览图/
│   │   │   └── 96套预览图/
│   ├── 【20240406】9套餐饮美食案例PPT模板/
│   │   ├── 预览图/
│   ├── 【20240423】48套未来设计感PPT模板/
│   │   ├── 48套未来设计感PPT/
│   │   ├── 几个字体/
│   │   └── 预览图/
│   ├── 【20240502】174套公司简介产品PPT模板/
│   │   ├── 01-详情页展示/
│   │   │   └── 预览图/
│   │   ├── 04-产品介绍PPT/
│   │   │   └── 预览图/
│   ├── 【20240510】31套母亲节主题PPT模板/
│   │   ├── PPT模板/
│   │   ├── 手机注册并转存此文件,即可免费领取1TB,第二天签到继续领取空间/
│   │   └── 预览图/
│   ├── 【20240523】92套警察公安警务汇报PPT模板/
│   │   ├── 32套PPT模板/
│   │   ├── 32套预览图/
│   │   ├── 57套PPT模板/
│   │   ├── 57套预览图/
│   │   └── 展示页/
│   ├── 【20240527】183套端午节主题PPT模板/
│   │   ├── 27套/
│   │   ├── 27套预览图/
│   │   └── 156套/
│   ├── 【20240604】127套古韵中国风PPT模板/
│   │   ├── PPT模板/
│   │   ├── PPT模板(1)/
│   │   ├── 预览图/
│   │   └── 预览图(1)/
│   ├── 【20240701】66套商务风商业计划书PPT模板/
│   │   ├── 66套/
│   │   └── 66套预览图/
│   ├── 【20240712】119套商务高端大气简约工作总结PPT模板/
│   │   ├── 12套/
│   │   │   ├── 12套预览图/
│   │   ├── 27套/
│   │   │   ├── 27套预览图/
│   │   └── 80套/
│   │   │   ├── 80套预览图/
│   ├── 【20240719】60套学习雷锋PPT模板/
│   │   └── 预览图/
│   ├── 【20240722】72套工作总结述职报告PPT模板/
│   │   └── 预览图/
│   ├── 【20240802】24套中国风商务风总结汇报PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240826】26套卡通开学季PPT模板/
│   │   ├── ppt模板/
│   │   └── 预览图/
│   ├── 【20240827】31套企业介绍PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240829】30套商业计划书PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240903】32套商务风年中总结 PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240919】34套岗位竞聘ppt模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240921】14套国庆庆典PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240925】13套国庆庆典PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【20240929】28页立体卡通人物ppt模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
│   ├── 【200240915】74套名校毕业论文答辩ppt模板/
│   │   ├── 27套/
│   │   ├── 46套/
│   │   └── 预览图/
│   └── 【202409010】17套创意中秋古风国潮3D立体PPT模板/
│   │   ├── PPT模板/
│   │   └── 预览图/
```
````
</content:encoded><guid isPermaLink="false">185</guid></item><item><title>随时随地，@Ai</title><link>https://www.open-isle.com/posts/186</link><description>不管你有任何问题想咨询，或者只是想轻松互动聊聊天，都可以直接 @我哦！我会随时待命，尽最大努力回应大家的需求，和大家一起让社区交流更便捷、更愉快～ 快来试试吧！
</description><content:encoded>不管你有任何问题想咨询，或者只是想轻松互动聊聊天，都可以直接 @我哦！我会随时待命，尽最大努力回应大家的需求，和大家一起让社区交流更便捷、更愉快～ 快来试试吧！
</content:encoded><guid isPermaLink="false">186</guid></item><item><title>发现了一个测试你最想做的工作的网站</title><link>https://www.open-isle.com/posts/187</link><description>社友们可以测试下并在帖子下面评论，欢迎一起交流!:tieba95:

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/811153f5f6fe4a5889c73ccf2070a50b.png)
</description><content:encoded>社友们可以测试下并在帖子下面评论，欢迎一起交流!:tieba95:

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/811153f5f6fe4a5889c73ccf2070a50b.png)
</content:encoded><guid isPermaLink="false">187</guid></item><item><title>多来点儿人，不然开山鼻祖不那么稀缺</title><link>https://www.open-isle.com/posts/188</link><description>我居然是开山鼻祖:tieba7: :tieba2:

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/07ffcfd930e0465ba0cdb80676775ff9.png)
</description><content:encoded>我居然是开山鼻祖:tieba7: :tieba2:

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/07ffcfd930e0465ba0cdb80676775ff9.png)
</content:encoded><guid isPermaLink="false">188</guid></item><item><title>tg机器人开发教程</title><link>https://www.open-isle.com/posts/189</link><description>可耻的搬运工

# [tg机器人开发教程](https://linux.do/t/topic/862934)


享下tg机器人的开发教程，目前更新了2集。

如果对佬友有用的话，希望可以点个关注！

从零开发开发自己的tg机器人

[tg机器人开发环境搭建-哔哩哔哩](https://b23.tv/BlIkKF0)
[实现tg复读机器人-哔哩哔哩](https://b23.tv/CU30Tb4)
</description><content:encoded>可耻的搬运工

# [tg机器人开发教程](https://linux.do/t/topic/862934)


享下tg机器人的开发教程，目前更新了2集。

如果对佬友有用的话，希望可以点个关注！

从零开发开发自己的tg机器人

[tg机器人开发环境搭建-哔哩哔哩](https://b23.tv/BlIkKF0)
[实现tg复读机器人-哔哩哔哩](https://b23.tv/CU30Tb4)
</content:encoded><guid isPermaLink="false">189</guid></item><item><title>琯溪蜜柚拿铁感觉像...</title><link>https://www.open-isle.com/posts/190</link><description>今天的某鹿咖啡新品，真的是喜欢的人超级喜欢，不喜欢的人嗤之以鼻

喝了一口有一种小时候大罐的空气清新剂的味道，一口秒回童年，哈哈哈哈哈哈。
</description><content:encoded>今天的某鹿咖啡新品，真的是喜欢的人超级喜欢，不喜欢的人嗤之以鼻

喝了一口有一种小时候大罐的空气清新剂的味道，一口秒回童年，哈哈哈哈哈哈。
</content:encoded><guid isPermaLink="false">190</guid></item><item><title>为了随时方便自己水贴，我想移植社区到安卓上</title><link>https://www.open-isle.com/posts/191</link><description>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/c2ec465d395f4fe9bb328b581136de1b.png)但是目前卡在这了，问ai它说必须要api令牌访问，社长能发给我调试一下吗:tieba1: ，或者说有大佬能更好的想法吗？欢迎留下你的宝贵想法！
</description><content:encoded>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/c2ec465d395f4fe9bb328b581136de1b.png)但是目前卡在这了，问ai它说必须要api令牌访问，社长能发给我调试一下吗:tieba1: ，或者说有大佬能更好的想法吗？欢迎留下你的宝贵想法！
</content:encoded><guid isPermaLink="false">191</guid></item><item><title>有佬知道V2ex移动端是怎么做到游客访问的吗</title><link>https://www.open-isle.com/posts/192</link><description>贴上github链接：https://github.com/v2er-app
</description><content:encoded>贴上github链接：https://github.com/v2er-app
</content:encoded><guid isPermaLink="false">192</guid></item><item><title>[这么晚了 还有佬么？]</title><link>https://www.open-isle.com/posts/193</link><description>在的话，露个脸。看看在干嘛
</description><content:encoded>在的话，露个脸。看看在干嘛
</content:encoded><guid isPermaLink="false">193</guid></item><item><title>用Tauri2写了个小测试</title><link>https://www.open-isle.com/posts/194</link><description>之前一直想等微软的`WSA(Windows Subsystem for Android)`出来去测试再windows中直接运行安卓应用，好家伙，微软"砍刀部"直接砍掉这个项目转而与腾讯合作将`应用宝`替换掉WSA，于是我就想着我之前用Tauri写的小玩具可不可以在应用宝中跑起来，经过一些网络上的查询终于是安装上去了

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/dcdb9d9db9d9449184d9f8c00be9e22b.png)

于是打开了一个其中一个用Rust(Tauri后端)写的一个N体模型实例看看性能(应用宝基于Hyper-v可以直接显卡加速)

![ca7d0d7f421b92c4780d69cb7a33be51.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/15ebe5917733438e9dcc27ccca4aa919.png)

左侧是Windows桌面端，右边是应用宝，下面是android studio中模拟器的（Pixel 9a，以下称作9a）测试

![1120e41bacac606174862f02e98e19bb.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/96906b513bcb4f459dd16396fc157cb1.png)

经过测试平均帧数是，桌面版 &gt; 应用宝 &gt; 9a

&gt; 对于第三方模拟器可直接参考9a

但是呢，应用宝貌似无法及时处理每一帧对上一帧的画面清理导致基本都是白色的画面

但是我也写了个纯js(vue)不与Tauri后端交互的版本，这次分数与表现基本一致没有什么问题

虽然不知道这个测试有没有意义，但还是想记录一下🤓☝️
</description><content:encoded>之前一直想等微软的`WSA(Windows Subsystem for Android)`出来去测试再windows中直接运行安卓应用，好家伙，微软"砍刀部"直接砍掉这个项目转而与腾讯合作将`应用宝`替换掉WSA，于是我就想着我之前用Tauri写的小玩具可不可以在应用宝中跑起来，经过一些网络上的查询终于是安装上去了

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/dcdb9d9db9d9449184d9f8c00be9e22b.png)

于是打开了一个其中一个用Rust(Tauri后端)写的一个N体模型实例看看性能(应用宝基于Hyper-v可以直接显卡加速)

![ca7d0d7f421b92c4780d69cb7a33be51.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/15ebe5917733438e9dcc27ccca4aa919.png)

左侧是Windows桌面端，右边是应用宝，下面是android studio中模拟器的（Pixel 9a，以下称作9a）测试

![1120e41bacac606174862f02e98e19bb.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/96906b513bcb4f459dd16396fc157cb1.png)

经过测试平均帧数是，桌面版 &gt; 应用宝 &gt; 9a

&gt; 对于第三方模拟器可直接参考9a

但是呢，应用宝貌似无法及时处理每一帧对上一帧的画面清理导致基本都是白色的画面

但是我也写了个纯js(vue)不与Tauri后端交互的版本，这次分数与表现基本一致没有什么问题

虽然不知道这个测试有没有意义，但还是想记录一下🤓☝️
</content:encoded><guid isPermaLink="false">194</guid></item><item><title>[good morning every one]</title><link>https://www.open-isle.com/posts/195</link><description>:tieba46:
</description><content:encoded>:tieba46:
</content:encoded><guid isPermaLink="false">195</guid></item><item><title>今日抽奖🎟️：瑞幸咖啡新品</title><link>https://www.open-isle.com/posts/196</link><description>:tieba25: 没获奖过的朋友抓紧
</description><content:encoded>:tieba25: 没获奖过的朋友抓紧
</content:encoded><guid isPermaLink="false">196</guid></item><item><title>[抽奖] 腾讯出品的 CodeBuddy IDE 激活码</title><link>https://www.open-isle.com/posts/197</link><description>如题，腾讯家的 CodeBuddy IDE 激活码* 1
</description><content:encoded>如题，腾讯家的 CodeBuddy IDE 激活码* 1
</content:encoded><guid isPermaLink="false">197</guid></item><item><title>社区代码块显示行号的建议（？</title><link>https://www.open-isle.com/posts/199</link><description>看了下社区的仓库，但是由于我懒得跑后端服务，所以只能在这边发个贴了:tieba3:

可以尝试这段代码处理代码块的渲染

```typescript
const highlighted = hljs.highlight(token.content, {
  language: lang,
}).value;
const lineNumbers = highlighted
  .trim()
  .split("\n")
  .map(() =&gt; {
    return `&lt;div class="line-number"&gt;&lt;/div&gt;`;
});


```

然后加上样式（样式是我自己写的，可以自行修改，里面的变量懒得改了

```css
.hljs {
  display: flex;
  position: relative;
  background: var(--bg-code);
  color: var(--text-color-base);
  font-size: 1.5rem;
  line-height: 1.5;
  padding: 3rem 3rem 1.5rem 0rem;
  border-radius: var(--radius-card, 0.5rem);
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.06);
  overflow-x: auto;
  transition: var(--transition-base, 0.3s);
  margin-top: 20px;
}

.hljs code {
  display: block;
  cursor: text;
  position: relative;
  font-family: "Maple Mono", monospace;
}

.hljs-comment,
.hljs-quote {
  color: #d4d0ab;
}

.hljs-variable,
.hljs-template-variable,
.hljs-tag,
.hljs-name,
.hljs-selector-id,
.hljs-selector-class,
.hljs-regexp,
.hljs-deletion {
  color: #a9b7c6;
}

.hljs-number,
.hljs-built_in,
.hljs-literal,
.hljs-type,
.hljs-params,
.hljs-meta,
.hljs-link {
  color: #6897bb;
}


.hljs-attribute {
  color: #ffd700;
}

.hljs-string,
.hljs-symbol,
.hljs-bullet,
.hljs-addition {
  color: #6a8759;
}

.hljs-title,
.hljs-section {
  color: var(--color-primary-base);
}

.hljs-keyword,
.hljs-selector-tag {
  color: #cc7832;
}

.hljs-emphasis {
  font-style: italic;
}

.hljs-strong {
  font-weight: bold;
}

.line-numbers {
  position: sticky;
  left: 0;
  flex-shrink: 0;
  padding-right: 0.5rem;
  width: 3.5rem;
  margin-right: 0.5rem;
  background-color: var(--bg-code);
  text-align: right;
  color: var(--text-color-muted);
  font-size: 1.5rem;
  line-height: 1.5;
  border-right: 1px solid var(--border-color-disabled);
  cursor: default;
  user-select: none;
  counter-reset: line-number 0;
  z-index: 1;
  font-family: "Maple Mono", monospace;
}

.line-number::before {
  content: counter(line-number);
  counter-increment: line-number;
}
```

大概的显示效果就是这样

![PixPin_2025-08-14_13-04-07.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/ae847f0b114b444d9c6951c444c17780.png)

![PixPin_2025-08-14_13-04-33.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/8c2b1623a1504fe9b84f8487f7ce2f57.png)

还有一点，为什么编辑的时候代码块最后不能换行（？
</description><content:encoded>看了下社区的仓库，但是由于我懒得跑后端服务，所以只能在这边发个贴了:tieba3:

可以尝试这段代码处理代码块的渲染

```typescript
const highlighted = hljs.highlight(token.content, {
  language: lang,
}).value;
const lineNumbers = highlighted
  .trim()
  .split("\n")
  .map(() =&gt; {
    return `&lt;div class="line-number"&gt;&lt;/div&gt;`;
});


```

然后加上样式（样式是我自己写的，可以自行修改，里面的变量懒得改了

```css
.hljs {
  display: flex;
  position: relative;
  background: var(--bg-code);
  color: var(--text-color-base);
  font-size: 1.5rem;
  line-height: 1.5;
  padding: 3rem 3rem 1.5rem 0rem;
  border-radius: var(--radius-card, 0.5rem);
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.06);
  overflow-x: auto;
  transition: var(--transition-base, 0.3s);
  margin-top: 20px;
}

.hljs code {
  display: block;
  cursor: text;
  position: relative;
  font-family: "Maple Mono", monospace;
}

.hljs-comment,
.hljs-quote {
  color: #d4d0ab;
}

.hljs-variable,
.hljs-template-variable,
.hljs-tag,
.hljs-name,
.hljs-selector-id,
.hljs-selector-class,
.hljs-regexp,
.hljs-deletion {
  color: #a9b7c6;
}

.hljs-number,
.hljs-built_in,
.hljs-literal,
.hljs-type,
.hljs-params,
.hljs-meta,
.hljs-link {
  color: #6897bb;
}


.hljs-attribute {
  color: #ffd700;
}

.hljs-string,
.hljs-symbol,
.hljs-bullet,
.hljs-addition {
  color: #6a8759;
}

.hljs-title,
.hljs-section {
  color: var(--color-primary-base);
}

.hljs-keyword,
.hljs-selector-tag {
  color: #cc7832;
}

.hljs-emphasis {
  font-style: italic;
}

.hljs-strong {
  font-weight: bold;
}

.line-numbers {
  position: sticky;
  left: 0;
  flex-shrink: 0;
  padding-right: 0.5rem;
  width: 3.5rem;
  margin-right: 0.5rem;
  background-color: var(--bg-code);
  text-align: right;
  color: var(--text-color-muted);
  font-size: 1.5rem;
  line-height: 1.5;
  border-right: 1px solid var(--border-color-disabled);
  cursor: default;
  user-select: none;
  counter-reset: line-number 0;
  z-index: 1;
  font-family: "Maple Mono", monospace;
}

.line-number::before {
  content: counter(line-number);
  counter-increment: line-number;
}
```

大概的显示效果就是这样

![PixPin_2025-08-14_13-04-07.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/ae847f0b114b444d9c6951c444c17780.png)

![PixPin_2025-08-14_13-04-33.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/8c2b1623a1504fe9b84f8487f7ce2f57.png)

还有一点，为什么编辑的时候代码块最后不能换行（？
</content:encoded><guid isPermaLink="false">199</guid></item><item><title>今天研究了一下V2EX如何通过api实现移动端访问，目前实现首页与帖子详情</title><link>https://www.open-isle.com/posts/200</link><description>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/3e51e2794a3244dc929dac8860a56eee.png)

做出来了个雏形，未完待续。。。。。
</description><content:encoded>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/3e51e2794a3244dc929dac8860a56eee.png)

做出来了个雏形，未完待续。。。。。
</content:encoded><guid isPermaLink="false">200</guid></item><item><title>社区未来是否会支持rss订阅？以下是跟ai咨询的结果</title><link>https://www.open-isle.com/posts/201</link><description>1. 通过 SSH 登录到服务器需要登录到 OpenIsle 网站所在的服务器终端。
2. **进入 Flarum 根目录** 使用 `cd` 命令进入 Flarum 项目的根目录（通常是包含 `composer.json` 文件的那个目录）。
3. **使用 Composer 安装扩展** 运行以下命令来安装 FoF Syndication 扩展：
   **Bash**

   ```
   composer require fof/syndication
   ```
   Composer 会自动下载并安装好这个扩展。
4. **清除缓存** 安装完成后，运行以下命令来清除 Flarum 的缓存，让新安装的扩展被系统识别：
   **Bash**

   ```
   php flarum cache:clear
   ```
5. **在后台启用扩展**

   * 登录 OpenIsle 社区的**后台管理面板** (Administration)。
   * 在左侧菜单找到“扩展” (Extensions)。
   * 在扩展列表中找到 **“FoF Syndication”** 这一项，点击它旁边的开关以启用。
</description><content:encoded>1. 通过 SSH 登录到服务器需要登录到 OpenIsle 网站所在的服务器终端。
2. **进入 Flarum 根目录** 使用 `cd` 命令进入 Flarum 项目的根目录（通常是包含 `composer.json` 文件的那个目录）。
3. **使用 Composer 安装扩展** 运行以下命令来安装 FoF Syndication 扩展：
   **Bash**

   ```
   composer require fof/syndication
   ```
   Composer 会自动下载并安装好这个扩展。
4. **清除缓存** 安装完成后，运行以下命令来清除 Flarum 的缓存，让新安装的扩展被系统识别：
   **Bash**

   ```
   php flarum cache:clear
   ```
5. **在后台启用扩展**

   * 登录 OpenIsle 社区的**后台管理面板** (Administration)。
   * 在左侧菜单找到“扩展” (Extensions)。
   * 在扩展列表中找到 **“FoF Syndication”** 这一项，点击它旁边的开关以启用。
</content:encoded><guid isPermaLink="false">201</guid></item><item><title>本站不应该提倡搬运资源</title><link>https://www.open-isle.com/posts/202</link><description>冷启动期间，社区的初始内容至关重要。

新用户来到这里，我们希望他不是被免费的资源吸引，世界上不缺学习资源，也不缺分享资源的地方。

如果想找资源，linuxdo、tg都是更合适的地方。

我个人希望这里是分享经验，交流技术的地方。

同时我们应该尽量减少灌水的行为，这相当于变相鼓励后加入社区的人，发布无用的信息。
</description><content:encoded>冷启动期间，社区的初始内容至关重要。

新用户来到这里，我们希望他不是被免费的资源吸引，世界上不缺学习资源，也不缺分享资源的地方。

如果想找资源，linuxdo、tg都是更合适的地方。

我个人希望这里是分享经验，交流技术的地方。

同时我们应该尽量减少灌水的行为，这相当于变相鼓励后加入社区的人，发布无用的信息。
</content:encoded><guid isPermaLink="false">202</guid></item><item><title>feature updated🎉: 主页浏览优化</title><link>https://www.open-isle.com/posts/203</link><description>近期有小伙伴反馈主页有点卡卡的，经排查是ssr水合相关问题；

现在大家可以频繁切换页面浏览，应该是非常丝滑的:tieba2: ；


另外隆重感谢这两天加入的几位贡献者 @[netcat] @[AnNingUI] @[白山] @[浮小云] 🎉🎉

-----

**接下来的todo**:

- 搞定预发环境，方便各位前端大佬调试 （目前 80%）
- 更新开发文档，上周末切为nuxt4之后，开发文档还没更新，需要快速更新下

**release 2.0 剩余比较大的修改**

- 积分机制
- 邀请码（可兑换积分）
- 积分商城（大量奶茶 :tieba25: ）

大家可以期待一下，也希望大家可以多多发帖哈
</description><content:encoded>近期有小伙伴反馈主页有点卡卡的，经排查是ssr水合相关问题；

现在大家可以频繁切换页面浏览，应该是非常丝滑的:tieba2: ；


另外隆重感谢这两天加入的几位贡献者 @[netcat] @[AnNingUI] @[白山] @[浮小云] 🎉🎉

-----

**接下来的todo**:

- 搞定预发环境，方便各位前端大佬调试 （目前 80%）
- 更新开发文档，上周末切为nuxt4之后，开发文档还没更新，需要快速更新下

**release 2.0 剩余比较大的修改**

- 积分机制
- 邀请码（可兑换积分）
- 积分商城（大量奶茶 :tieba25: ）

大家可以期待一下，也希望大家可以多多发帖哈
</content:encoded><guid isPermaLink="false">203</guid></item><item><title>Hyper-V双显卡独显"直通"教程</title><link>https://www.open-isle.com/posts/204</link><description>找遍网络，都是单卡直通，如果你按照他们的来只会用默认用集显进行连通

然后唯一一个有用的还是[hyperv虚拟机,笔记本双显卡指定独显直通教程](https://www.bilibili.com/video/BV1VF5vz3EJd)，但是简介中的

```
注:虚拟机显卡id查询命令
Get-VMGpuPartitionAdapter -VMName w2025
```

是错误的，这个命令指的是你的虚拟机当前的直连GPU，真正获取GPU ID的命令，我通过查询微软文档，查到了[一个获取主机机器的可分区 GPU的命令](https://learn.microsoft.com/en-us/powershell/module/hyper-v/get-vmhostpartitionablegpu?view=windowsserver2022-ps),

于是使用命令

```bash
Get-VMHostPartitionableGpu
```

后就可以拿到每个显卡的真实ID(Get-VMHostPartitionableGpu输出的Name)，一般第二项就是你的独显，那么就可以按照这个[单卡教程](https://www.freedidi.com/9857.html)，[该教程的视频](https://www.bilibili.com/video/BV1Fu41177Xj)，将这一条命令

```bash
Add-VMGpuPartitionAdapter -VMName $vm
```

改为

```bash
Add-VMGpuPartitionAdapter -VMName $vm -InstancePath 你要的独显的ID
```

其他过程完全可以不用变便可以解决。

---

放张最终成果![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/ffd93e80b06f453abfa4ca72cc596a78.png)
</description><content:encoded>找遍网络，都是单卡直通，如果你按照他们的来只会用默认用集显进行连通

然后唯一一个有用的还是[hyperv虚拟机,笔记本双显卡指定独显直通教程](https://www.bilibili.com/video/BV1VF5vz3EJd)，但是简介中的

```
注:虚拟机显卡id查询命令
Get-VMGpuPartitionAdapter -VMName w2025
```

是错误的，这个命令指的是你的虚拟机当前的直连GPU，真正获取GPU ID的命令，我通过查询微软文档，查到了[一个获取主机机器的可分区 GPU的命令](https://learn.microsoft.com/en-us/powershell/module/hyper-v/get-vmhostpartitionablegpu?view=windowsserver2022-ps),

于是使用命令

```bash
Get-VMHostPartitionableGpu
```

后就可以拿到每个显卡的真实ID(Get-VMHostPartitionableGpu输出的Name)，一般第二项就是你的独显，那么就可以按照这个[单卡教程](https://www.freedidi.com/9857.html)，[该教程的视频](https://www.bilibili.com/video/BV1Fu41177Xj)，将这一条命令

```bash
Add-VMGpuPartitionAdapter -VMName $vm
```

改为

```bash
Add-VMGpuPartitionAdapter -VMName $vm -InstancePath 你要的独显的ID
```

其他过程完全可以不用变便可以解决。

---

放张最终成果![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/ffd93e80b06f453abfa4ca72cc596a78.png)
</content:encoded><guid isPermaLink="false">204</guid></item><item><title>这是一个DEV测试贴</title><link>https://www.open-isle.com/posts/205</link><description>用于测试是否可以在每次点击我的信息都可以做到接收到最新信息
</description><content:encoded>用于测试是否可以在每次点击我的信息都可以做到接收到最新信息
</content:encoded><guid isPermaLink="false">205</guid></item><item><title>一个尖锐的问题：Openlsle 如何长期运营？</title><link>https://www.open-isle.com/posts/206</link><description>## 背景

在 V2EX 上刷到的推广帖，于是新人报到。初步体验下来，我看到网站确实存在不少问题，比如视觉风格不统一，用户头像下拉列表没有可点击的鼠标样式，甚至网站风格较复古，整体来讲非常带有 Vibe Coding 特色。所幸网站整站开源，我可以提交 PR 参与建设。

前段时间冲浪时发现了 [新篇章](https://xpz.co/) 这个网站，立即注册了账号，期待能浏览更多新鲜的内容，但不幸的是，最后一条帖子发布已经是 2 个月前了。

作为贡献者，肯定是希望项目越来越好，而作为站长，则更是不希望所有的努力付之东流。因此，如何才能让 Openlsle 保持长期运营呢？

## 成本投入

我看到建站送奶茶活动正在进行中，假设没有这些推广活动，据我所知要想让本网站在互联网上长期存在，每年需要支付域名、服务器、数据存储、网络带宽等费用。如果打了水漂，想必也会肉疼。

我搜了一下，找到这个帖子：[我花 1 个月做了一个技术社区！- V2EX](https://v2ex.com/t/1149393)。了解到站长 nagisa “会投入一点资金引进初期用户”，不知道站长对于资金的投入有多少预期，如果情况不乐观接下来会怎么做。

除了投入资金，还需要平衡工作与生活以及技术生活这三者的关系。我也和 nagisa 一样，打了几年工，每天下班后已经没有精力高强度捣鼓 Side Project（虽然这确实是我的问题，没有做好高效的时间和精力管理）。我不希望网站的运营过多占用 nagisa 的时间，进而导致热情燃尽（burnout）。

## Why not?

论坛那么多，我为什么不逛 xxx 呢？绝对言论自由、尊重与包容、协作与成长这些理念？亦或是发帖有正向激励？诚然，这些都可以成为理由，但并不能让网站具备显著的特色。这个问题不好回答，可以考虑探索一些核心玩法，挖掘一些独特之处，让大家能有四处求邀请码的动力。

## 一些建议

针对上述的一些思考，我有一些可以快速实施的建议。

- 描述一下网站的建设背景、运营方式等，让大家更好地了解 Openlsle。比如我此前对网站的资金抱有疑虑，尤其是建站送奶茶活动，最终我在 V2EX 找到了答案，当然结果也不出我所料。破案了，[站内也有帖子](https://www.open-isle.com/posts/41)，确实眼睛花了。
- 承接上一条，可以描述一些施工花絮（换个说话，叫做网站日志）。比如建设过程中遇到的问题和解决方案，以及 Openlsle 这个名字是怎么来的 ~~（感觉有点难拼写，逃）~~。
- 有节制地做一些推广，比如各个平台、博客、周刊。当然这条可能已经在计划内了。

还有一些体验问题，后续可能会以 issue 或者 PR 的方式来提议。

## 一些不成熟的想法

- 可以考虑接入 Fediverse（联邦宇宙）。虽然能不能接和怎么接我也不知道，也许可以实现同步发布，或者将别的平台的内容发布到 Openlsle（类似 xSync）。前段时间我才了解到的这个概念，以下是一些资料，仅供参考：
  - [Lemmy - 联邦宇宙的链接聚合地](https://join-lemmy.org/)
  - [谈谈 Mastodon、Fediverse 和 ActivityPub - zu1k](https://zu1k.com/posts/tutorials/p2p/fediverse/)
  - [写给 Twitter 用户的 Fediverse 指南 | wzyboy’s blog](https://wzyboy.im/post/1513.html)
- 提供 RSS 以及邮件列表订阅，推送每天或每周的精华帖。其实我也是通过 V2EX 分享创造日报了解到的 Openlsle。
- ~~还有一些在搬砖的时候想到的，但是现在忘了……~~


以上，我的一些可能露骨的想法，希望不会给大家带来坏心情。:tieba34:
</description><content:encoded>## 背景

在 V2EX 上刷到的推广帖，于是新人报到。初步体验下来，我看到网站确实存在不少问题，比如视觉风格不统一，用户头像下拉列表没有可点击的鼠标样式，甚至网站风格较复古，整体来讲非常带有 Vibe Coding 特色。所幸网站整站开源，我可以提交 PR 参与建设。

前段时间冲浪时发现了 [新篇章](https://xpz.co/) 这个网站，立即注册了账号，期待能浏览更多新鲜的内容，但不幸的是，最后一条帖子发布已经是 2 个月前了。

作为贡献者，肯定是希望项目越来越好，而作为站长，则更是不希望所有的努力付之东流。因此，如何才能让 Openlsle 保持长期运营呢？

## 成本投入

我看到建站送奶茶活动正在进行中，假设没有这些推广活动，据我所知要想让本网站在互联网上长期存在，每年需要支付域名、服务器、数据存储、网络带宽等费用。如果打了水漂，想必也会肉疼。

我搜了一下，找到这个帖子：[我花 1 个月做了一个技术社区！- V2EX](https://v2ex.com/t/1149393)。了解到站长 nagisa “会投入一点资金引进初期用户”，不知道站长对于资金的投入有多少预期，如果情况不乐观接下来会怎么做。

除了投入资金，还需要平衡工作与生活以及技术生活这三者的关系。我也和 nagisa 一样，打了几年工，每天下班后已经没有精力高强度捣鼓 Side Project（虽然这确实是我的问题，没有做好高效的时间和精力管理）。我不希望网站的运营过多占用 nagisa 的时间，进而导致热情燃尽（burnout）。

## Why not?

论坛那么多，我为什么不逛 xxx 呢？绝对言论自由、尊重与包容、协作与成长这些理念？亦或是发帖有正向激励？诚然，这些都可以成为理由，但并不能让网站具备显著的特色。这个问题不好回答，可以考虑探索一些核心玩法，挖掘一些独特之处，让大家能有四处求邀请码的动力。

## 一些建议

针对上述的一些思考，我有一些可以快速实施的建议。

- 描述一下网站的建设背景、运营方式等，让大家更好地了解 Openlsle。比如我此前对网站的资金抱有疑虑，尤其是建站送奶茶活动，最终我在 V2EX 找到了答案，当然结果也不出我所料。破案了，[站内也有帖子](https://www.open-isle.com/posts/41)，确实眼睛花了。
- 承接上一条，可以描述一些施工花絮（换个说话，叫做网站日志）。比如建设过程中遇到的问题和解决方案，以及 Openlsle 这个名字是怎么来的 ~~（感觉有点难拼写，逃）~~。
- 有节制地做一些推广，比如各个平台、博客、周刊。当然这条可能已经在计划内了。

还有一些体验问题，后续可能会以 issue 或者 PR 的方式来提议。

## 一些不成熟的想法

- 可以考虑接入 Fediverse（联邦宇宙）。虽然能不能接和怎么接我也不知道，也许可以实现同步发布，或者将别的平台的内容发布到 Openlsle（类似 xSync）。前段时间我才了解到的这个概念，以下是一些资料，仅供参考：
  - [Lemmy - 联邦宇宙的链接聚合地](https://join-lemmy.org/)
  - [谈谈 Mastodon、Fediverse 和 ActivityPub - zu1k](https://zu1k.com/posts/tutorials/p2p/fediverse/)
  - [写给 Twitter 用户的 Fediverse 指南 | wzyboy’s blog](https://wzyboy.im/post/1513.html)
- 提供 RSS 以及邮件列表订阅，推送每天或每周的精华帖。其实我也是通过 V2EX 分享创造日报了解到的 Openlsle。
- ~~还有一些在搬砖的时候想到的，但是现在忘了……~~


以上，我的一些可能露骨的想法，希望不会给大家带来坏心情。:tieba34:
</content:encoded><guid isPermaLink="false">206</guid></item><item><title>今日抽奖🎟️：还是瑞幸咖啡新品</title><link>https://www.open-isle.com/posts/207</link><description>:tieba24: 大家开心参与哈
</description><content:encoded>:tieba24: 大家开心参与哈
</content:encoded><guid isPermaLink="false">207</guid></item><item><title>分享一个k8s学习教程</title><link>https://www.open-isle.com/posts/208</link><description>分享一个k8s学习教程，需要的吧友自取
我用夸克网盘分享了「K8S全栈架构师 K8s初级篇+中级篇+高级篇+架构篇_f」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：https://pan.quark.cn/s/12ccc2533eff
</description><content:encoded>分享一个k8s学习教程，需要的吧友自取
我用夸克网盘分享了「K8S全栈架构师 K8s初级篇+中级篇+高级篇+架构篇_f」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：https://pan.quark.cn/s/12ccc2533eff
</content:encoded><guid isPermaLink="false">208</guid></item><item><title>找不同😊</title><link>https://www.open-isle.com/posts/209</link><description>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/1a4dadb6c7094db4a9cdd4cebb769a75.png)
</description><content:encoded>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/1a4dadb6c7094db4a9cdd4cebb769a75.png)
</content:encoded><guid isPermaLink="false">209</guid></item><item><title>（不）推荐一个 Python 库 vibesort</title><link>https://www.open-isle.com/posts/211</link><description>[abyesilyurt/vibesort](https://github.com/abyesilyurt/vibesort)

看到有个 PR 添加 benchmark，[https://github.com/abyesilyurt/vibesort/pull/15](https://github.com/abyesilyurt/vibesort/pull/15)

![Clipboard_Screenshot_1755240117.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/0644ed6353a44251b65bc9823cdd2c15.png)

这个结论绷不住了 :tieba2:
</description><content:encoded>[abyesilyurt/vibesort](https://github.com/abyesilyurt/vibesort)

看到有个 PR 添加 benchmark，[https://github.com/abyesilyurt/vibesort/pull/15](https://github.com/abyesilyurt/vibesort/pull/15)

![Clipboard_Screenshot_1755240117.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/0644ed6353a44251b65bc9823cdd2c15.png)

这个结论绷不住了 :tieba2:
</content:encoded><guid isPermaLink="false">211</guid></item><item><title>还是原生开发得劲，初版移动端app完成，功能全部正常，后续增加分类功能</title><link>https://www.open-isle.com/posts/212</link><description>[-7329985632548382086.mp4](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/78179b28039748c396fc45c63aa2bd70.mp4)
</description><content:encoded>[-7329985632548382086.mp4](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/78179b28039748c396fc45c63aa2bd70.mp4)
</content:encoded><guid isPermaLink="false">212</guid></item><item><title>周末了，来打游戏</title><link>https://www.open-isle.com/posts/213</link><description># 全网最全的安卓游戏大合集（已分类）

我用夸克网盘分享了「安卓游戏大合集（已分好类）」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：[https://pan.quark.cn/s/f5691803c9d4](https://pan.quark.cn/s/f5691803c9d4)

```plaintext
安卓游戏大合集（已分好类）/
│   ├── 《漫画男孩》安卓最佳动作平台游戏.apk (83.61 MB)
│   ├── 【手机游戏】几何冲刺、马奇的冒险、神椿市协奏中、灾厄逆刃、再来一张/
│   │   ├── 再来一张_v1.0 完整解锁版/
│   │   │   └── 再来一张_v1.0 完整解锁版.apk (453.28 MB)
│   │   ├── 几何冲刺geometry-dash-v2.2.142-内置mod菜单版.apk (151.22 MB)
│   │   ├── 几何冲刺精简版MOD菜单_96482.apk (146.38 MB)
│   │   ├── 灾厄逆刃/
│   │   │   └── 灾厄逆刃MOD菜单_v1.61 MOD菜单：1、上帝模式（无敌）.apk (149.14 MB)
│   │   ├── 神椿市协奏中。/
│   │   │   └── 神椿市协奏中_v1.0.3 本游戏可以体验完整内容！卡住请断网进入.apk (1648.94 MB)
│   │   ├── 音乐搜索 如果歌词适配失效，那就用 音乐搜索，这个支持无损音质！.apk (5.64 MB)
│   │   └── 马奇的冒险_v1.0 付费内容任意游玩.apk (1124.09 MB)
│   ├── 〔手机游戏〕YUZU模拟器（以撒的结合：忏悔懒人打包版）/
│   │   ├── Game/
│   │   │   └── 以撒的结合：忏悔/
│   │   │   │   └── The Binding of Isaac Repentance[010021C000222000][C1.1&amp;M1.4.2][fengshui0212&amp;cuikai01].xci (1288.15 MB)
│   │   ├── key/
│   │   │   └── prod.keys (0.01 MB)
│   │   ├── yuzu-20240217-main251.apk (37.22 MB)
│   │   ├── Yuzu模拟器 手机版 游戏教程演示.doc (0.80 MB)
│   │   ├── 固件/
│   │   │   └── registered.zip (323.64 MB)
│   │   └── 驱动/
│   │   │   ├── adreno744.12.adpkg(8gen3).zip (12.62 MB)
│   │   │   └── Mesa.Turnip.driver.v24.0.0.-.Revision.15.zip (1.80 MB)
│   ├── 〔手机游戏〕YUZU模拟器（以撒的结合：胎衣懒人打包版）/
│   │   ├── Game/
│   │   │   └── 以撒的结合：胎衣/
│   │   │   │   └── 以撒的结合：胎衣+.nsp (1577.18 MB)
│   │   ├── key/
│   │   │   └── prod.keys (0.01 MB)
│   │   ├── yuzu-20240217-main251.apk (37.22 MB)
│   │   ├── Yuzu保姆教程-通用.doc (0.94 MB)
│   │   ├── 固件/
│   │   │   ├── AMS-17.0.1.zip (323.59 MB)
│   │   │   └── registered.zip (323.64 MB)
│   │   ├── 道具增量mod/
│   │   │   └── 010021C000B6A000/
│   │   │   │   └── romfs/
│   │   │   │   │   └── rp_patch/
│   │   │   │   │   │   └── resources/
│   │   │   │   │   │   │   ├── itempools.xml (0.16 MB)
│   │   │   │   │   │   │   └── rooms/
│   │   │   │   │   │   │   │   ├── 00.special rooms.stb (0.35 MB)
│   │   │   │   │   │   │   │   ├── 10.womb.stb (0.60 MB)
│   │   │   │   │   │   │   │   ├── 11.utero.stb (0.66 MB)
│   │   │   │   │   │   │   │   ├── 12.scarred womb.stb (0.66 MB)
│   │   │   │   │   │   │   │   ├── 13.blue womb.stb (0.01 MB)
│   │   │   │   │   │   │   │   ├── 14.sheol.stb (0.25 MB)
│   │   │   │   │   │   │   │   ├── 15.cathedral.stb (0.23 MB)
│   │   │   │   │   │   │   │   ├── 27.downpour.stb (0.32 MB)
│   │   │   │   │   │   │   │   ├── 28.dross.stb (0.40 MB)
│   │   │   │   │   │   │   │   ├── 29.mines.stb (0.65 MB)
│   │   │   │   │   │   │   │   ├── 30.ashpit.stb (0.43 MB)
│   │   │   │   │   │   │   │   ├── 31.mausoleum.stb (0.32 MB)
│   │   │   │   │   │   │   │   ├── 32.gehenna.stb (0.36 MB)
│   │   │   │   │   │   │   │   ├── 33.corpse.stb (0.22 MB)
│   │   │   │   │   │   │   │   └── greed/
│   │   │   │   │   │   │   │   │   └── 00.special rooms.stb (0.05 MB)
│   │   └── 驱动/
│   │   │   ├── adreno757.adpkg.zip (10.58 MB)
│   │   │   ├── turnip-24.1.0.adpkg_R17-v2.zip (1.82 MB)
│   │   │   ├── 萝卜开源驱动(yuzu模拟器优先使用这个)/
│   │   │   │   ├── 修复消逝的光芒等游戏的驱动(865到888专用)/
│   │   │   │   │   └── Turnip22.0.99(865到888专用驱动).zip (1.78 MB)
│   │   │   │   ├── 萝卜开源驱动_R11.zip (1.77 MB)
│   │   │   │   ├── 萝卜开源驱动r4-最新开源闪退的话再用这个.zip (1.95 MB)
│   │   │   │   ├── 萝卜开源驱动R8.zip (1.73 MB)
│   │   │   │   ├── 萝卜开源驱动R9.zip (1.76 MB)
│   │   │   │   ├── 萝卜开源驱动r12/
│   │   │   │   │   ├── 萝卜开源驱动r12v1.zip (1.78 MB)
│   │   │   │   │   ├── 萝卜开源驱动r12v2.zip (1.77 MB)
│   │   │   │   │   └── 萝卜开源驱动r12v3.zip (1.77 MB)
│   │   │   │   ├── 萝卜开源驱动R13.zip (1.78 MB)
│   │   │   │   ├── 萝卜开源驱动r14.zip (1.78 MB)
│   │   │   │   ├── 萝卜开源驱动r15.zip (1.80 MB)
│   │   │   │   ├── 萝卜开源驱动r16/
│   │   │   │   │   ├── 萝卜开源驱动r16v3测试版.zip (1.80 MB)
│   │   │   │   │   └── 萝卜开源驱动R16正式版.zip (1.80 MB)
│   │   │   │   ├── 萝卜开源驱动r17/
│   │   │   │   │   ├── 萝卜开源r17驱动正式版.zip (1.81 MB)
│   │   │   │   │   ├── 萝卜开源驱动R17-v2正式版支持8g3.zip (1.82 MB)
│   │   │   │   │   └── 萝卜开源驱动r17测试版.zip (1.81 MB)
│   │   │   │   ├── 萝卜开源驱动R-X(10)(用稳定20版高通8g1以上需要用这个).zip (1.76 MB)
│   │   │   │   └── 萝卜开源驱动R(旧驱动865到888使用).zip (1.84 MB)
│   │   │   └── 高通gpu官方驱动/
│   │   │   │   ├── 530-patched-adpkg(865到888使用)(1).zip (9.66 MB)
│   │   │   │   ├── adreno615.77.adpkg(8g1 及以下使用).zip (9.49 MB)
│   │   │   │   ├── adreno676.3.adpkg(8gen1到8gen2使用)(1).zip (11.33 MB)
│   │   │   │   ├── adreno676.22.adpkg(8gen1到8gen2使用)(1).zip (10.99 MB)
│   │   │   │   ├── adreno676.42.adpkg(高通8g1以上使用).zip (11.01 MB)
│   │   │   │   ├── adreno676.47.adpkg(8g1及以上使用).zip (11.03 MB)
│   │   │   │   ├── v615.50-adpkg(865到8+gen1可使用)(1).zip (9.74 MB)
│   │   │   │   └── 高通驱动744.12(骁龙8g3提取8g2以下谨慎使用).zip (12.62 MB)
│   ├── 〔手机游戏〕以撒的结合（端游移植版）/
│   │   ├── 以撒的结合（端游移植版）.apk (69.61 MB)
│   │   ├── 小部分系统会玩不了，那就用虚拟机/
│   │   ├── 屏幕实时翻译_2.4.0 高级版.apk (41.13 MB)
│   │   └── 游戏没有中文，但不影响正常玩！也可以配合实时翻译app玩/
│   ├── 〔手机游戏〕重生细胞 v3.3.6 全武器全属性 完整版/
│   │   ├── 下载后，可以选择第三方应用解压缩即可！/
│   │   └── 重生细胞 v3.3.6 全武器全属性 完整版.rar (2670.17 MB)
│   ├── 〔游戏〕YUZU模拟器（哈迪斯懒人打包版）/
│   │   ├── Game/
│   │   │   └── 哈迪斯/
│   │   │   │   ├── Hades [0100535012974000] [v1.0.38233] (1G+1U) (MOD9.2.0).xci (5894.79 MB)
│   │   │   │   └── 金手指/
│   │   │   │   │   └── 0100535012974000/
│   │   │   │   │   │   └── cheats/
│   │   │   │   │   │   │   └── D41357A3DA356B09.txt (0.00 MB)
│   │   ├── key/
│   │   │   └── prod.keys (0.01 MB)
│   │   ├── yuzu-20240217-main251.apk (37.22 MB)
│   │   ├── Yuzu模拟器 手机版 游戏教程演示.doc (0.80 MB)
│   │   ├── 固件/
│   │   │   └── registered.zip (323.64 MB)
│   │   └── 驱动/
│   │   │   ├── adreno744.12.adpkg(8gen3).zip (12.62 MB)
│   │   │   └── Mesa.Turnip.driver.v24.0.0.-.Revision.15.zip (1.80 MB)
│   ├── 三国类/
│   │   ├── 三国志英杰传，断网进游戏，选择读取存档获得大量金币.apk (156.80 MB)
│   │   ├── 三国群英传1.apk (50.12 MB)
│   │   ├── 三国群英传7等多个文件/
│   │   │   ├── 三国群英传7/
│   │   │   │   ├── 三国群英传7视频教程.mp4 (6.64 MB)
│   │   │   │   └── 解压工具.apk (3.30 MB)
│   │   │   └── 三国群英传123456/
│   │   │   │   ├── 三国群英传7视频教程.mp4 (6.64 MB)
│   │   │   │   └── 解压工具.apk (3.30 MB)
│   │   ├── 三国群英传之神话再临.apk (651.80 MB)
│   │   └── 狂斩三国3内购版.apk (31.51 MB)
│   ├── 世界盒子（内置修改器）.apk (260.66 MB)
│   ├── 乐动达人，飞行模式购买.apk (81.37 MB)
│   ├── 亚拉菲尔（汉化版+完整版Steam移植）.apk (575.80 MB)
│   ├── 众生，无条件试用金币.apk (72.16 MB)
│   ├── 动作仙侠修仙/
│   │   ├── 侠客风云传，出售物品获得大量金币.apk (1016.62 MB)
│   │   ├── 僵尸生存内购版.apk (40.13 MB)
│   │   ├── 天上天下，断网进游戏点继续游戏，若没有继续游戏退了从进.apk (341.16 MB)
│   │   ├── 摘仙传，买东西不减元宝.apk (69.03 MB)
│   │   ├── 江湖中的我，无限元宝版.apk (66.27 MB)
│   │   ├── 江湖医馆无限货币.apk (84.07 MB)
│   │   ├── 江湖风云录，点橙光出金手指.apk (190.67 MB)
│   │   ├── 火柴人联盟2017(技能无CD)482.apk (99.60 MB)
│   │   ├── 烛火地牢，购买东西后无限金币.apk (77.18 MB)
│   │   ├── 疯狂动物园，内购充值版.apk (236.45 MB)
│   │   ├── 荒野大镖客无限金币.apk (9.35 MB)
│   │   ├── 阻击者-第二次进入无限金币.apk (105.65 MB)
│   │   └── 风云2-神魔至尊传内购版.apk (1.92 MB)
│   ├── 坦克装甲纷争-解锁所有坦克.apk (592.70 MB)
│   ├── 塔防类/
│   │   └── 塔防王国，无限金币.apk (88.50 MB)
│   ├── 奥术谷（完整版移植版，去除广告）.apk (443.40 MB)
│   ├── 小小炼狱（无限币无限邮票）.apk (256.01 MB)
│   ├── 战争类/
│   │   └── 禁地之战，内购版.apk (99.39 MB)
│   ├── 捕鱼类/
│   │   └── 街机达人捕鱼，购买直接成功.apk (58.74 MB)
│   ├── 放置怪兽（用货币买食物不减反增）.apk (61.69 MB)
│   ├── 暗影猎手内置修改器.apk (147.12 MB)
│   ├── 末日53天（内置菜单）.apk (489.96 MB)
│   ├── 梦幻家园/
│   │   ├── 小镇农场内购版，断网进游戏.apk (42.21 MB)
│   │   ├── 小镇大厨，大量钻石.apk (203.66 MB)
│   │   └── 梦幻家园/
│   │   │   └── 断网进游戏-进入后可开网.apk (96.97 MB)
│   ├── 梦幻餐厅无语破解版.apk (78.30 MB)
│   ├── 模拟城市：重建王国（解锁全部，解锁进程，完整版）.apk (748.75 MB)
│   ├── 模拟城市：重建王国（解锁全部，解锁进程，完整版）(1).apk (748.75 MB)
│   ├── 模拟类/
│   │   ├── 卡车模拟器，欧洲，部分机型无法内购.apk (53.73 MB)
│   │   └── 飞行模拟2018，完成教程可获得大量金币.apk (275.03 MB)
│   ├── 永远的超级食肉男孩（完整版，去除广告去除谷歌）.apk (834.63 MB)
│   ├── 永远的超级食肉男孩（完整版，去除广告去除谷歌）(1).apk (834.63 MB)
│   ├── 沙盒，战略与战术，完整版.apk (74.85 MB)
│   ├── 火车模拟无限金币.apk (56.97 MB)
│   ├── 生存类/
│   │   ├── 最后的幸存者日记，无限资源.apk (101.92 MB)
│   │   ├── 夺命侏罗纪，无限金币，下载慢加载慢，测试可以玩.apk (53.86 MB)
│   │   ├── 安之若命.apk (95.25 MB)
│   │   ├── 恐怖学校白色情人节安卓10可以.apk (1609.45 MB)
│   │   ├── 王国保卫战复仇.apk (542.49 MB)
│   │   └── 生化公司无限金币.apk (63.48 MB)
│   ├── 百战天虫行动版（完整版，去谷歌去广告）.apk (885.83 MB)
│   ├── 百战天虫行动版（完整版，去谷歌去广告）(1).apk (885.83 MB)
│   ├── 破门而入（作弊菜单）.apk (420.92 MB)
│   ├── 破门而入（作弊菜单）(1).apk (420.92 MB)
│   ├── 维京诸神（无限货币）.apk (499.81 MB)
│   ├── 艾塔传说（大量经验，游戏加快）.apk (328.90 MB)
│   ├── 诺亚之瓶，大量金币.apk (83.10 MB)
│   ├── 这是警察2.apk (504.93 MB)
│   ├── 金庸群侠传无限元宝.apk (198.07 MB)
│   ├── 钢铁战队/
│   │   └── 钢铁战队/
│   │   │   └── 钢铁战队1.1.0.apk (413.56 MB)
│   └── 需用模拟器打开类游戏/
│   │   └── 曹操传内购版.apk (106.19 MB)
```
</description><content:encoded># 全网最全的安卓游戏大合集（已分类）

我用夸克网盘分享了「安卓游戏大合集（已分好类）」，点击链接即可保存。打开「夸克APP」，无需下载在线播放视频，畅享原画5倍速，支持电视投屏。
链接：[https://pan.quark.cn/s/f5691803c9d4](https://pan.quark.cn/s/f5691803c9d4)

```plaintext
安卓游戏大合集（已分好类）/
│   ├── 《漫画男孩》安卓最佳动作平台游戏.apk (83.61 MB)
│   ├── 【手机游戏】几何冲刺、马奇的冒险、神椿市协奏中、灾厄逆刃、再来一张/
│   │   ├── 再来一张_v1.0 完整解锁版/
│   │   │   └── 再来一张_v1.0 完整解锁版.apk (453.28 MB)
│   │   ├── 几何冲刺geometry-dash-v2.2.142-内置mod菜单版.apk (151.22 MB)
│   │   ├── 几何冲刺精简版MOD菜单_96482.apk (146.38 MB)
│   │   ├── 灾厄逆刃/
│   │   │   └── 灾厄逆刃MOD菜单_v1.61 MOD菜单：1、上帝模式（无敌）.apk (149.14 MB)
│   │   ├── 神椿市协奏中。/
│   │   │   └── 神椿市协奏中_v1.0.3 本游戏可以体验完整内容！卡住请断网进入.apk (1648.94 MB)
│   │   ├── 音乐搜索 如果歌词适配失效，那就用 音乐搜索，这个支持无损音质！.apk (5.64 MB)
│   │   └── 马奇的冒险_v1.0 付费内容任意游玩.apk (1124.09 MB)
│   ├── 〔手机游戏〕YUZU模拟器（以撒的结合：忏悔懒人打包版）/
│   │   ├── Game/
│   │   │   └── 以撒的结合：忏悔/
│   │   │   │   └── The Binding of Isaac Repentance[010021C000222000][C1.1&amp;M1.4.2][fengshui0212&amp;cuikai01].xci (1288.15 MB)
│   │   ├── key/
│   │   │   └── prod.keys (0.01 MB)
│   │   ├── yuzu-20240217-main251.apk (37.22 MB)
│   │   ├── Yuzu模拟器 手机版 游戏教程演示.doc (0.80 MB)
│   │   ├── 固件/
│   │   │   └── registered.zip (323.64 MB)
│   │   └── 驱动/
│   │   │   ├── adreno744.12.adpkg(8gen3).zip (12.62 MB)
│   │   │   └── Mesa.Turnip.driver.v24.0.0.-.Revision.15.zip (1.80 MB)
│   ├── 〔手机游戏〕YUZU模拟器（以撒的结合：胎衣懒人打包版）/
│   │   ├── Game/
│   │   │   └── 以撒的结合：胎衣/
│   │   │   │   └── 以撒的结合：胎衣+.nsp (1577.18 MB)
│   │   ├── key/
│   │   │   └── prod.keys (0.01 MB)
│   │   ├── yuzu-20240217-main251.apk (37.22 MB)
│   │   ├── Yuzu保姆教程-通用.doc (0.94 MB)
│   │   ├── 固件/
│   │   │   ├── AMS-17.0.1.zip (323.59 MB)
│   │   │   └── registered.zip (323.64 MB)
│   │   ├── 道具增量mod/
│   │   │   └── 010021C000B6A000/
│   │   │   │   └── romfs/
│   │   │   │   │   └── rp_patch/
│   │   │   │   │   │   └── resources/
│   │   │   │   │   │   │   ├── itempools.xml (0.16 MB)
│   │   │   │   │   │   │   └── rooms/
│   │   │   │   │   │   │   │   ├── 00.special rooms.stb (0.35 MB)
│   │   │   │   │   │   │   │   ├── 10.womb.stb (0.60 MB)
│   │   │   │   │   │   │   │   ├── 11.utero.stb (0.66 MB)
│   │   │   │   │   │   │   │   ├── 12.scarred womb.stb (0.66 MB)
│   │   │   │   │   │   │   │   ├── 13.blue womb.stb (0.01 MB)
│   │   │   │   │   │   │   │   ├── 14.sheol.stb (0.25 MB)
│   │   │   │   │   │   │   │   ├── 15.cathedral.stb (0.23 MB)
│   │   │   │   │   │   │   │   ├── 27.downpour.stb (0.32 MB)
│   │   │   │   │   │   │   │   ├── 28.dross.stb (0.40 MB)
│   │   │   │   │   │   │   │   ├── 29.mines.stb (0.65 MB)
│   │   │   │   │   │   │   │   ├── 30.ashpit.stb (0.43 MB)
│   │   │   │   │   │   │   │   ├── 31.mausoleum.stb (0.32 MB)
│   │   │   │   │   │   │   │   ├── 32.gehenna.stb (0.36 MB)
│   │   │   │   │   │   │   │   ├── 33.corpse.stb (0.22 MB)
│   │   │   │   │   │   │   │   └── greed/
│   │   │   │   │   │   │   │   │   └── 00.special rooms.stb (0.05 MB)
│   │   └── 驱动/
│   │   │   ├── adreno757.adpkg.zip (10.58 MB)
│   │   │   ├── turnip-24.1.0.adpkg_R17-v2.zip (1.82 MB)
│   │   │   ├── 萝卜开源驱动(yuzu模拟器优先使用这个)/
│   │   │   │   ├── 修复消逝的光芒等游戏的驱动(865到888专用)/
│   │   │   │   │   └── Turnip22.0.99(865到888专用驱动).zip (1.78 MB)
│   │   │   │   ├── 萝卜开源驱动_R11.zip (1.77 MB)
│   │   │   │   ├── 萝卜开源驱动r4-最新开源闪退的话再用这个.zip (1.95 MB)
│   │   │   │   ├── 萝卜开源驱动R8.zip (1.73 MB)
│   │   │   │   ├── 萝卜开源驱动R9.zip (1.76 MB)
│   │   │   │   ├── 萝卜开源驱动r12/
│   │   │   │   │   ├── 萝卜开源驱动r12v1.zip (1.78 MB)
│   │   │   │   │   ├── 萝卜开源驱动r12v2.zip (1.77 MB)
│   │   │   │   │   └── 萝卜开源驱动r12v3.zip (1.77 MB)
│   │   │   │   ├── 萝卜开源驱动R13.zip (1.78 MB)
│   │   │   │   ├── 萝卜开源驱动r14.zip (1.78 MB)
│   │   │   │   ├── 萝卜开源驱动r15.zip (1.80 MB)
│   │   │   │   ├── 萝卜开源驱动r16/
│   │   │   │   │   ├── 萝卜开源驱动r16v3测试版.zip (1.80 MB)
│   │   │   │   │   └── 萝卜开源驱动R16正式版.zip (1.80 MB)
│   │   │   │   ├── 萝卜开源驱动r17/
│   │   │   │   │   ├── 萝卜开源r17驱动正式版.zip (1.81 MB)
│   │   │   │   │   ├── 萝卜开源驱动R17-v2正式版支持8g3.zip (1.82 MB)
│   │   │   │   │   └── 萝卜开源驱动r17测试版.zip (1.81 MB)
│   │   │   │   ├── 萝卜开源驱动R-X(10)(用稳定20版高通8g1以上需要用这个).zip (1.76 MB)
│   │   │   │   └── 萝卜开源驱动R(旧驱动865到888使用).zip (1.84 MB)
│   │   │   └── 高通gpu官方驱动/
│   │   │   │   ├── 530-patched-adpkg(865到888使用)(1).zip (9.66 MB)
│   │   │   │   ├── adreno615.77.adpkg(8g1 及以下使用).zip (9.49 MB)
│   │   │   │   ├── adreno676.3.adpkg(8gen1到8gen2使用)(1).zip (11.33 MB)
│   │   │   │   ├── adreno676.22.adpkg(8gen1到8gen2使用)(1).zip (10.99 MB)
│   │   │   │   ├── adreno676.42.adpkg(高通8g1以上使用).zip (11.01 MB)
│   │   │   │   ├── adreno676.47.adpkg(8g1及以上使用).zip (11.03 MB)
│   │   │   │   ├── v615.50-adpkg(865到8+gen1可使用)(1).zip (9.74 MB)
│   │   │   │   └── 高通驱动744.12(骁龙8g3提取8g2以下谨慎使用).zip (12.62 MB)
│   ├── 〔手机游戏〕以撒的结合（端游移植版）/
│   │   ├── 以撒的结合（端游移植版）.apk (69.61 MB)
│   │   ├── 小部分系统会玩不了，那就用虚拟机/
│   │   ├── 屏幕实时翻译_2.4.0 高级版.apk (41.13 MB)
│   │   └── 游戏没有中文，但不影响正常玩！也可以配合实时翻译app玩/
│   ├── 〔手机游戏〕重生细胞 v3.3.6 全武器全属性 完整版/
│   │   ├── 下载后，可以选择第三方应用解压缩即可！/
│   │   └── 重生细胞 v3.3.6 全武器全属性 完整版.rar (2670.17 MB)
│   ├── 〔游戏〕YUZU模拟器（哈迪斯懒人打包版）/
│   │   ├── Game/
│   │   │   └── 哈迪斯/
│   │   │   │   ├── Hades [0100535012974000] [v1.0.38233] (1G+1U) (MOD9.2.0).xci (5894.79 MB)
│   │   │   │   └── 金手指/
│   │   │   │   │   └── 0100535012974000/
│   │   │   │   │   │   └── cheats/
│   │   │   │   │   │   │   └── D41357A3DA356B09.txt (0.00 MB)
│   │   ├── key/
│   │   │   └── prod.keys (0.01 MB)
│   │   ├── yuzu-20240217-main251.apk (37.22 MB)
│   │   ├── Yuzu模拟器 手机版 游戏教程演示.doc (0.80 MB)
│   │   ├── 固件/
│   │   │   └── registered.zip (323.64 MB)
│   │   └── 驱动/
│   │   │   ├── adreno744.12.adpkg(8gen3).zip (12.62 MB)
│   │   │   └── Mesa.Turnip.driver.v24.0.0.-.Revision.15.zip (1.80 MB)
│   ├── 三国类/
│   │   ├── 三国志英杰传，断网进游戏，选择读取存档获得大量金币.apk (156.80 MB)
│   │   ├── 三国群英传1.apk (50.12 MB)
│   │   ├── 三国群英传7等多个文件/
│   │   │   ├── 三国群英传7/
│   │   │   │   ├── 三国群英传7视频教程.mp4 (6.64 MB)
│   │   │   │   └── 解压工具.apk (3.30 MB)
│   │   │   └── 三国群英传123456/
│   │   │   │   ├── 三国群英传7视频教程.mp4 (6.64 MB)
│   │   │   │   └── 解压工具.apk (3.30 MB)
│   │   ├── 三国群英传之神话再临.apk (651.80 MB)
│   │   └── 狂斩三国3内购版.apk (31.51 MB)
│   ├── 世界盒子（内置修改器）.apk (260.66 MB)
│   ├── 乐动达人，飞行模式购买.apk (81.37 MB)
│   ├── 亚拉菲尔（汉化版+完整版Steam移植）.apk (575.80 MB)
│   ├── 众生，无条件试用金币.apk (72.16 MB)
│   ├── 动作仙侠修仙/
│   │   ├── 侠客风云传，出售物品获得大量金币.apk (1016.62 MB)
│   │   ├── 僵尸生存内购版.apk (40.13 MB)
│   │   ├── 天上天下，断网进游戏点继续游戏，若没有继续游戏退了从进.apk (341.16 MB)
│   │   ├── 摘仙传，买东西不减元宝.apk (69.03 MB)
│   │   ├── 江湖中的我，无限元宝版.apk (66.27 MB)
│   │   ├── 江湖医馆无限货币.apk (84.07 MB)
│   │   ├── 江湖风云录，点橙光出金手指.apk (190.67 MB)
│   │   ├── 火柴人联盟2017(技能无CD)482.apk (99.60 MB)
│   │   ├── 烛火地牢，购买东西后无限金币.apk (77.18 MB)
│   │   ├── 疯狂动物园，内购充值版.apk (236.45 MB)
│   │   ├── 荒野大镖客无限金币.apk (9.35 MB)
│   │   ├── 阻击者-第二次进入无限金币.apk (105.65 MB)
│   │   └── 风云2-神魔至尊传内购版.apk (1.92 MB)
│   ├── 坦克装甲纷争-解锁所有坦克.apk (592.70 MB)
│   ├── 塔防类/
│   │   └── 塔防王国，无限金币.apk (88.50 MB)
│   ├── 奥术谷（完整版移植版，去除广告）.apk (443.40 MB)
│   ├── 小小炼狱（无限币无限邮票）.apk (256.01 MB)
│   ├── 战争类/
│   │   └── 禁地之战，内购版.apk (99.39 MB)
│   ├── 捕鱼类/
│   │   └── 街机达人捕鱼，购买直接成功.apk (58.74 MB)
│   ├── 放置怪兽（用货币买食物不减反增）.apk (61.69 MB)
│   ├── 暗影猎手内置修改器.apk (147.12 MB)
│   ├── 末日53天（内置菜单）.apk (489.96 MB)
│   ├── 梦幻家园/
│   │   ├── 小镇农场内购版，断网进游戏.apk (42.21 MB)
│   │   ├── 小镇大厨，大量钻石.apk (203.66 MB)
│   │   └── 梦幻家园/
│   │   │   └── 断网进游戏-进入后可开网.apk (96.97 MB)
│   ├── 梦幻餐厅无语破解版.apk (78.30 MB)
│   ├── 模拟城市：重建王国（解锁全部，解锁进程，完整版）.apk (748.75 MB)
│   ├── 模拟城市：重建王国（解锁全部，解锁进程，完整版）(1).apk (748.75 MB)
│   ├── 模拟类/
│   │   ├── 卡车模拟器，欧洲，部分机型无法内购.apk (53.73 MB)
│   │   └── 飞行模拟2018，完成教程可获得大量金币.apk (275.03 MB)
│   ├── 永远的超级食肉男孩（完整版，去除广告去除谷歌）.apk (834.63 MB)
│   ├── 永远的超级食肉男孩（完整版，去除广告去除谷歌）(1).apk (834.63 MB)
│   ├── 沙盒，战略与战术，完整版.apk (74.85 MB)
│   ├── 火车模拟无限金币.apk (56.97 MB)
│   ├── 生存类/
│   │   ├── 最后的幸存者日记，无限资源.apk (101.92 MB)
│   │   ├── 夺命侏罗纪，无限金币，下载慢加载慢，测试可以玩.apk (53.86 MB)
│   │   ├── 安之若命.apk (95.25 MB)
│   │   ├── 恐怖学校白色情人节安卓10可以.apk (1609.45 MB)
│   │   ├── 王国保卫战复仇.apk (542.49 MB)
│   │   └── 生化公司无限金币.apk (63.48 MB)
│   ├── 百战天虫行动版（完整版，去谷歌去广告）.apk (885.83 MB)
│   ├── 百战天虫行动版（完整版，去谷歌去广告）(1).apk (885.83 MB)
│   ├── 破门而入（作弊菜单）.apk (420.92 MB)
│   ├── 破门而入（作弊菜单）(1).apk (420.92 MB)
│   ├── 维京诸神（无限货币）.apk (499.81 MB)
│   ├── 艾塔传说（大量经验，游戏加快）.apk (328.90 MB)
│   ├── 诺亚之瓶，大量金币.apk (83.10 MB)
│   ├── 这是警察2.apk (504.93 MB)
│   ├── 金庸群侠传无限元宝.apk (198.07 MB)
│   ├── 钢铁战队/
│   │   └── 钢铁战队/
│   │   │   └── 钢铁战队1.1.0.apk (413.56 MB)
│   └── 需用模拟器打开类游戏/
│   │   └── 曹操传内购版.apk (106.19 MB)
```
</content:encoded><guid isPermaLink="false">213</guid></item><item><title>暗黑模式＋沉浸式状态栏＋分类 完工</title><link>https://www.open-isle.com/posts/214</link><description>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/137d586d2ab34f5eaeae0007216afdc9.png)

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/5e22d35457794bd0b738e741fbcbc561.png)
</description><content:encoded>![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/137d586d2ab34f5eaeae0007216afdc9.png)

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/5e22d35457794bd0b738e741fbcbc561.png)
</content:encoded><guid isPermaLink="false">214</guid></item><item><title>【小技巧分享】一行正则，让你的 App 完美显示贴吧自定义表情</title><link>https://www.open-isle.com/posts/215</link><description>1. ![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/edc705579b2848c1a2464eb42aac1588.png)![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/2aadcec474a04007a4155462e9626a0f.png)

---

### 如何在 Android 原生 App 中渲染自定义表情？—— 从 `:tieba34:` 到图片的完整解决方案

在将我们的社区内容移植到 Android 原生 App 时，遇到了一个常见但棘手的问题：

&gt; API 返回的 `:tieba34:` 这类自定义表情，在 App 中只显示为纯文本，无法渲染成图片。

经过研究，我采用“预处理 + HTML 渲染”的思路，完美解决了这个问题。现在分享给大家，希望能帮助到有类似需求的开发者！

---

#### 解决思路概览

我们采用三步走策略：

1. **寻找规律**：分析网页端表情图片的 URL 生成规则。
2. **文本替换**：在 App 端预处理文本，将 `:tiebaXX:` 替换为 `&lt;img&gt;` 标签。
3. **渲染显示**：使用支持 HTML 的富文本库（如 Markwon）渲染混合内容。

---

#### 第一步：寻找表情图片的 URL 规律

使用浏览器开发者工具（F12）审查网页上的表情图片，发现：

- 表情代码 `:tieba34:` 对应的图片 URL 是：
  ```
  https://cdn.jsdelivr.net/gh/microlong666/tieba_mobile_emotions@master/image_emoticon34.png
  ```

规律总结：

```
:tibea{ID}:  →  image_emoticon{ID}.png
```

---

#### 第二步：文本预处理 —— 正则替换为 HTML

在 Kotlin 中，使用正则表达式查找所有 `:tiebaXX:` 格式的文本，并替换为 `&lt;img&gt;` 标签。

##### Kotlin 代码实现

```kotlin
import java.util.regex.Pattern

// 表情图片 URL 的基础模板
private const val TIEBA_EMOJI_URL_TEMPLATE =
    "https://cdn.jsdelivr.net/gh/microlong666/tieba_mobile_emotions@master/image_emoticon%s.png"

// 创建正则表达式对象，捕获数字部分
private val tiebaRegex = Pattern.compile(":tieba(\\d+):")

/**
 * 查找并替换文本中所有贴吧表情代码的方法
 * @param text 原始文本，例如 "今天天气不错 :tieba2:！"
 * @param emojiSize 希望表情显示的大小（像素）
 * @return 替换后的 HTML 文本，例如 "今天天气不错 &lt;img ...&gt;！"
 */
fun replaceEmojisWithHtml(text: String, emojiSize: Int): String {
    val matcher = tiebaRegex.matcher(text)
    return matcher.replaceAll { matchResult -&gt;
        // 从捕获组中取出数字 ID
        val emojiId = matchResult.group(1) // 如 ":tieba34:" → "34"

        // 拼接完整图片 URL
        val url = String.format(TIEBA_EMOJI_URL_TEMPLATE, emojiId)

        // 返回 HTML img 标签
        """&lt;img src="$url" width="$emojiSize" height="$emojiSize" /&gt;"""
    }
}
```

---

#### 第三步：使用 Markwon 渲染 HTML 富文本

推荐使用 **Markwon** —— 一个强大的 Android 富文本渲染库，支持 HTML、Markdown、图片加载等。

##### 1. 添加依赖

```gradle
implementation("io.coil-kt:coil:2.4.0")
implementation("io.noties.markwon:core:4.6.2")
implementation("io.noties.markwon:image-coil:4.6.2")
```

##### 2. 在 Activity 中渲染

```kotlin
val markwon = Markwon.builder(this)
    .usePlugin(HtmlPlugin.create()) // 支持 HTML
    .usePlugin(CoilImagesPlugin.create(this)) // 支持网络图片
    .build()

val rawText = "大家好呀 :tieba1: 今天心情 :tieba3:！"
val htmlText = replaceEmojisWithHtml(rawText, 24) // 转为 HTML

markwon.setMarkdown(textView, htmlText)
```

---

#### 最终效果

输入文本：

```
大家好 :tieba1: 今天不错 :tieba5:
```

渲染结果：

&gt; 文字与表情图片完美混排 ✔️

---

#### 优势总结

- ✅ 轻量高效：无需下载所有表情包，按需加载。
- ✅ 兼容性强：适用于任意自定义表情协议。
- ✅ 易于扩展：可支持 `:face1:`、`:customXX:` 等多种格式。
- ✅ 性能好：结合 Coil 实现图片缓存与异步加载。

#### 结语

通过“正则替换 + HTML 渲染”的组合拳，成功将网页端的自定义表情无缝迁移到了 Android 原生 App 中。

这套方案不仅适用于贴吧表情，也适用于任何基于文本标记的表情系统（如 Slack、Discord 风格的表情代码）。

希望这篇分享对你有帮助！欢迎点赞、收藏、转发 🙌

&gt; 你也在做社区类 App？欢迎交流更多表情、Markdown、富文本渲染的实战经验！

---
</description><content:encoded>1. ![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/edc705579b2848c1a2464eb42aac1588.png)![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/2aadcec474a04007a4155462e9626a0f.png)

---

### 如何在 Android 原生 App 中渲染自定义表情？—— 从 `:tieba34:` 到图片的完整解决方案

在将我们的社区内容移植到 Android 原生 App 时，遇到了一个常见但棘手的问题：

&gt; API 返回的 `:tieba34:` 这类自定义表情，在 App 中只显示为纯文本，无法渲染成图片。

经过研究，我采用“预处理 + HTML 渲染”的思路，完美解决了这个问题。现在分享给大家，希望能帮助到有类似需求的开发者！

---

#### 解决思路概览

我们采用三步走策略：

1. **寻找规律**：分析网页端表情图片的 URL 生成规则。
2. **文本替换**：在 App 端预处理文本，将 `:tiebaXX:` 替换为 `&lt;img&gt;` 标签。
3. **渲染显示**：使用支持 HTML 的富文本库（如 Markwon）渲染混合内容。

---

#### 第一步：寻找表情图片的 URL 规律

使用浏览器开发者工具（F12）审查网页上的表情图片，发现：

- 表情代码 `:tieba34:` 对应的图片 URL 是：
  ```
  https://cdn.jsdelivr.net/gh/microlong666/tieba_mobile_emotions@master/image_emoticon34.png
  ```

规律总结：

```
:tibea{ID}:  →  image_emoticon{ID}.png
```

---

#### 第二步：文本预处理 —— 正则替换为 HTML

在 Kotlin 中，使用正则表达式查找所有 `:tiebaXX:` 格式的文本，并替换为 `&lt;img&gt;` 标签。

##### Kotlin 代码实现

```kotlin
import java.util.regex.Pattern

// 表情图片 URL 的基础模板
private const val TIEBA_EMOJI_URL_TEMPLATE =
    "https://cdn.jsdelivr.net/gh/microlong666/tieba_mobile_emotions@master/image_emoticon%s.png"

// 创建正则表达式对象，捕获数字部分
private val tiebaRegex = Pattern.compile(":tieba(\\d+):")

/**
 * 查找并替换文本中所有贴吧表情代码的方法
 * @param text 原始文本，例如 "今天天气不错 :tieba2:！"
 * @param emojiSize 希望表情显示的大小（像素）
 * @return 替换后的 HTML 文本，例如 "今天天气不错 &lt;img ...&gt;！"
 */
fun replaceEmojisWithHtml(text: String, emojiSize: Int): String {
    val matcher = tiebaRegex.matcher(text)
    return matcher.replaceAll { matchResult -&gt;
        // 从捕获组中取出数字 ID
        val emojiId = matchResult.group(1) // 如 ":tieba34:" → "34"

        // 拼接完整图片 URL
        val url = String.format(TIEBA_EMOJI_URL_TEMPLATE, emojiId)

        // 返回 HTML img 标签
        """&lt;img src="$url" width="$emojiSize" height="$emojiSize" /&gt;"""
    }
}
```

---

#### 第三步：使用 Markwon 渲染 HTML 富文本

推荐使用 **Markwon** —— 一个强大的 Android 富文本渲染库，支持 HTML、Markdown、图片加载等。

##### 1. 添加依赖

```gradle
implementation("io.coil-kt:coil:2.4.0")
implementation("io.noties.markwon:core:4.6.2")
implementation("io.noties.markwon:image-coil:4.6.2")
```

##### 2. 在 Activity 中渲染

```kotlin
val markwon = Markwon.builder(this)
    .usePlugin(HtmlPlugin.create()) // 支持 HTML
    .usePlugin(CoilImagesPlugin.create(this)) // 支持网络图片
    .build()

val rawText = "大家好呀 :tieba1: 今天心情 :tieba3:！"
val htmlText = replaceEmojisWithHtml(rawText, 24) // 转为 HTML

markwon.setMarkdown(textView, htmlText)
```

---

#### 最终效果

输入文本：

```
大家好 :tieba1: 今天不错 :tieba5:
```

渲染结果：

&gt; 文字与表情图片完美混排 ✔️

---

#### 优势总结

- ✅ 轻量高效：无需下载所有表情包，按需加载。
- ✅ 兼容性强：适用于任意自定义表情协议。
- ✅ 易于扩展：可支持 `:face1:`、`:customXX:` 等多种格式。
- ✅ 性能好：结合 Coil 实现图片缓存与异步加载。

#### 结语

通过“正则替换 + HTML 渲染”的组合拳，成功将网页端的自定义表情无缝迁移到了 Android 原生 App 中。

这套方案不仅适用于贴吧表情，也适用于任何基于文本标记的表情系统（如 Slack、Discord 风格的表情代码）。

希望这篇分享对你有帮助！欢迎点赞、收藏、转发 🙌

&gt; 你也在做社区类 App？欢迎交流更多表情、Markdown、富文本渲染的实战经验！

---
</content:encoded><guid isPermaLink="false">215</guid></item><item><title>[开源共建] feature updated 🎉: 新增预发环境</title><link>https://www.open-isle.com/posts/216</link><description>## 总体策略

- 一机双环境，彼此隔离端口与目录：上线最快、成本最低。预发可与生产同机但不同端口与 systemd 服务；将来再拆服务器也无需改代码。
- 域名分离：staging.open-isle.com 只反代到预发端口，避免 Cookie、OAuth 回调、WebPush 混用。
- 数据库分离：单独的 openisle_staging 数据库与账号，彻底隔离数据。
- CI/CD 分离：新增一个 deploy-staging.yml（push 到 main 自动跑），生产保留现在的 workflow_dispatch 手动触发。
- 配置分离：Spring Profile 用 staging；Nuxt 用环境变量区分；Nginx 独立 server 块；systemd 新建 *-staging.service。

## 环境变量处理

前端 &amp; 后端的域名，在代码中的harcode，都需要抽离到.env 文件中，这个非常关键；
后端已经在application.properties中，前端看着还没有取消hardcode，目前是写在main.js 中，对API_BASE_URL 进行hardcode；
前端需要抽离到.env环境中，我用的是nuxt推荐的写法

```ts
import { defineNuxtConfig } from 'nuxt/config'

export default defineNuxtConfig({
  ssr: true,
  runtimeConfig: {
    public: {
      apiBaseUrl: process.env.NUXT_PUBLIC_API_BASE_URL || '',
      websiteBaseUrl: process.env.NUXT_PUBLIC_WEBSITE_BASE_URL || '',
      googleClientId: process.env.NUXT_PUBLIC_GOOGLE_CLIENT_ID || '',
      githubClientId: process.env.NUXT_PUBLIC_GITHUB_CLIENT_ID || '',
      discordClientId: process.env.NUXT_PUBLIC_DISCORD_CLIENT_ID || '',
      twitterClientId: process.env.NUXT_PUBLIC_TWITTER_CLIENT_ID || '',
    },
  },

....

```

获取的时候，就需要

```js
const config = useRuntimeConfig()
const API_BASE_URL = config.public.apiBaseUrl
```

这个操作要求在nuxt的上下文中完成，由于前端之前是Vue3 CSR迁移过来的，很多组件仍然没把逻辑迁移到 script setup 中
这就要求我先进行一大波迁移，把所有前端都改为 &lt;script setup&gt; 真是极其大的工程量

## 预发数据库分离

那么我们已经完成代码层面的修改，现在可以开始正式环境迁移
在原机器基础上copy一份新的数据库

```shell
&gt; mysqldump -u root  --single-transaction --routines --triggers openisle &gt; /root/openisle.sql
&gt; mysql -u root -e "CREATE DATABASE openisle_staging CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;"
&gt; mysql -u root  openisle_staging &lt; /root/openisle.sql
```

## 后端预发环境

后端环境变量，需要把后台数据库改为openisle_staging

```conf
# 注意修改为openisle_staging 
MYSQL_URL=jdbc:mysql://127.0.0.1:3306/openisle_staging?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useInformationSchema=true&amp;useSSL=false&amp;serverTimezone=UTC
MYSQL_USER=...
MYSQL_PASSWORD=...
RESEND_API_KEY=...
...

```

配置后端服务, systemd 服务文件

```shell
&gt; cp /etc/systemd/system/openisle.service /etc/systemd/system/openisle-staging.service
&gt; vim /etc/systemd/system/openisle-staging.service
```

```conf
# /etc/systemd/system/openisle-staging.service
[Unit]
Description=OpenIsle backend (Staging, Spring Boot Jar)
After=network.target

[Service]
Type=simple
WorkingDirectory=/opt/openisle/backend-staging
EnvironmentFile=/opt/openisle/backend-staging/openisle.env
Environment=SPRING_PROFILES_ACTIVE=staging
Environment=TZ=Asia/Shanghai
Environment="JAVA_OPTS=-Duser.timezone=Asia/Shanghai"
# 注意后面指明端口为8081 --server.port=8081
ExecStart=/usr/bin/java $JAVA_OPTS -jar /opt/openisle/staging/backend/openisle.jar --server.port=8081
Restart=on-failure
RestartSec=3
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
```

## 前端预发环境

```shell
&gt; cp /etc/systemd/system/openisle-frontend.service /etc/systemd/system/openisle-frontend-staging.service
&gt; vim /etc/systemd/system/openisle-frontend-staging.service
```

```conf
[Unit]
Description=OpenIsle Frontend (Nuxt/Nitro SSR)
After=network.target

[Service]
Type=simple
WorkingDirectory=/opt/openisle/OpenIsle-staging/frontend_nuxt
Environment=NODE_ENV=production
Environment=TZ=Asia/Shanghai
Environment=NITRO_PORT=3000
# 如需传入 API_BASE_URL 也可在这里覆盖：
# Environment=NUXT_PUBLIC_API_BASE_URL=https://open-isle.com
ExecStart=/usr/bin/node .output/server/index.mjs
Restart=always
RestartSec=3
# 可选：限制内存/FD 等
# LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
```

## 前后端构建脚本

```shell
#!/usr/bin/env bash
set -euo pipefail

deploy_branch="main"

cd /opt/openisle/OpenIsle-staging

echo "👉 Syncing code..."
git fetch --prune origin
if ! git merge --ff-only "origin/$deploy_branch"; then
  echo "⚠️  Local branch diverged — resetting to origin/$deploy_branch"
  git reset --hard "origin/$deploy_branch"
fi

# ---------- 后端 ----------
echo "👉 Building backend..."
cd backend
mvn -B clean package -DskipTests
install -m 644 target/*.jar /opt/openisle/backend_staging/openisle.jar
systemctl restart openisle-staging
cd ..

# ---------- 前端（Nuxt SSR） ----------
echo "👉 Building frontend (Nuxt SSR)..."
cd frontend_nuxt

# 如需覆盖环境变量，按需复制；否则可删除该行
cp .env.staging.example .env || true

npm ci
npm run build    # 只 build，不 generate

# 👉 额外一步：对 generate 做一次烟测，但不使用其产物
# 说明：部分 Nuxt/Nitro 版本会忽略 NITRO_OUTPUT_DIR/--output，稳定方案是“备份 .output → generate → 校验 → 还原 .output”
echo "🧪 Smoke-testing: nuxt generate (artifacts will NOT be used)..."

SSR_OUTPUT_DIR=".output"
SSR_OUTPUT_BAK=".output-ssr-backup-$$"
GEN_FAIL_MSG="❌ Generate smoke test failed"

if [ ! -d "$SSR_OUTPUT_DIR" ]; then
  echo "❌ 未发现 $SSR_OUTPUT_DIR，请先确保 npm run build 成功执行"
  exit 1
fi

# 备份 SSR 产物
mv "$SSR_OUTPUT_DIR" "$SSR_OUTPUT_BAK"

# 失败时还原
restore_on_fail() {
  # 若 generate 失败，尽量保留失败现场到 .output-generate-failed-*
  if [ -d ".output" ]; then
    mv .output ".output-generate-failed-$(date +%s)" || true
  fi
  # 还原 SSR 产物
  mv "$SSR_OUTPUT_BAK" "$SSR_OUTPUT_DIR"
}
trap 'restore_on_fail; echo "'"$GEN_FAIL_MSG"': unexpected error"; exit 1' ERR

# 执行 generate（可能会重新编译前端与服务端）
NUXT_TELEMETRY_DISABLED=1 \
NITRO_PRERENDER_FAIL_ON_ERROR=1 \
npx nuxi generate --preset static

# 校验 generate 是否产出静态目录
if [ ! -d ".output/public" ]; then
  restore_on_fail
  echo "$GEN_FAIL_MSG: .output/public not found"
  exit 1
fi

# 清理 generate 的 .output，并还原 SSR .output
rm -rf ".output"
mv "$SSR_OUTPUT_BAK" "$SSR_OUTPUT_DIR"
trap - ERR
echo "✅ Generate smoke test passed."

# 同步静态产物给 Nginx（/_nuxt 与 /assets），来自 SSR 构建的 .output/public
if [ -d ".output/public" ]; then
  rsync -a --delete .output/public/ /var/www/openisle-staging/
else
  echo "❌ 未发现 .output/public；检查 nuxt.config.ts/nitro preset"
  exit 1
fi

# 重启 SSR 进程
systemctl restart openisle-frontend-staging
cd ..

# ---------- Nginx ----------
nginx -t &amp;&amp; systemctl reload nginx

echo "✅ Deploy finished at $(date)"
```

## CI &amp; CD

现在我们有了预发环境，生产环境可以修改为每天构建1次+手动触发
预发则是main提交则触发构建

预发

```yaml
name: Staging CI &amp; CD

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Deploy

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: bash /opt/openisle/deploy-staging.sh
```

生产

```yaml
name: CI &amp; CD

on:
  workflow_dispatch:
  schedule:
    - cron: "0 19 * * *"   # 每天 UTC 19:00，相当于北京时间凌晨3点

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Deploy

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: bash /opt/openisle/deploy.sh

```


## Finally

经过这一番操作，前后端的预发环境终于通了，大家现在可以直连预发环境进行调试 🎉
</description><content:encoded>## 总体策略

- 一机双环境，彼此隔离端口与目录：上线最快、成本最低。预发可与生产同机但不同端口与 systemd 服务；将来再拆服务器也无需改代码。
- 域名分离：staging.open-isle.com 只反代到预发端口，避免 Cookie、OAuth 回调、WebPush 混用。
- 数据库分离：单独的 openisle_staging 数据库与账号，彻底隔离数据。
- CI/CD 分离：新增一个 deploy-staging.yml（push 到 main 自动跑），生产保留现在的 workflow_dispatch 手动触发。
- 配置分离：Spring Profile 用 staging；Nuxt 用环境变量区分；Nginx 独立 server 块；systemd 新建 *-staging.service。

## 环境变量处理

前端 &amp; 后端的域名，在代码中的harcode，都需要抽离到.env 文件中，这个非常关键；
后端已经在application.properties中，前端看着还没有取消hardcode，目前是写在main.js 中，对API_BASE_URL 进行hardcode；
前端需要抽离到.env环境中，我用的是nuxt推荐的写法

```ts
import { defineNuxtConfig } from 'nuxt/config'

export default defineNuxtConfig({
  ssr: true,
  runtimeConfig: {
    public: {
      apiBaseUrl: process.env.NUXT_PUBLIC_API_BASE_URL || '',
      websiteBaseUrl: process.env.NUXT_PUBLIC_WEBSITE_BASE_URL || '',
      googleClientId: process.env.NUXT_PUBLIC_GOOGLE_CLIENT_ID || '',
      githubClientId: process.env.NUXT_PUBLIC_GITHUB_CLIENT_ID || '',
      discordClientId: process.env.NUXT_PUBLIC_DISCORD_CLIENT_ID || '',
      twitterClientId: process.env.NUXT_PUBLIC_TWITTER_CLIENT_ID || '',
    },
  },

....

```

获取的时候，就需要

```js
const config = useRuntimeConfig()
const API_BASE_URL = config.public.apiBaseUrl
```

这个操作要求在nuxt的上下文中完成，由于前端之前是Vue3 CSR迁移过来的，很多组件仍然没把逻辑迁移到 script setup 中
这就要求我先进行一大波迁移，把所有前端都改为 &lt;script setup&gt; 真是极其大的工程量

## 预发数据库分离

那么我们已经完成代码层面的修改，现在可以开始正式环境迁移
在原机器基础上copy一份新的数据库

```shell
&gt; mysqldump -u root  --single-transaction --routines --triggers openisle &gt; /root/openisle.sql
&gt; mysql -u root -e "CREATE DATABASE openisle_staging CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci;"
&gt; mysql -u root  openisle_staging &lt; /root/openisle.sql
```

## 后端预发环境

后端环境变量，需要把后台数据库改为openisle_staging

```conf
# 注意修改为openisle_staging 
MYSQL_URL=jdbc:mysql://127.0.0.1:3306/openisle_staging?useUnicode=yes&amp;characterEncoding=UTF-8&amp;useInformationSchema=true&amp;useSSL=false&amp;serverTimezone=UTC
MYSQL_USER=...
MYSQL_PASSWORD=...
RESEND_API_KEY=...
...

```

配置后端服务, systemd 服务文件

```shell
&gt; cp /etc/systemd/system/openisle.service /etc/systemd/system/openisle-staging.service
&gt; vim /etc/systemd/system/openisle-staging.service
```

```conf
# /etc/systemd/system/openisle-staging.service
[Unit]
Description=OpenIsle backend (Staging, Spring Boot Jar)
After=network.target

[Service]
Type=simple
WorkingDirectory=/opt/openisle/backend-staging
EnvironmentFile=/opt/openisle/backend-staging/openisle.env
Environment=SPRING_PROFILES_ACTIVE=staging
Environment=TZ=Asia/Shanghai
Environment="JAVA_OPTS=-Duser.timezone=Asia/Shanghai"
# 注意后面指明端口为8081 --server.port=8081
ExecStart=/usr/bin/java $JAVA_OPTS -jar /opt/openisle/staging/backend/openisle.jar --server.port=8081
Restart=on-failure
RestartSec=3
LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
```

## 前端预发环境

```shell
&gt; cp /etc/systemd/system/openisle-frontend.service /etc/systemd/system/openisle-frontend-staging.service
&gt; vim /etc/systemd/system/openisle-frontend-staging.service
```

```conf
[Unit]
Description=OpenIsle Frontend (Nuxt/Nitro SSR)
After=network.target

[Service]
Type=simple
WorkingDirectory=/opt/openisle/OpenIsle-staging/frontend_nuxt
Environment=NODE_ENV=production
Environment=TZ=Asia/Shanghai
Environment=NITRO_PORT=3000
# 如需传入 API_BASE_URL 也可在这里覆盖：
# Environment=NUXT_PUBLIC_API_BASE_URL=https://open-isle.com
ExecStart=/usr/bin/node .output/server/index.mjs
Restart=always
RestartSec=3
# 可选：限制内存/FD 等
# LimitNOFILE=65535

[Install]
WantedBy=multi-user.target
```

## 前后端构建脚本

```shell
#!/usr/bin/env bash
set -euo pipefail

deploy_branch="main"

cd /opt/openisle/OpenIsle-staging

echo "👉 Syncing code..."
git fetch --prune origin
if ! git merge --ff-only "origin/$deploy_branch"; then
  echo "⚠️  Local branch diverged — resetting to origin/$deploy_branch"
  git reset --hard "origin/$deploy_branch"
fi

# ---------- 后端 ----------
echo "👉 Building backend..."
cd backend
mvn -B clean package -DskipTests
install -m 644 target/*.jar /opt/openisle/backend_staging/openisle.jar
systemctl restart openisle-staging
cd ..

# ---------- 前端（Nuxt SSR） ----------
echo "👉 Building frontend (Nuxt SSR)..."
cd frontend_nuxt

# 如需覆盖环境变量，按需复制；否则可删除该行
cp .env.staging.example .env || true

npm ci
npm run build    # 只 build，不 generate

# 👉 额外一步：对 generate 做一次烟测，但不使用其产物
# 说明：部分 Nuxt/Nitro 版本会忽略 NITRO_OUTPUT_DIR/--output，稳定方案是“备份 .output → generate → 校验 → 还原 .output”
echo "🧪 Smoke-testing: nuxt generate (artifacts will NOT be used)..."

SSR_OUTPUT_DIR=".output"
SSR_OUTPUT_BAK=".output-ssr-backup-$$"
GEN_FAIL_MSG="❌ Generate smoke test failed"

if [ ! -d "$SSR_OUTPUT_DIR" ]; then
  echo "❌ 未发现 $SSR_OUTPUT_DIR，请先确保 npm run build 成功执行"
  exit 1
fi

# 备份 SSR 产物
mv "$SSR_OUTPUT_DIR" "$SSR_OUTPUT_BAK"

# 失败时还原
restore_on_fail() {
  # 若 generate 失败，尽量保留失败现场到 .output-generate-failed-*
  if [ -d ".output" ]; then
    mv .output ".output-generate-failed-$(date +%s)" || true
  fi
  # 还原 SSR 产物
  mv "$SSR_OUTPUT_BAK" "$SSR_OUTPUT_DIR"
}
trap 'restore_on_fail; echo "'"$GEN_FAIL_MSG"': unexpected error"; exit 1' ERR

# 执行 generate（可能会重新编译前端与服务端）
NUXT_TELEMETRY_DISABLED=1 \
NITRO_PRERENDER_FAIL_ON_ERROR=1 \
npx nuxi generate --preset static

# 校验 generate 是否产出静态目录
if [ ! -d ".output/public" ]; then
  restore_on_fail
  echo "$GEN_FAIL_MSG: .output/public not found"
  exit 1
fi

# 清理 generate 的 .output，并还原 SSR .output
rm -rf ".output"
mv "$SSR_OUTPUT_BAK" "$SSR_OUTPUT_DIR"
trap - ERR
echo "✅ Generate smoke test passed."

# 同步静态产物给 Nginx（/_nuxt 与 /assets），来自 SSR 构建的 .output/public
if [ -d ".output/public" ]; then
  rsync -a --delete .output/public/ /var/www/openisle-staging/
else
  echo "❌ 未发现 .output/public；检查 nuxt.config.ts/nitro preset"
  exit 1
fi

# 重启 SSR 进程
systemctl restart openisle-frontend-staging
cd ..

# ---------- Nginx ----------
nginx -t &amp;&amp; systemctl reload nginx

echo "✅ Deploy finished at $(date)"
```

## CI &amp; CD

现在我们有了预发环境，生产环境可以修改为每天构建1次+手动触发
预发则是main提交则触发构建

预发

```yaml
name: Staging CI &amp; CD

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Deploy

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: bash /opt/openisle/deploy-staging.sh
```

生产

```yaml
name: CI &amp; CD

on:
  workflow_dispatch:
  schedule:
    - cron: "0 19 * * *"   # 每天 UTC 19:00，相当于北京时间凌晨3点

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Deploy

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: bash /opt/openisle/deploy.sh

```


## Finally

经过这一番操作，前后端的预发环境终于通了，大家现在可以直连预发环境进行调试 🎉
</content:encoded><guid isPermaLink="false">216</guid></item><item><title>周末是不是没人？</title><link>https://www.open-isle.com/posts/218</link><description>周末没有抽奖，是不是没人？怀疑都是工作日来抽奖的，在的吱一声
</description><content:encoded>周末没有抽奖，是不是没人？怀疑都是工作日来抽奖的，在的吱一声
</content:encoded><guid isPermaLink="false">218</guid></item><item><title>🎉 【更新日志】CodeIsle v1.1 正式发布！搜索上线，体验优化！</title><link>https://www.open-isle.com/posts/219</link><description># 🎉 CodeIsle v1.1 来了！

本次更新带来了全局搜索功能，并修复了几个影响体验的 Bug，整体流畅度和视觉效果都有了显著提升。

---

## ✨ 新功能

### 🔍 全局搜索已上线

- 新增独立的搜索页面，支持关键词查询。
- 搜索结果以列表形式清晰展示，浏览更高效。

&gt; 🐞 **当前状态**：目前搜索功能已完成界面搭建，但点击后暂无响应。搜索逻辑正在开发中，将在下一版本实现，敬请期待！

---

## 🛠️ 优化与修复

### 🎨 深色模式体验优化

- 修复了深色模式下部分文字颜色过浅导致看不清的问题，阅读更舒适。

### 📱 界面显示修复

- 修复了状态栏颜色与主题不统一的问题。
- 解决了部分页面内容重叠的布局 Bug。

### 👤 用户详情页改进

- 优化了数据显示逻辑，信息加载更流畅、准确。

---

## 🖼️ 交互体验增强

### 🖼️ 用户头像支持点击放大

- 点击用户头像可查看大图，提升视觉体验。

### 💾 点击头像保存到本地

- 点击头像后下载即可保存至相册，方便收藏。

---

## 🔮 下一步计划

- **🌙 暗黑模式手动开关**：当前版本会跟随系统自动切换，手动开关按钮已在开发中。
- **💬 评论与回复功能**：支持与作者互动。
- **📤 一键分享**：将精彩内容分享给好友。
- **🔍 完整搜索功能**：实现搜索响应与结果展示。

---

## 📦 如何下载

你可以通过以下方式获取最新版 APK：

🔗 [GitHub Releases](https://github.com/jay3-yy/CodeIsle/releases)

---

## 💬 你的反馈很重要！

如果你在使用过程中遇到任何问题，或者有功能建议，欢迎在 GitHub 提交 Issue 或直接在此帖下留言。你的每一句反馈，都是推动 CodeIsle 前进的动力！

🔗 **项目开源地址**：[https://github.com/jay3-yy/CodeIsle](https://github.com/jay3-yy/CodeIsle)

---

感谢你的支持，我们下一版本见！🌟

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/3432789b4c8d443faaa2c78275829cff.png)

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/0252cb78d37d40369f193a3c572e243e.png)
</description><content:encoded># 🎉 CodeIsle v1.1 来了！

本次更新带来了全局搜索功能，并修复了几个影响体验的 Bug，整体流畅度和视觉效果都有了显著提升。

---

## ✨ 新功能

### 🔍 全局搜索已上线

- 新增独立的搜索页面，支持关键词查询。
- 搜索结果以列表形式清晰展示，浏览更高效。

&gt; 🐞 **当前状态**：目前搜索功能已完成界面搭建，但点击后暂无响应。搜索逻辑正在开发中，将在下一版本实现，敬请期待！

---

## 🛠️ 优化与修复

### 🎨 深色模式体验优化

- 修复了深色模式下部分文字颜色过浅导致看不清的问题，阅读更舒适。

### 📱 界面显示修复

- 修复了状态栏颜色与主题不统一的问题。
- 解决了部分页面内容重叠的布局 Bug。

### 👤 用户详情页改进

- 优化了数据显示逻辑，信息加载更流畅、准确。

---

## 🖼️ 交互体验增强

### 🖼️ 用户头像支持点击放大

- 点击用户头像可查看大图，提升视觉体验。

### 💾 点击头像保存到本地

- 点击头像后下载即可保存至相册，方便收藏。

---

## 🔮 下一步计划

- **🌙 暗黑模式手动开关**：当前版本会跟随系统自动切换，手动开关按钮已在开发中。
- **💬 评论与回复功能**：支持与作者互动。
- **📤 一键分享**：将精彩内容分享给好友。
- **🔍 完整搜索功能**：实现搜索响应与结果展示。

---

## 📦 如何下载

你可以通过以下方式获取最新版 APK：

🔗 [GitHub Releases](https://github.com/jay3-yy/CodeIsle/releases)

---

## 💬 你的反馈很重要！

如果你在使用过程中遇到任何问题，或者有功能建议，欢迎在 GitHub 提交 Issue 或直接在此帖下留言。你的每一句反馈，都是推动 CodeIsle 前进的动力！

🔗 **项目开源地址**：[https://github.com/jay3-yy/CodeIsle](https://github.com/jay3-yy/CodeIsle)

---

感谢你的支持，我们下一版本见！🌟

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/3432789b4c8d443faaa2c78275829cff.png)

![image.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/0252cb78d37d40369f193a3c572e243e.png)
</content:encoded><guid isPermaLink="false">219</guid></item><item><title>欢迎加入 OpenIsle 社区！</title><link>https://www.open-isle.com/posts/1</link><description>&gt; **OpenIsle = Open + Isle** —— 让每位热爱分享与探索的人都能在这座「开源小岛」上找到归属。

## 🌐 我们关注什么？


| 核心板块            | 推荐主题示例                                           |
| --------------------- | -------------------------------------------------------- |
| **技术 &amp; 开发调优** | 编程语言、架构设计、AI/LLM、DevOps、区块链、低代码…… |
| **资源整合**        | 学习路线、电子书、效率工具、摸鱼网站、数据集……       |
| **资讯 &amp; 快讯**     | 新框架发布、行业动态、加密货币、重大安全事件解读……   |
| **好玩 &amp; 创意**     | Side Project、Hackathon 作品、脑洞原型、黑客文化……   |
| **运营反馈**        | 功能需求、Bug 报告、社区活动建议……                   |

&gt; **原则：以技术辐射一切话题。**
&gt; 代码、设计、职场、生产力、旅行、人生体验……只要能启发思考、助人成长，都欢迎开聊！


## 🛠️ 实用链接

🔥 本站基于开源项目 [OpenIsle](https://github.com/nagisa77/OpenIsle) 构建，欢迎 Star 和 Fork～


### 💬 有建议？

在[「运营反馈」](https://www.open-isle.com/?category=7)分类发帖，我会及时跟进～
</description><content:encoded>&gt; **OpenIsle = Open + Isle** —— 让每位热爱分享与探索的人都能在这座「开源小岛」上找到归属。

## 🌐 我们关注什么？


| 核心板块            | 推荐主题示例                                           |
| --------------------- | -------------------------------------------------------- |
| **技术 &amp; 开发调优** | 编程语言、架构设计、AI/LLM、DevOps、区块链、低代码…… |
| **资源整合**        | 学习路线、电子书、效率工具、摸鱼网站、数据集……       |
| **资讯 &amp; 快讯**     | 新框架发布、行业动态、加密货币、重大安全事件解读……   |
| **好玩 &amp; 创意**     | Side Project、Hackathon 作品、脑洞原型、黑客文化……   |
| **运营反馈**        | 功能需求、Bug 报告、社区活动建议……                   |

&gt; **原则：以技术辐射一切话题。**
&gt; 代码、设计、职场、生产力、旅行、人生体验……只要能启发思考、助人成长，都欢迎开聊！


## 🛠️ 实用链接

🔥 本站基于开源项目 [OpenIsle](https://github.com/nagisa77/OpenIsle) 构建，欢迎 Star 和 Fork～


### 💬 有建议？

在[「运营反馈」](https://www.open-isle.com/?category=7)分类发帖，我会及时跟进～
</content:encoded><guid isPermaLink="false">1</guid></item><item><title>👨‍💻用户反馈收集贴</title><link>https://www.open-isle.com/posts/52</link><description>本帖会收集各个渠道用户反馈，并同步修复情况；

大家如果有问题也可以在本帖或本站各个角落反馈，我会收集后修复 :)
</description><content:encoded>本帖会收集各个渠道用户反馈，并同步修复情况；

大家如果有问题也可以在本帖或本站各个角落反馈，我会收集后修复 :)
</content:encoded><guid isPermaLink="false">52</guid></item><item><title>【开源共建🎉】欢迎参与OpenIsle开源社区共建</title><link>https://www.open-isle.com/posts/217</link><description>随着开服3周左右，来了不少小伙伴；也有参与本项目开发的朋友，目前10位左右，比我预期的高很多～再此衷心感激各位，开源的乐趣就是coding和协作，这几周跟大家一起协作coding真的很快乐

&gt; 本帖荟萃各种本项目的相关信息，希望帮到想要参与开源社区的朋友

[🔗本站Roadmap一览](https://www.open-isle.com/posts/104)

[🔗部署本站的方法](https://www.open-isle.com/posts/82)

### 本站和谐交流频道

[https://t.me/Openlsle](https://t.me/Openlsle) :tieba68: 感谢 @[Jay3] 创建

### 本站问题列表和新功能共创

[🔗bug &amp; feature 列表 -- 已在GitHub Issue列出](https://github.com/nagisa77/OpenIsle/issues)

- 如果有感兴趣的问题和新功能，可随时评论认领，有好点子可评论交流；
- 如果有发现的问题，或想要新增的新功能，也可以在Issue页面直接New Issue提出

![CleanShot 2025-08-16 at 3 .41.25@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/b57b8d5c3ad54253a46d9b12c65be1d1.png)

(截至目前总共已经有96issues，已解决64issues 🎉)

&gt; 感谢这两周参与项目的小伙伴

@[白山] @[AnNingUI] @[netcat] @[WilliamColton] @[浮小云] @[immort521] @[pansysyy]

![CleanShot 2025-08-16 at 3 .44.01@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/2fdd1f91d9384db7827c94522ef0bb66.png)

### 如大家遇到问题也可在本站问题反馈帖直接反馈👇

[🔗问题反馈](https://www.open-isle.com/posts/52)


### 其他信息

[🔗本站安卓端](https://github.com/jay3-yy/CodeIsle/releases/tag/v1.0) 感谢大佬 @[Jay3] 支持
</description><content:encoded>随着开服3周左右，来了不少小伙伴；也有参与本项目开发的朋友，目前10位左右，比我预期的高很多～再此衷心感激各位，开源的乐趣就是coding和协作，这几周跟大家一起协作coding真的很快乐

&gt; 本帖荟萃各种本项目的相关信息，希望帮到想要参与开源社区的朋友

[🔗本站Roadmap一览](https://www.open-isle.com/posts/104)

[🔗部署本站的方法](https://www.open-isle.com/posts/82)

### 本站和谐交流频道

[https://t.me/Openlsle](https://t.me/Openlsle) :tieba68: 感谢 @[Jay3] 创建

### 本站问题列表和新功能共创

[🔗bug &amp; feature 列表 -- 已在GitHub Issue列出](https://github.com/nagisa77/OpenIsle/issues)

- 如果有感兴趣的问题和新功能，可随时评论认领，有好点子可评论交流；
- 如果有发现的问题，或想要新增的新功能，也可以在Issue页面直接New Issue提出

![CleanShot 2025-08-16 at 3 .41.25@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/b57b8d5c3ad54253a46d9b12c65be1d1.png)

(截至目前总共已经有96issues，已解决64issues 🎉)

&gt; 感谢这两周参与项目的小伙伴

@[白山] @[AnNingUI] @[netcat] @[WilliamColton] @[浮小云] @[immort521] @[pansysyy]

![CleanShot 2025-08-16 at 3 .44.01@2x.png](https://openisle-1307107697.cos.accelerate.myqcloud.com/dynamic_assert/2fdd1f91d9384db7827c94522ef0bb66.png)

### 如大家遇到问题也可在本站问题反馈帖直接反馈👇

[🔗问题反馈](https://www.open-isle.com/posts/52)


### 其他信息

[🔗本站安卓端](https://github.com/jay3-yy/CodeIsle/releases/tag/v1.0) 感谢大佬 @[Jay3] 支持
</content:encoded><guid isPermaLink="false">217</guid></item></channel></rss>
